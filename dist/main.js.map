{"version":3,"file":"main.js","sources":["../src/roomPlanning/RoomPlanning.js","../src/roomPlanning/planningUtils.ts","../src/roomPlanning/planningAcces.ts","../src/roomPlanning/TranslatePlanning.ts","../src/colony/Memory.ts","../src/creep/setting.ts","../src/structure/CreepSpawning.ts","../src/department/Department.ts","../src/department/dpt_config.ts","../src/department/dpt_harvest/Dpt_harvest.ts","../src/colony/Colony.ts","../src/colony/ColonyApi.ts","../src/utils.ts","../src/creep/role/basic.ts","../src/creep/mout.creep.ts","../src/creep/index.ts","../src/main.ts"],"sourcesContent":["/**\r\n * 63超级扣位置自动布局\r\n * 能覆盖95% 地地形布局的覆盖\r\n * \r\n * author：6g3y,Scorpior,Scokranotes,ChenyangDu\r\n * version:1.0.8\r\n * \r\n * 【使用方法（傻瓜版）】\r\n * 1.设置4个flag，分别为对应房间的\r\n *     pc 控制器\r\n *     pm 矿\r\n *     pa pb 能量源\r\n * 2.下载63大佬的超级扣位置自动布局，解压并导入wasm二进制模块，\r\n *   命名（不要后缀）：algo_wasm_priorityqueue，确保此时文件夹中应当增了以下两个文件\r\n *     + 63超级扣位置自动布局_改良版.js\r\n *     + algo_wasm_priorityqueue.wasm\r\n * \r\n * 3.在主循环代码的末尾，也就是main.js的module.exports.loop中最后一行添加\r\n *      require(\"63超级扣位置自动布局_改良版\").run()\r\n * \r\n * 4.运行（注意截图）\r\n * 5.放一个flag名字为p，随便放哪，运行会自动检测，检测到有p这个flag就会运行，运行完成会自动删掉\r\n *   显示的时间非常短，注意截图，消失了再放一个p又会重新运行一遍，不要反复折腾完，很耗CPU\r\n * \r\n * 【使用方法（高级版）】\r\n * 1.计算位置\r\n *  [flagController,flagMineral,flagSourceA,flagSourceB]\r\n *  必须包含.pos对象 {{{ p.pos.x|y }}}\r\n * >> roomStructsData = ManagerPlanner.computeManor(p.pos.roomName,[pc,pm,pa,pb])\r\n * \r\n * 2.可视化显示\r\n * >> HelperVisual.showRoomStructures(roomStructsData.roomName,roomStructsData.structMap)\r\n * \r\n * 【结果说明】\r\n * {\r\n *       roomName: roomName\r\n *       storagePos: {x,y} //storage集群中心位置\r\n *       labPos: {x,y} //lab中心位置\r\n *       structMap:{ \"rampart\" : [[x1,y1],[x2,y2] ...] ...} \r\n *           \"建筑类型，直接用没问题的\":[[x1,y1]]\r\n *           //建造的时候按顺序就可以了 ，顺序是距离 storagePos 排序过后的（除了road）\r\n *           //具体建造多少个，使用 CONTROLLER_STRUCTURES 获取当前可以造多少\r\n * }\r\n * \r\n * \r\n * 【警告】\r\n * ！！警告！！ 确保你的bucket和可运行CPU超过100个 ！！警告！！\r\n * ！！警告！！ 确保你的bucket和可运行CPU超过100个 ！！警告！！\r\n * ！！警告！！ 确保你的bucket和可运行CPU超过100个 ！！警告！！\r\n * ！！警告！！ 确保你的bucket和可运行CPU超过100个 ！！警告！！\r\n * ！！警告！！ 确保你的bucket和可运行CPU超过100个 ！！警告！！\r\n * ！！警告！！ 确保你的bucket和可运行CPU超过100个 ！！警告！！\r\n * \r\n * \r\n * 【原理】：能跑就行有空 写篇简书\r\n * 【代码】：挺乱的 如果有机会在整理一下代码\r\n * \r\n * 【更新说明】：\r\n * 1.优化了外矿的寻路\r\n * 2.优化了塔的布局\r\n * 3.更新了说明文档\r\n * \r\n * 感谢63！\r\n * \r\n */\r\n\r\n\r\n \r\n/**\r\n *  wasm 优先队列\r\n *  帮你加速涉及优先级的调度算法\r\n *  \r\n *  author: Scorpior\r\n *  version: v1.1.0\r\n *  \r\n *  usage: \r\n *  1. add .js and .wasm modules\r\n *  2. require .js module and use\r\n *\r\n *  本人有改动！\r\n */\r\n\r\n global.structuresShape= {\r\n    \"spawn\": \"◎\",\r\n    \"extension\": \"ⓔ\",\r\n    \"link\": \"◈\",\r\n    \"road\": \"•\",\r\n    \"constructedWall\": \"▓\",\r\n    \"rampart\": \"⊙\",\r\n    \"storage\": \"▤\",\r\n    \"tower\": \"🔫\",\r\n    \"observer\": \"👀\",\r\n    \"powerSpawn\": \"❂\",\r\n    \"extractor\": \"⇌\",\r\n    \"terminal\": \"✡\",\r\n    \"lab\": \"☢\",\r\n    \"container\": \"□\",\r\n    \"nuker\": \"▲\",\r\n    \"factory\": \"☭\"\r\n}\r\nglobal.structuresColor= {\r\n    \"spawn\": \"cyan\",\r\n    \"extension\": \"#0bb118\",\r\n    \"link\": \"yellow\",\r\n    \"road\": \"#fa6f6f\",\r\n    \"constructedWall\": \"#003fff\",\r\n    \"rampart\": \"#003fff\",\r\n    \"storage\": \"yellow\",\r\n    \"tower\": \"cyan\",\r\n    \"observer\": \"yellow\",\r\n    \"powerSpawn\": \"cyan\",\r\n    \"extractor\": \"cyan\",\r\n    \"terminal\": \"yellow\",\r\n    \"lab\": \"#d500ff\",\r\n    \"container\": \"yellow\",\r\n    \"nuker\": \"cyan\",\r\n    \"factory\": \"yellow\"\r\n}\r\nlet helpervisual={\r\n    //线性同余随机数\r\n    rnd : function( seed ){\r\n    return ( seed * 9301 + 49297 ) % 233280; //为何使用这三个数?\r\n    },\r\n    // seed 的随机颜色\r\n    randomColor : function (seed){\r\n        seed = parseInt(seed)\r\n        let str = \"12334567890ABCDEF\"\r\n        let out = \"#\"\r\n        for(let i=0;i<6;i++){\r\n            seed = helpervisual.rnd(seed+Game.time%100)\r\n            out+=str[parseInt(seed)%str.length]\r\n        }\r\n        return out\r\n    },\r\n    // 大概消耗1 CPU！ 慎用！\r\n    showRoomStructures : function (roomName,structMap){\r\n        let roomStructs = new RoomArray().init()\r\n        const visual = new RoomVisual(roomName);\r\n        structMap[\"road\"].forEach(e=>roomStructs.set(e[0],e[1],\"road\"))\r\n        _.keys(CONTROLLER_STRUCTURES).forEach(struct=>{\r\n            if(struct==\"road\"){\r\n                structMap[struct].forEach(e=>{\r\n                    roomStructs.forNear((x,y,val)=>{\r\n                        if(val ==\"road\"&&((e[0]>=x&&e[1]>=y)||(e[0]>x&&e[1]<y)))visual.line(x,y,e[0],e[1],{color:structuresColor[struct]})\r\n                    },e[0],e[1]);\r\n                    visual.text(structuresShape[struct], e[0],e[1]+0.25, {color: structuresColor[struct],opacity:0.75,fontSize: 7})\r\n                })\r\n            }\r\n            else structMap[struct].forEach(e=>visual.text(structuresShape[struct], e[0],e[1]+0.25, {color: structuresColor[struct],opacity:0.75,fontSize: 7}))\r\n        })\r\n    },\r\n}\r\n\r\nexport let HelperVisual=helpervisual;\r\n\r\n\r\nclass UnionFind{\r\n\r\n    constructor(size) {\r\n        this.size  = size\r\n    }\r\n    init() {\r\n        if(!this.parent)\r\n            this.parent = new Array(this.size)\r\n        for(let i=0;i<this.size;i++){\r\n            this.parent[i]=i;\r\n        }\r\n    }\r\n    find(x) {\r\n        let r = x;\r\n        while (this.parent[r] != r) r = this.parent[r];\r\n        while (this.parent[x] != x) {\r\n            let t = this.parent[x];\r\n            this.parent[x] = r;\r\n            x = t;\r\n        }\r\n        return x;\r\n    }\r\n    union(a,b){\r\n        a = this.find(a)\r\n        b = this.find(b)\r\n        if(a>b)this.parent[a]=b;\r\n        else if(a!=b) this.parent[b]=a;\r\n    }\r\n    same(a,b){\r\n        return this.find(a) ==  this.find(b)\r\n    }\r\n}\r\n\r\n\r\nglobal.UnionFind = UnionFind\r\n\r\nlet NodeCache= []\r\nfunction NewNode(k,x,y,v){\r\n    let t\r\n    if(NodeCache.length){\r\n        t = NodeCache.pop()\r\n    }else{\r\n        t = {}\r\n    }\r\n    t.k = k\r\n    t.x = x\r\n    t.y = y\r\n    t.v = v\r\n    return t\r\n}\r\n\r\n\r\nfunction ReclaimNode(node){\r\n    if(NodeCache.length<10000)\r\n        NodeCache.push(node)\r\n}\r\n\r\n\r\n// @ts-ignore\r\nconst binary = require('algo_wasm_priorityqueue');   // 读取二进制文件\r\nconst wasmModule = new WebAssembly.Module(binary);  // 初始化为wasm类\r\n\r\n/**\r\n * \r\n * @typedef {Object} node\r\n * @property {number} k 优先级实数（可负）\r\n * \r\n * @typedef {{\r\n *      memory:{\r\n *          buffer: ArrayBuffer\r\n *      },\r\n *      init(is_min:number):void,\r\n *      push(priorty:number, id:number):void,\r\n *      pop():void,\r\n *      top():number,\r\n *      get_identifier(pointer:number):number,\r\n *      size():number,\r\n *      clear():void,\r\n *      is_empty():boolean\r\n *  }} cppQueue\r\n */\r\n\r\nclass BaseQueue {\r\n    /**\r\n     * 队列元素个数\r\n     * @returns {number}\r\n     */\r\n    size() {\r\n        // @ts-ignore\r\n        return this.instance.size();\r\n    }\r\n    /**\r\n     * 清空整个队列\r\n     */\r\n    clear() {\r\n        // @ts-ignore\r\n        this.instance.clear();\r\n    }\r\n    /**\r\n     * 队列是否为空\r\n     * @returns {boolean} 实际返回值是0或1\r\n     */\r\n    isEmpty() {\r\n        // @ts-ignore\r\n        return !this.instance.is_empty();\r\n    }\r\n}\r\n\r\n/**\r\n *  c++优先队列\r\n *  最大容量 131072 个元素（2的17次方）\r\n *  每个元素是带有priority属性的任意对象\r\n *  连续pop 100k个元素时比js队列快 80% 以上，元素个数少时比js快 5~10 倍\r\n */\r\nclass PriorityQueue extends BaseQueue {\r\n    /**\r\n     * @param {boolean} isMinRoot 优先级方向，true则pop()时得到数字最小的，否则pop()出最大的\r\n     */\r\n    constructor(isMinRoot=false) {\r\n        super();\r\n        /**@type {cppQueue} */\r\n        let instance;\r\n        /**@type {node[]} */\r\n        let cache = [];\r\n\r\n        const imports = {   // 把wasm类实例化需要的接口函数\r\n            env: {\r\n                emscripten_notify_memory_growth() {\r\n                }\r\n            },\r\n            wasi_snapshot_preview1: {\r\n                proc_exit: () => { }\r\n            }\r\n        };\r\n        // @ts-ignore\r\n        instance = new WebAssembly.Instance(wasmModule, imports).exports;   // 实例化\r\n        instance.init(+!!isMinRoot);  // !!转化为boolean, +转为数字\r\n\r\n        /**\r\n         * @param {node} node \r\n         */\r\n        this.push = (node) => {\r\n            try {\r\n                instance.push(node.k, cache.length);\r\n                cache.push(node);\r\n            } catch (e) {\r\n                if (e instanceof TypeError) {\r\n                    throw e;\r\n                } else {\r\n                    throw Error(`priorityQueue is full.\\n\\t Current size is ${instance.size()}, buffer length is ${instance.memory.buffer.byteLength * 2 / 1024}KB.`);\r\n                }\r\n            }\r\n        }\r\n        /** \r\n         *  @returns {node|undefined}\r\n         */\r\n        this.pop = () => {\r\n            if (instance.size() > 0) {\r\n                let pointer = instance.top();\r\n                let id = instance.get_identifier(pointer);\r\n                let node = cache[id];\r\n                instance.pop();\r\n                // @ts-ignore\r\n                cache[id] = undefined;\r\n                return node;\r\n            } else {\r\n                return undefined;\r\n            }\r\n        }\r\n        /**\r\n         *  @returns {node|undefined}\r\n         */\r\n        this.top = () => {\r\n            if (instance.size() > 0) {\r\n                let pointer = instance.top();\r\n                return cache[instance.get_identifier(pointer)];\r\n            } else {\r\n                return undefined;\r\n            }\r\n        }\r\n        /**\r\n         *  @returns {undefined}\r\n         */\r\n        this.whileNoEmpty = (func) => {\r\n            while (!this.isEmpty()){\r\n                let node = this.pop();\r\n                func(node)\r\n                ReclaimNode(node)\r\n            }\r\n        }\r\n\r\n        Object.defineProperty(this, 'instance', {   // 不想被枚举到\r\n            value: instance\r\n        })\r\n    }\r\n    /**\r\n     *  把节点插入队列\r\n     * @param {node} node 待插入对象，至少含有priority:k属性\r\n     */\r\n    push(node) { }\r\n    /** \r\n     *  查看顶端节点，空队列返回undefined\r\n     *  @returns {node|undefined}\r\n     */\r\n    top() { return }\r\n    /**\r\n     *  取出顶端节点，空队列返回undefined\r\n     *  @returns {node|undefined}\r\n     */\r\n    pop() { return }\r\n}\r\n\r\nglobal.PriorityQueue = PriorityQueue\r\nglobal.NewNode = NewNode\r\nglobal.ReclaimNode = ReclaimNode\r\n// module.exports = {\r\n//     PriorityQueue: PriorityQueue\r\n// }\r\n\r\n\r\nlet RoomArray_proto= {\r\n    exec(x,y,val){\r\n        let tmp = this.arr[x*50+y]\r\n        this.set(x,y,val);\r\n        return tmp\r\n    },\r\n    get(x,y){\r\n        return this.arr[x*50+y];\r\n    },\r\n    set(x,y,value){\r\n        this.arr[x*50+y]=value;\r\n    },\r\n    init(){\r\n        if(!this.arr)\r\n            this.arr = new Array(50*50)\r\n        for(let i=0;i<2500;i++){\r\n            this.arr[i]=0;\r\n        }\r\n        return this;\r\n    },\r\n    forEach(func){\r\n        for(let y = 0; y < 50; y++) {\r\n            for(let x = 0; x < 50; x++) {\r\n                func(x,y,this.get(x,y))\r\n            }\r\n        }\r\n    },\r\n    for4Direction(func,x,y,range=1){\r\n        for(let e of [[1,0],[-1,0],[0,1],[0,-1]]){\r\n            let xt=x+e[0]\r\n            let yt=y+e[1]\r\n            if(xt>=0&&yt>=0&&xt<=49&&yt<=49)\r\n                func(xt,yt,this.get(xt,yt))\r\n        }\r\n    },\r\n    forNear(func,x,y,range=1){\r\n        for(let i=-range;i<=range;i++){\r\n            for(let j=-range;j<=range;j++){\r\n                let xt=x+i\r\n                let yt=y+j\r\n                if((i||j)&&xt>=0&&yt>=0&&xt<=49&&yt<=49)\r\n                    func(xt,yt,this.get(xt,yt))\r\n            }\r\n        }\r\n    },\r\n    forBorder(func,range=1){\r\n        for(let y = 0; y < 50; y++) {\r\n            func(0,y,this.get(0,y))\r\n            func(49,y,this.get(49,y))\r\n        }\r\n        for(let x = 1; x < 49; x++) {\r\n            func(x,0,this.get(x,0))\r\n            func(x,49,this.get(x,49))\r\n        }\r\n    },\r\n    initRoomTerrainWalkAble(roomName){\r\n        let terrain = new Room.Terrain(roomName);\r\n        this.forEach((x,y)=> this.set(x,y, terrain.get(x,y)==1?0:terrain.get(x,y)==0?1:2))\r\n    }\r\n}\r\nclass RoomArray {\r\n    constructor(){\r\n        this.__proto__ = RoomArray_proto\r\n    }\r\n}\r\n\r\n\r\nglobal.minPlaneCnt = 140 // 内部布局最小面积！ 试过了，140是 基本上最低配置了\r\n\r\nlet visited = new RoomArray()\r\nlet roomWalkable = new RoomArray()\r\nlet nearWall = new RoomArray()\r\nlet routeDistance = new RoomArray()\r\nlet roomObjectCache = new RoomArray()\r\n\r\nlet nearWallWithInterpolation= new RoomArray()\r\nlet interpolation = new RoomArray()\r\n\r\nlet queMin = new PriorityQueue(true)\r\nlet queMin2 = new PriorityQueue(true)\r\nlet startPoint = new PriorityQueue(true)\r\n\r\nlet unionFind = new UnionFind(50*50);\r\n\r\n/**\r\n * controller mineral source posList\r\n */\r\nlet objects = []\r\n\r\nlet pro={\r\n    /**\r\n     * https://www.bookstack.cn/read/node-in-debugging/2.2heapdump.md\r\n     * 防止内存泄漏！！！！\r\n     * 闭包太多，改不动了\r\n     */\r\n    init  (){\r\n        visited = new RoomArray()\r\n        roomWalkable = new RoomArray()\r\n        nearWall = new RoomArray()\r\n        routeDistance = new RoomArray()\r\n\r\n        nearWallWithInterpolation= new RoomArray()\r\n        interpolation = new RoomArray()\r\n        roomObjectCache = new RoomArray()\r\n\r\n        queMin = new PriorityQueue(true)\r\n        queMin2 = new PriorityQueue(true)\r\n        startPoint = new PriorityQueue(true)\r\n\r\n        unionFind = new UnionFind(50*50);\r\n\r\n\r\n        visited.init()\r\n        nearWall.init()\r\n        routeDistance.init()\r\n        roomWalkable.init()\r\n\r\n        nearWallWithInterpolation.init()\r\n        interpolation.init()\r\n        roomObjectCache.init()\r\n        unionFind.init()\r\n\r\n        queMin.clear()\r\n        queMin2.clear()\r\n        startPoint.clear()\r\n    },\r\n    /**\r\n     * 防止内存泄漏！！！！\r\n     */\r\n    dismiss (){\r\n        visited = null\r\n        roomWalkable = null\r\n        nearWall = null\r\n        routeDistance = null\r\n        roomObjectCache = null\r\n\r\n        nearWallWithInterpolation= null\r\n        interpolation = null\r\n\r\n        queMin = null\r\n        queMin2 = null\r\n        startPoint = null\r\n\r\n        unionFind = null\r\n        objects= []\r\n    },\r\n    /**\r\n     * 计算区块的最大性能指标 ，性能消耗的大头！\r\n     * 优化不动了\r\n     */\r\n    getBlockPutAbleCnt (roomWalkable,visited,queMin,unionFind,tarRoot,putAbleCacheMap,AllCacheMap){\r\n        if(putAbleCacheMap[tarRoot])return [putAbleCacheMap[tarRoot],AllCacheMap[tarRoot]]\r\n        // let t = Game.cpu.getUsed() //这很吃性能，但是是必须的\r\n        let roomManor = routeDistance\r\n        roomManor.init()\r\n        roomManor.forEach((x, y, val)=>{if(tarRoot==unionFind.find(x*50+y)){roomManor.set(x,y,1)}})\r\n        roomManor.forEach((x, y, val)=>{\r\n            if(val){\r\n                let manorCnt = 0\r\n                let wallCnt = 0\r\n                roomManor.for4Direction((x1,y1,val1)=>{\r\n                    if(val1)manorCnt+=1\r\n                    if(!roomWalkable.get(x1,y1))wallCnt+=1\r\n                },x,y)\r\n                if(manorCnt==1&&wallCnt == 0)roomManor.set(x,y,0)\r\n            }\r\n        })\r\n        let dfsMoreManor = function (x,y,val){\r\n            if(!val&&roomWalkable.get(x,y)){\r\n                let manorCnt = 0\r\n                let wallCnt = 0\r\n                roomManor.for4Direction((x1,y1,val1)=>{\r\n                    if(val1)manorCnt+=1\r\n                    if(!roomWalkable.get(x1,y1))wallCnt+=1\r\n                },x,y)\r\n                if(manorCnt>=2||manorCnt==1&&wallCnt>=2){\r\n                    roomManor.set(x,y,1)\r\n                    roomManor.for4Direction((x1,y1,val1)=>{\r\n                        dfsMoreManor(x1,y1,val1)\r\n                    },x,y)\r\n                }\r\n            }\r\n        }\r\n        roomManor.forEach((x, y, val)=>{dfsMoreManor(x,y,val)})\r\n        roomWalkable.forBorder((x,y,val)=>{\r\n            if(val){\r\n                roomManor.forNear((x,y,val)=>{\r\n                    roomManor.set(x,y,0)\r\n                },x,y)\r\n                roomManor.set(x,y,0)\r\n            }\r\n        })\r\n\r\n        let innerPutAbleList = []\r\n        let AllCacheList = []\r\n\r\n\r\n            // &&!roomObjectCache.get(x,y)\r\n        visited.init()/*\r\n        roomWalkable.forEach((x, y, val)=>{\r\n            if(!roomManor.get(x,y)||roomObjectCache.get(x,y)) {\r\n                // const visual = new RoomVisual(\"W3N6\");\r\n                // if(roomObjectCache.get(x,y))visual.text(val&&!roomObjectCache.get(x,y)?-4:-1, x,y+0.25, {color: 'red',opacity:0.99,font: 7})\r\n                // queMin.push(NewNode(val&&!roomObjectCache.get(x,y)?-4:-1,x,y));\r\n                let innerWall = false //在墙上的时候要退一格子\r\n                if(roomObjectCache.get(x,y)){\r\n                    roomManor.forNear((x,y,val)=>{if(!val&&roomWalkable.get(x,y))innerWall=true},x,y)\r\n                }\r\n                queMin.push(NewNode(val?((roomObjectCache.get(x,y)&&!innerWall)?-1:-4):-1,x,y));\r\n                // visited.set(x,y,1) 这里不能设置visited 因为 -4 和-1 优先级不同 如果 -4距离和-1比较，-1会抢走-4 导致 rangeAttack打得到\r\n            }\r\n        })*/\r\n\r\n        roomWalkable.forEach((x, y, val)=>{\r\n            if(!roomManor.get(x,y)) {\r\n                queMin.push(NewNode(val?-4:-1,x,y));\r\n                // visited.set(x,y,1) 这里不能设置visited 因为 -4 和-1 优先级不同 如果 -4距离和-1比较，-1会抢走-4 导致 rangeAttack打得到\r\n            }\r\n        })\r\n\r\n        // let t = Game.cpu.getUsed() //这很吃性能，真的优化不动了\r\n\r\n        queMin.whileNoEmpty(nd=>{\r\n            let func = function (x,y,val){\r\n                let item = NewNode(nd.k+2,x,y);\r\n                if(!visited.exec(x,y,1)){\r\n                    queMin.push(NewNode(nd.k+1,x,y))\r\n                    if(roomManor.get(x,y)){\r\n                        if(nd.k+1>=0&&val){\r\n                            innerPutAbleList.push(item)\r\n                            // visual.text(nd.k+2, x,y+0.25, {color: 'red',opacity:0.99,font: 7})\r\n                        }\r\n                        if(val)\r\n                            AllCacheList.push(item)\r\n                    }\r\n                }\r\n            }\r\n            visited.set(nd.x,nd.y,1)\r\n            if(nd.k>=-1)\r\n                roomWalkable.for4Direction(func,nd.x,nd.y)\r\n            else\r\n                roomWalkable.forNear(func,nd.x,nd.y)\r\n        })\r\n\r\n        // console.log(Game.cpu.getUsed()-t)\r\n\r\n        putAbleCacheMap[tarRoot] = innerPutAbleList\r\n        AllCacheMap[tarRoot] = AllCacheList\r\n        return [putAbleCacheMap[tarRoot],AllCacheMap[tarRoot]]\r\n    },\r\n    /**\r\n     * 插值，计算区块的预处理和合并需求\r\n     * @param roomName\r\n     */\r\n    computeBlock (roomName){\r\n        const visual = new RoomVisual(roomName);\r\n\r\n        roomWalkable.initRoomTerrainWalkAble(roomName)\r\n        roomWalkable.initRoomTerrainWalkAble(roomName)\r\n\r\n        //计算距离山体要多远\r\n        roomWalkable.forEach((x,y,val)=>{if(!val){queMin.push(NewNode(0,x,y));visited.set(x,y,1)}})\r\n        queMin.whileNoEmpty(nd=>{\r\n            roomWalkable.for4Direction((x,y,val)=>{\r\n                if(!visited.exec(x,y,1)&&val){\r\n                    queMin.push(NewNode(nd.k+1,x,y))\r\n                }\r\n            },nd.x,nd.y)\r\n            nearWall.exec(nd.x,nd.y,nd.k)\r\n        })\r\n\r\n        //距离出口一格不能放墙\r\n        roomWalkable.forBorder((x,y,val)=>{\r\n            if(val){\r\n                roomWalkable.forNear((x,y,val)=>{\r\n                    if(val){\r\n                        // roomWalkable.set(x,y,0);\r\n                        nearWall.set(x,y,50);\r\n                        queMin.push(NewNode(0,x,y));\r\n                        // visited.set(x,y,1)\r\n                    }\r\n                },x,y)\r\n                // roomWalkable.set(x,y,0);\r\n                queMin.push(NewNode(0,x,y));\r\n                nearWall.set(x,y,50)\r\n                // visited.set(x,y,1)\r\n            }\r\n        })\r\n\r\n        let roomPutAble = routeDistance\r\n        roomPutAble.initRoomTerrainWalkAble(roomName)\r\n        roomWalkable.forBorder((x,y,val)=>{\r\n            if(val){\r\n                roomWalkable.forNear((x,y,val)=>{\r\n                    if(val){\r\n                        roomPutAble.set(x,y,0)\r\n                    }\r\n                },x,y)\r\n                roomPutAble.set(x,y,0)\r\n            }\r\n        })\r\n        // 计算 控制器，矿物的位置\r\n        let getObjectPos =function(x,y,struct){\r\n            let put = false\r\n            let finalX = 0\r\n            let finalY = 0\r\n            roomPutAble.for4Direction((x,y,val)=>{\r\n                if(val&&!put&&!roomObjectCache.get(x,y)){\r\n                    finalX = x\r\n                    finalY = y\r\n                    put = true\r\n                }\r\n            },x,y)\r\n            roomPutAble.forNear((x,y,val)=>{\r\n                if(val&&!put&&!roomObjectCache.get(x,y)){\r\n                    finalX = x\r\n                    finalY = y\r\n                    put = true\r\n                }\r\n            },x,y)\r\n            roomObjectCache.set(finalX,finalY,struct)\r\n            return [finalX,finalY]\r\n        }\r\n        for(let i=0;i<objects.length;i++){\r\n            let pos = objects[i]\r\n            //container 位置\r\n            let p = getObjectPos(pos.x,pos.y,\"container\")\r\n\r\n            // link 位置\r\n            if(i!=1){\r\n                let linkPos = getObjectPos(p[0],p[1],\"link\")\r\n                roomObjectCache.link = roomObjectCache.link || []\r\n                roomObjectCache.link.push(linkPos) // link controller 然后是  source\r\n            }else{\r\n                roomObjectCache.extractor = [[pos.x,pos.y]]\r\n            }\r\n            roomObjectCache.container = roomObjectCache.container || []\r\n            if(i!=1)roomObjectCache.container.unshift(p) //如果是 mineral 最后一个\r\n            else roomObjectCache.container.push(p)\r\n        }\r\n\r\n        //插值，这里用拉普拉斯矩阵，对nearWall 插值 成 nearWallWithInterpolation\r\n        nearWall.forEach((x,y,val)=>{\r\n            let value = -4*val\r\n            nearWall.for4Direction((x,y,val)=>{\r\n                value += val\r\n            },x,y)\r\n            interpolation.set(x,y,value)\r\n            if(value>0)value=0;\r\n            if(val&&roomWalkable.get(x,y))nearWallWithInterpolation.set(x,y,val+value*0.1)\r\n        })\r\n\r\n\r\n        // 计算距离出口多远\r\n        visited.init()\r\n        routeDistance.init()\r\n        queMin.whileNoEmpty(nd=>{\r\n            roomWalkable.forNear((x,y,val)=>{\r\n                if(!visited.exec(x,y,1)&&val){\r\n                    queMin.push(NewNode(nd.k+1,x,y))\r\n                }\r\n            },nd.x,nd.y)\r\n            routeDistance.set(nd.x,nd.y,nd.k)\r\n        })\r\n\r\n        // 对距离的格子插入到队列 ，作为分开的顺序\r\n        routeDistance.forEach((x,y,val)=>{\r\n            if(!roomWalkable.get(x,y))return\r\n            if(val)startPoint.push(NewNode(-val,x,y))\r\n        })\r\n\r\n\r\n        let sizeMap = {}\r\n        let posSeqMap = {}\r\n\r\n        // 分块，将地图分成一小块一小块\r\n        visited.init()\r\n        for(let i=0;i<100000;i++){\r\n            if(startPoint.isEmpty())break;\r\n            let cnt = 0\r\n            // let color = randomColor(i)\r\n            let nd = startPoint.pop()\r\n            let currentPos = nd.x*50+nd.y\r\n            let posSeq = []\r\n\r\n            //搜索分块\r\n            let dfsFindDown = function (roomArray,x,y){\r\n                let currentValue = roomArray.get(x,y)\r\n                if(!visited.exec(x,y,1)){\r\n                    roomArray.for4Direction((x1,y1,val)=>{\r\n                        if(val&&(x1==x||y1==y) &&val<currentValue){\r\n                            dfsFindDown(roomArray,x1,y1)\r\n                        }\r\n                    },x,y)\r\n                    cnt++\r\n                    // visual.circle(x,y, {fill: color, radius: 0.5 ,opacity : 0.5})\r\n                    let pos = x*50+y\r\n                    posSeq.push(pos)\r\n                    unionFind.union(currentPos,pos)\r\n                }\r\n            }\r\n\r\n            // 跑到最高点\r\n            let dfsFindUp = function (roomArray,x,y){\r\n                let currentValue = roomArray.get(x,y)\r\n                if(!visited.exec(x,y,1)){\r\n                    roomArray.forNear((x1,y1,val)=>{\r\n                        if(val>currentValue&&currentValue<6){ //加了一点优化，小于时分裂更过\r\n                            dfsFindUp(roomArray,x1,y1)\r\n                        }\r\n                        else if(val&&val<currentValue){\r\n                            dfsFindDown(roomArray,x1,y1)\r\n                        }\r\n                    },x,y)\r\n                    cnt++\r\n                    // visual.circle(x,y, {fill: color, radius: 0.5 ,opacity : 0.5})\r\n                    let pos = x*50+y\r\n                    posSeq.push(pos)\r\n                    unionFind.union(currentPos,pos)\r\n                }\r\n            }\r\n            dfsFindUp(nearWallWithInterpolation,nd.x,nd.y)\r\n\r\n            //记录每一块的位置和大小 以 并查集的根节点 作为记录点\r\n            if(cnt>0){\r\n                let pos = unionFind.find(currentPos);\r\n                // queMin.push({k:cnt,v:pos})\r\n                queMin.push(NewNode(cnt,0,0,pos))\r\n                sizeMap[pos] = cnt\r\n                posSeqMap[pos] = posSeq\r\n            }\r\n        }\r\n\r\n        // 将出口附近的块删掉\r\n        roomWalkable.forBorder((x,y,val)=>{\r\n            if(val){\r\n                roomWalkable.forNear((x,y,val)=>{\r\n                    if(val){\r\n                        let pos = unionFind.find(x*50+y);\r\n                        if(sizeMap[pos]) delete sizeMap[pos]\r\n                    }\r\n                },x,y)\r\n                let pos = unionFind.find(x*50+y);\r\n                if(sizeMap[pos]) delete sizeMap[pos]\r\n            }\r\n        })\r\n\r\n        let putAbleCacheMap = {}\r\n        let allCacheMap = {}\r\n        // let i = 0\r\n        // 合并小块成大块的\r\n        queMin.whileNoEmpty(nd=>{\r\n            let pos = nd.v;\r\n            if(nd.k != sizeMap[pos])return;// 已经被合并了\r\n            // i++;\r\n\r\n            visited.init()\r\n            let nearCntMap={}\r\n            let allNearCnt = 0\r\n\r\n            //搜索附近的块\r\n            posSeqMap[pos].forEach(e=>{\r\n                let y = e%50;\r\n                let x = ((e-y)/50);//Math.round\r\n                roomWalkable.forNear((x,y,val)=>{\r\n                    if(val&&!visited.exec(x,y,1)){\r\n                        let currentPos = unionFind.find(x*50+y);\r\n                        if(currentPos == pos)return;\r\n                        allNearCnt+=1\r\n                        // if(i==104)\r\n                        // visual.text(parseInt(1*10)/10, x,y+0.25, {color: \"cyan\",opacity:0.99,font: 7})\r\n                        let currentSize = sizeMap[currentPos];\r\n                        if(currentSize<300){\r\n                            nearCntMap[currentPos]=(nearCntMap[currentPos]||0)+1;\r\n                        }\r\n                    }\r\n                },x,y)\r\n            })\r\n\r\n            let targetPos = undefined;\r\n            let nearCnt = 0;\r\n            let maxRatio = 0;\r\n\r\n            // 找出合并附近最优的块\r\n            _.keys(nearCntMap).forEach(currentPos=>{\r\n                let currentRatio = nearCntMap[currentPos]/Math.sqrt(Math.min(sizeMap[currentPos],nd.k))//实际/期望\r\n                if( currentRatio == maxRatio ? sizeMap[currentPos]<sizeMap[targetPos]:currentRatio > maxRatio){\r\n                    targetPos = currentPos;\r\n                    maxRatio = currentRatio;\r\n                    nearCnt = nearCntMap[currentPos];\r\n                }\r\n            })\r\n            _.keys(nearCntMap).forEach(currentPos=>{\r\n                if(nearCnt < nearCntMap[currentPos]){\r\n                    targetPos = currentPos;\r\n                    nearCnt = nearCntMap[currentPos];\r\n                }\r\n            })\r\n            let minSize = sizeMap[targetPos];\r\n            let cnt = nd.k+minSize;\r\n            // let nearRatio =nearCntMap[targetPos]/allNearCnt;\r\n\r\n            let targetBlockPutAbleCnt = 0\r\n            let ndkBlockPutAbleCnt = 0\r\n            if(minSize>minPlaneCnt)\r\n                targetBlockPutAbleCnt = pro.getBlockPutAbleCnt(roomWalkable,visited,queMin2,unionFind,targetPos,putAbleCacheMap,allCacheMap)[0].length\r\n            if(nd.k>minPlaneCnt)\r\n                ndkBlockPutAbleCnt = pro.getBlockPutAbleCnt(roomWalkable, visited, queMin2, unionFind, nd.v,putAbleCacheMap,allCacheMap)[0].length\r\n\r\n            // if(targetBlockPutAbleCnt||ndkBlockPutAbleCnt)clog(targetBlockPutAbleCnt,ndkBlockPutAbleCnt)\r\n            // 打印中间变量\r\n            // if(targetPos&&cnt>50&&(targetBlockPutAbleCnt||ndkBlockPutAbleCnt)){\r\n            //     let y = pos%50\r\n            //     let x = Math.round((pos-y)/50)\r\n            //     let y1 = targetPos%50\r\n            //     let x1 = Math.round((targetPos-y1)/50)\r\n            //     visual.line(x,y,x1,y1)\r\n            //     // visual.text(nd.k+\"+\"+minSize+\"=\"+cnt, (x+x1)/2,(y+y1)/2-0.25, {color: \"red\",opacity:0.99,font: 7})\r\n            //     // visual.text(allNearCnt+\"_\"+nearCntMap[targetPos]+\" \"+nearCnt+\" \"+parseInt(nearCnt/Math.sqrt(Math.min(minSize,nd.k))*100)/100+\" \"+parseInt(maxRatio-Math.sqrt(nd.k)/12*100)/100, (x+x1)/2,(y+y1)/2+0.25, {color: \"yellow\",opacity:0.99,font: 7})\r\n            //     visual.text(parseInt(targetBlockPutAbleCnt*100)/100+\" \"+parseInt(ndkBlockPutAbleCnt*100)/100, (x+x1)/2,(y+y1)/2+0.25, {color: \"yellow\",opacity:0.99,font: 7})\r\n            // }\r\n\r\n            // if(targetPos&&((cnt<=250&&maxRatio>0.7)||(cnt<=300&&maxRatio>0.8)||(cnt<=350&&maxRatio>0.9)||(maxRatio>1&&cnt<400)||nd.k<=10)){//||maxRatio>1.5\r\n            // if(targetPos&&(maxRatio-cnt/500>0.2&&cnt<400)){//||maxRatio>1.5\r\n\r\n            // cnt = targetBlockPutAbleCnt+ndkBlockPutAbleCnt;\r\n            // 合并\r\n            if(targetPos&&Math.max(targetBlockPutAbleCnt,ndkBlockPutAbleCnt)<minPlaneCnt){//&&(maxRatio-Math.sqrt(cnt)/20>=0||(nearRatio>0.7&&nd.k<100))\r\n            // if(targetPos&&(cnt<300||Math.min(nd.k,minSize)<150)&&(maxRatio-Math.sqrt(cnt)/20>=0||Math.max(nd.k,minSize)<200||(nearRatio>0.7&&nd.k<100))){//*Math.sqrt(nearRatio)\r\n\r\n\r\n                unionFind.union(pos,targetPos);\r\n                nd.v = unionFind.find(pos);\r\n\r\n                if(pos != nd.v) delete sizeMap[pos];\r\n                else delete sizeMap[targetPos];\r\n\r\n                nd.k = cnt;\r\n                sizeMap[nd.v] = cnt;\r\n                posSeqMap[nd.v] = posSeqMap[targetPos].concat(posSeqMap[pos])\r\n                delete putAbleCacheMap[nd.v]\r\n                delete putAbleCacheMap[targetPos]\r\n                if(pos != nd.v) delete posSeqMap[pos];\r\n                else delete posSeqMap[targetPos];\r\n                queMin.push(NewNode(nd.k,nd.x,nd.y,nd.v));\r\n            }\r\n\r\n        })\r\n        // 打印结果\r\n\r\n        // const visual = new RoomVisual(roomName);\r\n        // _.keys(sizeMap).forEach(e=>{\r\n        //     let y = e%50\r\n        //     let x = ((e-y)/50)//Math.round\r\n        //     let color = \"red\"\r\n        //     let cnt = pro.getBlockPutAbleCnt(roomWalkable,visited,queMin2,unionFind,e,putAbleCacheMap).length\r\n        //     pro.getBlockPutAbleCnt(roomWalkable,visited,queMin2,unionFind,e,putAbleCacheMap).forEach(t=>{\r\n        //         visual.circle(t.x, t.y, {fill: randomColor(e), radius: 0.5 ,opacity : 0.35})\r\n        //     })\r\n        //     // let cnt = sizeMap[e]\r\n        //     if(sizeMap[e]>0)visual.text(parseInt(cnt*10)/10, x,y+0.25, {color: color,opacity:0.99,font: 7})\r\n        // })\r\n\r\n        // roomWalkable.forEach((x, y, val)=>{if(val>0&&sizeMap[unionFind.find(x*50+y)]>0)visual.circle(x, y, {fill: randomColor(unionFind.find(x*50+y)), radius: 0.5 ,opacity : 0.15})})\r\n\r\n\r\n        // 打印中间变量\r\n        // nearWallWithInterpolation.forEach((x, y, val)=>{if(val>0)visual.circle(x, y, {fill: \"#ff9797\", radius: 0.5 ,opacity : 0.05*val+0.01})})\r\n        // nearWall.forEach((x, y, val)=>{if(val)visual.text(parseInt(val*10)/10, x,y+0.25, {color: \"red\",opacity:0.5,font: 7})})\r\n\r\n        return [unionFind,sizeMap,roomWalkable,nearWall,putAbleCacheMap,allCacheMap]\r\n\r\n    },\r\n    /**\r\n     * 计算 分布图\r\n     * 计算建筑的位置\r\n     * @param roomName,\r\n     * @param points [flagController,flagMineral,flagSourceA,flagSourceB]\r\n     * @return result { roomName:roomName,storagePos:{x,y},labPos:{x,y},structMap:{ \"rampart\" : [[x1,y1],[x2,y2] ...] ...} }\r\n     */\r\n    computeManor (roomName,points){\r\n        pro.init()\r\n        for(let p of points){\r\n            if(p.pos&&p.pos.roomName==roomName)objects.push(p.pos)\r\n        }\r\n        // const visual = new RoomVisual(roomName);\r\n        let blockArray = pro.computeBlock(roomName)\r\n        let unionFind = blockArray[0]\r\n        let sizeMap = blockArray[1]\r\n        let wallMap = {}\r\n        let roomWalkable = blockArray[2]\r\n        let nearWall = blockArray[3]\r\n        let putAbleCacheMap = blockArray[4]\r\n        let allCacheMap = blockArray[5]\r\n\r\n        let roomManor = interpolation\r\n        let roomStructs = nearWallWithInterpolation\r\n\r\n\r\n        roomManor.init()\r\n        roomStructs.init()\r\n\r\n        // let closeToWall = new RoomArray()\r\n        nearWall.init()\r\n\r\n        // let queMin = new PriorityQueue(true)\r\n        queMin.clear()\r\n        // let visited = new RoomArray()\r\n\r\n        let finalPos = undefined;\r\n        let wallCnt = 1e9;\r\n        let putAbleList = []\r\n        let innerPutAbleList = []\r\n\r\n        let centerX = undefined;\r\n        let centerY = undefined;\r\n        _.keys(sizeMap).forEach(pos=>{\r\n            // if(sizeMap[pos]<150)return\r\n            pro.getBlockPutAbleCnt(roomWalkable, visited, queMin, unionFind, pos,putAbleCacheMap,allCacheMap)\r\n            let currentPutAbleList = putAbleCacheMap[pos]\r\n            let allList = allCacheMap[pos]\r\n            if(currentPutAbleList.length<minPlaneCnt)return\r\n\r\n            wallMap[pos] = []\r\n\r\n            visited.init()\r\n            roomWalkable.forBorder((x,y,val)=>{if(val){queMin.push(NewNode(0,x,y));visited.set(x,y,1)}})\r\n\r\n            let roomManor = routeDistance //当前的Manor\r\n            roomManor.init()\r\n            allList.forEach(e=>{\r\n                roomManor.set(e.x,e.y,1)\r\n            })\r\n            // currentPutAbleList.forEach(e=>visual.text(e.k, e.x,e.y+0.25, {color: 'red',opacity:0.99,font: 7}))\r\n\r\n            queMin.whileNoEmpty(nd=>{\r\n                if(!roomManor.get(nd.x,nd.y))\r\n                roomWalkable.forNear((x,y,val)=>{\r\n                    if(!visited.exec(x,y,1)&&val){\r\n                        if(!roomManor.get(x,y))\r\n                            queMin.push(NewNode(nd.k+1,x,y))\r\n                        else{\r\n                            wallMap[pos].push(NewNode(0,x,y))\r\n                            // visual.text('X', x,y+0.25, {color: 'red',opacity:0.99,font: 7})\r\n                        }\r\n                    }\r\n                },nd.x,nd.y)\r\n            })\r\n\r\n            // wallMap[pos].forEach(xy=>queMin.push(NewNode(0,xy.x,xy.y)))\r\n\r\n            let currentInnerPutAbleList = currentPutAbleList\r\n\r\n            let maxDist = 0;\r\n            let filter2 = currentInnerPutAbleList.filter(e=>e.k>2);\r\n            if (filter2.length < 30) {\r\n                filter2.forEach(a=>{\r\n                    filter2.forEach(b=>{\r\n                        maxDist = Math.max(maxDist,Math.abs(a.x-b.x)+Math.abs(a.y-b.y))\r\n                    })\r\n                })\r\n            }\r\n\r\n            let currentWallCnt = wallMap[pos].length;\r\n            // {\r\n            //     let y = pos%50\r\n            //     let x = ((pos-y)/50)//Math.round\r\n            //     visual.text(parseInt((allList.length)*10)/10, x,y, {color: \"yellow\",opacity:0.99,font: 7})\r\n            //     visual.text(parseInt((currentPutAbleList.length)*10)/10, x,y+0.5, {color: \"red\",opacity:0.99,font: 7})\r\n            //     visual.text(parseInt((currentInnerPutAbleList.length)*10)/10, x,y+1, {color: \"red\",opacity:0.99,font: 7})\r\n            // }\r\n            if(minPlaneCnt<currentPutAbleList.length&&wallCnt>currentWallCnt&&(currentInnerPutAbleList.filter(e=>e.k>1).length>30||maxDist>5)){\r\n                putAbleList = currentPutAbleList\r\n                innerPutAbleList = currentInnerPutAbleList\r\n                wallCnt = currentWallCnt\r\n                finalPos = pos\r\n                centerX = currentPutAbleList.map(e=>e.x).reduce((a,b)=>a+b)/currentPutAbleList.length;\r\n                centerY = currentPutAbleList.map(e=>e.y).reduce((a,b)=>a+b)/currentPutAbleList.length;\r\n            }\r\n\r\n            // allCacheMap[pos].forEach(t=>{\r\n            //     visual.circle(t.x, t.y, {fill: randomColor(pos), radius: 0.5 ,opacity : 0.15})\r\n            // })\r\n        })\r\n\r\n        if(!putAbleCacheMap[finalPos])\r\n            return\r\n\r\n        let walls = wallMap[finalPos]\r\n\r\n\r\n        roomManor.init()\r\n        allCacheMap[finalPos].forEach(e=>{\r\n            roomManor.set(e.x,e.y,-1)\r\n        })\r\n        innerPutAbleList.forEach(e=>{\r\n            roomManor.set(e.x,e.y,e.k)\r\n        })\r\n\r\n        // visited.init()\r\n        // roomWalkable.forEach((x, y, val)=>{if(!roomManor.get(x,y)){queMin.push(NewNode(val?-3:-1,x,y));visited.set(x,y,1)}})\r\n\r\n\r\n\r\n        let storageX = 0\r\n        let storageY = 0\r\n        let storageDistance = 100\r\n\r\n        // innerPutAbleList.forEach(e=>visual.text(e.k, e.x,e.y+0.25, {color: 'red',opacity:0.99,font: 7}))\r\n        innerPutAbleList.filter(e=>e.k>2).forEach(e=>{\r\n            let x =e.x\r\n            let y =e.y\r\n            let detX= centerX-x\r\n            let detY= centerY-y\r\n            let distance = Math.sqrt(detX*detX+detY*detY)\r\n            if(storageDistance>distance){\r\n                storageDistance = distance\r\n                storageX = x\r\n                storageY = y\r\n            }\r\n        })\r\n\r\n\r\n        if(Game.flags.storagePos){\r\n            storageX = Game.flags.storagePos.pos.x;\r\n            storageY = Game.flags.storagePos.pos.y;\r\n        }\r\n\r\n        let labX = 0\r\n        let labY = 0\r\n        let labDistance = 1e5\r\n        innerPutAbleList.filter(e=>e.k>4).forEach(e=>{\r\n            let x =e.x\r\n            let y =e.y\r\n            let detX= centerX-x\r\n            let detY= centerY-y\r\n            let distance = Math.sqrt(detX*detX+detY*detY)\r\n\r\n            if(labDistance>distance&&Math.abs(x-storageX)+Math.abs(y-storageY)>5){\r\n                labDistance = distance\r\n                labX = x\r\n                labY = y\r\n            }\r\n        })\r\n\r\n        roomManor.forEach((x,y,val)=>{\r\n            if(val>=2){\r\n                // if(roomManor.get(x,y)>0&&Math.abs(x-storageX)+Math.abs(y-storageY)>2)\r\n                    // visual.text(val, x,y+0.25, {color: 'cyan',opacity:0.99,font: 7})\r\n                let distance = Math.sqrt(Math.pow(centerX-x-0.5,2)+Math.pow(centerY-y-0.5,2))\r\n                if(labDistance<=distance) return;\r\n                let checkCnt = 0;\r\n                let check=function (x,y){\r\n                    if(roomManor.get(x,y)>0&&Math.abs(x-storageX)+Math.abs(y-storageY)>2){\r\n                        checkCnt+=1;\r\n                    }\r\n                }\r\n                for(let i=-1;i<3;i++)\r\n                    for(let j=-1;j<3;j++)\r\n                        check(x+i,y+j);\r\n                if(checkCnt==16){\r\n                    labDistance = distance\r\n                    labX = x\r\n                    labY = y\r\n                }\r\n            }\r\n        })\r\n\r\n\r\n        // visual.text(\"C\", centerX,centerY+0.25, {color: 'green',opacity:0.99,font: 7})\r\n        // visual.text(\"S\", storageX,storageY+0.25, {color: 'blue',opacity:0.99,font: 7})\r\n        // visual.text(\"L\", labX+0.5,labY+0.75, {color: 'blue',opacity:0.99,font: 7})\r\n        // clog(roomName)\r\n\r\n        // clog(roomName,storageX,storageY,labX,labY,innerPutAbleList.length,wallCnt,finalPos)\r\n        // clog(innerPutAbleList.filter(e=>e.k==1).length)\r\n\r\n        // _.keys(sizeMap).forEach(e=>{\r\n        //     let y = e%50\r\n        //     let x = ((e-y)/50)//Math.round\r\n        //     let color = \"red\"\r\n        //     if(sizeMap[e]>0)visual.text(parseInt(sizeMap[e]*10)/10, x,y+1+0.25, {color: color,opacity:0.99,font: 7})\r\n        // })\r\n\r\n        // CONTROLLER_STRUCTURES: {\r\n        //     \"spawn\": {0: 0, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 3},\r\n        //     \"extension\": {0: 0, 1: 0, 2: 5, 3: 10, 4: 20, 5: 30, 6: 40, 7: 50, 8: 60},\r\n        //     \"link\": {1: 0, 2: 0, 3: 0, 4: 0, 5: 2, 6: 3, 7: 4, 8: 6},\r\n        //     \"road\": {0: 2500, 1: 2500, 2: 2500, 3: 2500, 4: 2500, 5: 2500, 6: 2500, 7: 2500, 8: 2500},\r\n        //     \"constructedWall\": {1: 0, 2: 2500, 3: 2500, 4: 2500, 5: 2500, 6: 2500, 7: 2500, 8: 2500},\r\n        //     \"rampart\": {1: 0, 2: 2500, 3: 2500, 4: 2500, 5: 2500, 6: 2500, 7: 2500, 8: 2500},\r\n        //     \"storage\": {1: 0, 2: 0, 3: 0, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1},\r\n        //     \"tower\": {1: 0, 2: 0, 3: 1, 4: 1, 5: 2, 6: 2, 7: 3, 8: 6},\r\n        //     \"observer\": {1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 1},\r\n        //     \"powerSpawn\": {1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 1},\r\n        //     \"extractor\": {1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 1, 7: 1, 8: 1},\r\n        //     \"terminal\": {1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 1, 7: 1, 8: 1},\r\n        //     \"lab\": {1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 3, 7: 6, 8: 10},\r\n        //     \"container\": {0: 5, 1: 5, 2: 5, 3: 5, 4: 5, 5: 5, 6: 5, 7: 5, 8: 5},\r\n        //     \"nuker\": {1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 1},\r\n        //     \"factory\": {1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 1, 8: 1}\r\n        // }\r\n\r\n        // nearWall.forEach((x, y, val)=>{if(val>2&&finalPos==unionFind.find(x*50+y))visual.text(nearWall.get(x,y),x, y+0.5, {color: \"red\",opacity:0.99,font: 7})})\r\n\r\n        /**\r\n         * 这里开始计算布局！\r\n         * @type {{}}\r\n         */\r\n        let structMap = {}\r\n        _.keys(CONTROLLER_STRUCTURES).forEach(e=>structMap[e] = [])\r\n\r\n        // 资源点布局\r\n        structMap[\"link\"] = roomObjectCache.link\r\n        structMap[\"container\"] = roomObjectCache.container\r\n        structMap[\"extractor\"] = roomObjectCache.extractor\r\n        //中心布局\r\n        structMap[\"storage\"] .push([storageX-1,storageY])\r\n        structMap[\"terminal\"] .push([storageX,storageY+1])\r\n        structMap[\"factory\"] .push([storageX+1,storageY])\r\n        structMap[\"link\"] .push([storageX,storageY-1])\r\n        for(let i=-1;i<=1;i++){\r\n            for(let j=-1;j<=1;j++) {\r\n                structMap[\"road\"].push([storageX+i+j,storageY+i-j]) //仿射变换 [sin,cos,cos,-sin]\r\n            }\r\n        }\r\n        // 这里修改lab布局\r\n        let labs = [\r\n            \"☢☢-☢\",\r\n            \"☢-☢-\",\r\n            \"-☢-☢\",\r\n            \"☢-☢☢\"\r\n            // \"☢☢☢☢☢\",\r\n            // \"-----\",\r\n            // \"☢☢☢☢☢\"\r\n        ]\r\n        let labChangeDirection = false;\r\n        if ((storageX - labX) * (storageY - labY) < 0) {\r\n            labChangeDirection = true\r\n        }\r\n\r\n        let vis = {}\r\n        for(let i=0;i<2;i++){\r\n            for(let j=0;j<2;j++){\r\n                vis[i+\"_\"+j] = 1 // 优先放置中间的label\r\n                let jj = labChangeDirection?j:1-j;\r\n                let structs = labs[i+1].charAt(j+1)\r\n                if(structs == '☢')\r\n                    structMap[\"lab\"].push([labX+i,labY+jj])\r\n                else\r\n                    structMap[\"road\"].push([labX+i,labY+jj])\r\n            }\r\n        }\r\n\r\n        for(let i=-1;i<3;i++){\r\n            for(let j=-1;j<3;j++){\r\n                if(vis[i+\"_\"+j])continue;\r\n                let jj = labChangeDirection?j:1-j;\r\n                let structs = labs[i+1].charAt(j+1)\r\n                if(structs == '☢')\r\n                    structMap[\"lab\"].push([labX+i,labY+jj])\r\n                else\r\n                    structMap[\"road\"].push([labX+i,labY+jj])\r\n            }\r\n        }\r\n\r\n        walls.forEach(e=>structMap[\"rampart\"].push([e.x,e.y]))\r\n\r\n        _.keys(CONTROLLER_STRUCTURES).forEach(struct=>structMap[struct].forEach(e=>roomStructs.set(e[0],e[1],struct)))\r\n\r\n        structMap[\"road\"].forEach(e=>roomStructs.set(e[0],e[1],1))\r\n        //设置权值，bfs联通路径！\r\n        let setModel = function (xx,yy){\r\n            let checkAble = (x,y)=> (x>=0&&y>=0&&x<=49&&y<=49)&&roomManor.get(x,y)>0&&!roomStructs.get(x,y)\r\n            for(let i=-1;i<=1;i++){\r\n                for(let j=-1;j<=1;j++) {\r\n                    let x = xx+i+j\r\n                    let y = yy+i-j\r\n                    if(checkAble(x,y)){\r\n                        if(i||j){\r\n                            // structMap[\"road\"] .push([x,y]) //仿射变换 [sin,cos,cos,-sin]\r\n                            roomStructs.set(x,y,1)\r\n                        }else{\r\n                            // structMap[\"spawn\"] .push([x,y])\r\n                            roomStructs.set(x,y,12)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            for(let e of [[1,0],[-1,0],[0,1],[0,-1]]){\r\n                let x=xx+e[0]\r\n                let y=yy+e[1]\r\n                if(checkAble(x,y)){\r\n                    // structMap[\"extension\"] .push([x,y])\r\n                    roomStructs.set(x,y,8)\r\n                }\r\n            }\r\n        }\r\n\r\n        for(let i=0;i<50;i+=4){\r\n            for(let j=0;j<50;j+=4) {\r\n                let x =storageX%4+i\r\n                let y =storageY%4+j\r\n                setModel(x,y)\r\n                setModel(x+2,y+2)\r\n\r\n            }\r\n        }\r\n        visited.init()\r\n        visited.set(storageX,storageY,1)\r\n\r\n        queMin.push(NewNode(1,storageX,storageY))\r\n        let costRoad = routeDistance //重复使用\r\n        costRoad.init()\r\n        queMin.whileNoEmpty(nd=>{\r\n            roomStructs.forNear((x,y,val)=>{\r\n                if(!visited.exec(x,y,1)&&val>0){\r\n                    queMin.push(NewNode(nd.k+val,x,y))\r\n                }\r\n            },nd.x,nd.y)\r\n            costRoad.set(nd.x,nd.y,nd.k)\r\n            // visual.text(nd.k,nd.x,nd.y+0.25, {color: \"pink\",opacity:0.99,font: 7})\r\n        })\r\n\r\n        structMap[\"road\"].forEach(e=>roomStructs.set(e[0],e[1],\"road\")) //这里把之前的road覆盖上去防止放在之前里road上了\r\n\r\n        costRoad.forEach((x,y,val)=>{\r\n            if(!val)return;\r\n            let minVal =50;\r\n            // let finalX = 0;\r\n            // let finalY = 0;\r\n            costRoad.forNear((x1,y1,val)=>{\r\n                if(minVal>val&&val>0){\r\n                    minVal = val\r\n                    // finalX = x1\r\n                    // finalY = y1\r\n                }\r\n            },x,y)\r\n            // 方案2 没那么密集\r\n            costRoad.forNear((x1,y1,val)=>{\r\n                if(minVal==val&&val>0){\r\n                    // structMap[\"road\"].push([x1,y1])\r\n                    roomStructs.set(x1,y1,\"road\")\r\n                }\r\n            },x,y)\r\n            // 方案1 密集\r\n            // structMap[\"road\"].push([finalX,finalY])\r\n            // roomStructs.set(finalX,finalY,\"road\")\r\n        })\r\n\r\n        let spawnPos = []\r\n        let extensionPos = []\r\n        roomStructs.forEach((x,y,val)=>{\r\n            if (val > 0) {\r\n                let dist = 100;\r\n                costRoad.forNear((x,y,val)=>{\r\n                    if(val)dist = Math.min(dist,val)\r\n                },x,y)\r\n                // let dist = Math.sqrt(Math.pow(x-storageX,2)+Math.pow(y-storageY,2))\r\n                if(val==12){// 8 && 12 上面有写，注意！！！\r\n                    spawnPos.push([x,y,dist])\r\n                }\r\n                else{\r\n                    extensionPos.push([x,y,dist])\r\n                    // visual.text(dist,x, y+0.25, {color: \"pink\",opacity:0.99,font: 7})\r\n                }\r\n            }\r\n        })\r\n        let cmpFunc=(a,b)=>a[2]==b[2]?(a[1]==b[1]?a[0]-b[0]:a[1]-b[1]):a[2]-b[2];\r\n        spawnPos = spawnPos.sort(cmpFunc);\r\n        extensionPos = extensionPos.sort(cmpFunc);\r\n        let oriStruct = [];\r\n        let putList=[];\r\n        [\"spawn\",\"powerSpawn\",\"nuker\",\"tower\", \"observer\"].forEach(struct=>{\r\n            for(let i=0;i<CONTROLLER_STRUCTURES[struct][8];i++){\r\n                oriStruct.push(struct)\r\n            }\r\n        })\r\n        oriStruct.forEach(struct=>{\r\n            let e = spawnPos.shift()\r\n            if(!e) e = extensionPos.shift()\r\n            structMap[struct].push([e[0],e[1]])\r\n            putList.push([e[0],e[1],struct])\r\n        })\r\n        extensionPos.push(...spawnPos)\r\n        extensionPos = extensionPos.sort(cmpFunc);\r\n        let extCnt= 60\r\n        extensionPos.forEach(e=>{\r\n            if(extCnt>0){\r\n                structMap[\"extension\"].push([e[0],e[1]]);\r\n                putList.push([e[0],e[1],\"extension\"])\r\n                extCnt-=1;\r\n            }\r\n        })\r\n\r\n\r\n        // 更新roads\r\n        roomStructs.init()\r\n        _.keys(CONTROLLER_STRUCTURES).forEach(struct=>structMap[struct].forEach(e=>roomStructs.set(e[0],e[1],struct)))\r\n        visited.init()\r\n        structMap[\"road\"].forEach(e=>visited.set(e[0],e[1],1))\r\n        /**\r\n         * 更新最近的roads 但是可能有残缺\r\n         */\r\n        putList.forEach(e=>{\r\n            let x = e[0]\r\n            let y = e[1]\r\n            let minVal =50;\r\n            costRoad.forNear((x1,y1,val)=>{\r\n                if(minVal>val&&val>0){\r\n                    minVal = val\r\n                }\r\n            },x,y)\r\n            // 方案2 没那么密集\r\n            costRoad.forNear((x1,y1,val)=>{\r\n                if(minVal==val&&val>0){\r\n                    // 找到建筑最近的那个road\r\n                    roomStructs.set(x1,y1,\"road\")\r\n                }\r\n            },x,y)\r\n        })\r\n        /**\r\n         * 再roads的基础上，对rads进行补全，将残缺的连起来\r\n         */\r\n        roomStructs.forEach((x,y,val)=>{\r\n            if(val == 'link'||val == 'container')return; // 资源点的不要 放路\r\n            if(! val instanceof String||val>-1)return; // 附近有建筑 ，并且不是road\r\n            // visual.text(val,x, y+0.25, {color: \"pink\",opacity:0.99,font: 7})\r\n            let minVal =50;\r\n            costRoad.forNear((x1,y1,val)=>{\r\n                if(minVal>val&&val>0){\r\n                    minVal = val\r\n                }\r\n            },x,y)\r\n            // 方案2 没那么密集\r\n            costRoad.forNear((x1,y1,val)=>{\r\n                if(minVal==val&&val>0){\r\n                    // 找到建筑最近的那个road\r\n                    if(!visited.exec(x1,y1,1))structMap[\"road\"].push([x1,y1])\r\n                }\r\n            },x,y)\r\n        })\r\n\r\n        // 处理塔的位置，让塔尽量靠外\r\n        let getRange=function(a,b){\r\n            return Math.max(Math.abs(a[0]-b[0]),Math.abs(a[1]-b[1]))\r\n        }\r\n        let poses = []\r\n        let types = [\"nuker\",\"tower\", \"observer\"]\r\n        types.forEach(type=>{\r\n            structMap[type].forEach(e=>{\r\n                let dis = 0\r\n                structMap[\"rampart\"].forEach(e_ramp=>{\r\n                    dis += getRange(e_ramp,e)\r\n                })\r\n                poses.push({pos:e,type,dis})\r\n            })\r\n        })\r\n        poses.sort((a,b)=>(a.dis-b.dis))\r\n        \r\n        for(let i=0;i<6;i++){\r\n            if(poses[i].type == \"tower\")continue;\r\n            for(let j=6;j<poses.length;j++){\r\n                if(poses[j].type != \"tower\")continue;\r\n                poses[j].type = poses[i].type\r\n                poses[i].type = \"tower\"\r\n            }\r\n        }\r\n        types.forEach(type=>{structMap[type] = []})\r\n        poses.forEach(pos=>{\r\n            structMap[pos.type].push(pos.pos)\r\n        })\r\n\r\n        //#region 新的连接外矿方式\r\n\r\n        let costs = new PathFinder.CostMatrix;\r\n        let terrain = new Room.Terrain(roomName);\r\n        for(let i=0;i<50;i++){\r\n            for(let j=0;j<50;j++){\r\n                let te = terrain.get(i,j)\r\n                costs.set(i,j,te==TERRAIN_MASK_WALL?255:(te==TERRAIN_MASK_SWAMP?4:2))\r\n            }\r\n        }\r\n        for(let struct of OBSTACLE_OBJECT_TYPES){\r\n            if(structMap[struct]){\r\n                structMap[struct].forEach(e=>{\r\n                    costs.set(e[0],e[1],255)\r\n                })\r\n            }\r\n        }\r\n        structMap[\"road\"].forEach(e=>{\r\n            costs.set(e[0],e[1],1)\r\n        })\r\n        for(let i=0;i<50;i++){\r\n            for(let j=0;j<50;j++){\r\n                // new RoomVisual(roomName).text(costs.get(i,j),new RoomPosition(i,j,roomName))\r\n            }\r\n        }\r\n        structMap[\"container\"].forEach(e=>{\r\n            let ret = PathFinder.search(\r\n                new RoomPosition(centerX,centerY,roomName),\r\n                {pos:new RoomPosition(e[0],e[1],roomName),range:1}, \r\n                {\r\n                    roomCallback:()=>{return costs},\r\n                    maxRooms:1\r\n                }\r\n            )\r\n            ret.path.forEach(pos=>{\r\n                if(costs.get(pos.x,pos.y) != 1){\r\n                    structMap['road'].push([pos.x,pos.y])\r\n                    costs.set(pos.x,pos.y,1)\r\n                }\r\n            })\r\n            \r\n        })\r\n        //#endregion\r\n\r\n        //#region 旧的连接外矿道路\r\n\r\n        // // 连接外矿的全部道路\r\n        // _.keys(CONTROLLER_STRUCTURES).forEach(struct=>structMap[struct].forEach(e=>roomStructs.set(e[0],e[1],struct)))\r\n\r\n        // costRoad.forEach((x,y,val)=>costRoad.set(x,y,100))//初始化100\r\n        // visited.init()\r\n        // queMin.push(NewNode(0,storageX,storageY))//以 storage为中心\r\n        // visited.exec(storageX,storageY,1)\r\n        // queMin.whileNoEmpty(nd=>{\r\n        //     roomStructs.forNear((x,y,val)=>{\r\n        //         let roadCost = roomWalkable.get(x,y);\r\n        //         if(!visited.exec(x,y,1)&&(!val||val=='road'||val=='rampart')&&roadCost){\r\n        //             queMin.push(NewNode(nd.k+(val=='road'?0:roadCost==2?4:2),x,y))\r\n        //         }\r\n        //     },nd.x,nd.y)\r\n        //     costRoad.set(nd.x,nd.y,nd.k)\r\n        //     // visual.text(costRoad.get(nd.x,nd.y),nd.x,nd.y+0.25, {color: \"pink\",opacity:0.99,font: 7})\r\n        // })\r\n\r\n        // // 将dp的位置进行递归回去\r\n        // let border = visited //边界不能放路\r\n        // border.init()\r\n        // visited.forBorder((x,y,val)=>{visited.set(x,y,1)})\r\n        // structMap[\"container\"].forEach(e=>{\r\n        //     let dfsBack = function (x,y){\r\n        //         let minVal =500;\r\n        //         let finalX = 0;\r\n        //         let finalY = 0;\r\n        //         costRoad.forNear((x,y,val)=>{\r\n        //             let struct = roomStructs.get(x,y)\r\n        //             if(minVal>val&&!visited.get(x,y)&&val>=0&&roomWalkable.get(x,y)&&(!struct||struct=='road'||struct=='rampart')) {\r\n        //                 minVal = val\r\n        //                 finalX = x\r\n        //                 finalY = y\r\n        //             }\r\n        //         },x,y)\r\n        //         if(minVal){\r\n        //             if(\"road\"!=roomStructs.exec(finalX,finalY,\"road\")){\r\n        //                 structMap[\"road\"].push([finalX,finalY]);\r\n        //                 dfsBack(finalX,finalY)\r\n        //             }\r\n        //         }\r\n        //         // visual.text(minVal,finalX,finalY+0.25, {color: \"pink\",opacity:0.99,font: 7})\r\n        //     }\r\n        //     dfsBack(e[0],e[1])\r\n        //     structMap[\"road\"].forEach(e=>costRoad.set(e[0],e[1],0))\r\n        // })\r\n\r\n        //#endregion\r\n\r\n        // 可视化部分\r\n        // allCacheMap[finalPos].forEach(t=>{\r\n        //     visual.circle(t.x, t.y, {fill: \"#33ff00\", radius: 0.5 ,opacity : 0.03})\r\n        // })\r\n        // putAbleList.forEach(t=>{\r\n        //     visual.circle(t.x, t.y, {fill: \"#b300ff\", radius: 0.5 ,opacity : 0.1})\r\n        // })\r\n\r\n        // roomStructs.init()\r\n        // _.keys(CONTROLLER_STRUCTURES).forEach(struct=>structMap[struct].forEach(e=>roomStructs.set(e[0],e[1],struct)))\r\n\r\n\r\n        // let t = Game.cpu.getUsed()\r\n        // console.log(Game.cpu.getUsed()-t)\r\n        pro.dismiss()\r\n\r\n        // HelperVisual.showRoomStructures(roomName,structMap)\r\n\r\n        // clog(roomName,structMap[\"extension\"].length,structMap[\"spawn\"].length,wallCnt,innerPutAbleList.length)\r\n        return{\r\n            roomName:roomName,\r\n            // storagePos:{storageX,storageY},\r\n            // labPos:{labX,labY},\r\n            structMap:structMap\r\n        }\r\n\r\n    },\r\n\r\n};\r\n\r\nexport let ManagerPlanner = pro;\r\nmodule.exports = {\r\n    run(){\r\n        let roomStructsData = undefined //放全局变量\r\n\r\n        let p = Game.flags.p; // 触发器\r\n        let pa = Game.flags.pa;\r\n        let pb = Game.flags.pb;\r\n        let pc = Game.flags.pc;\r\n        let pm = Game.flags.pm;\r\n        if(p) {\r\n            roomStructsData = ManagerPlanner.computeManor(p.pos.roomName,[pc,pm,pa,pb])\r\n            Game.flags.p.remove()\r\n        }\r\n        if(roomStructsData){\r\n            //这个有点消耗cpu 不看的时候记得关\r\n            HelperVisual.showRoomStructures(roomStructsData.roomName,roomStructsData.structMap)\r\n        }\r\n    }\r\n}\r\n/*\r\nmodule.exports = {\r\n    HelperVisual:helpervisual,\r\n    ManagerPlanner:pro,\r\n    \r\n}\r\n*/","import { max, xor } from \"lodash\";\r\n\r\nexport function equalPoint(pointA: [number, number], pointB: [number, number]): boolean {\r\n    if (pointA[0] == pointB[0] && pointA[1] == pointB[1]) return true;\r\n    return false;\r\n}\r\n\r\nexport function maxTwoNumber(x:number, y: number) {\r\n    if (x >= y) return x;\r\n    return y;\r\n}\r\n\r\nexport function distanceTwoPoints(pointA: [x: number, y:number], pointB: [x: number, y:number]): number {\r\n\r\n    //return Math.sqrt( (pointA[0]-pointB[0]) **2 + (pointA[1]-pointB[1]) **2 )\r\n    let x = Math.sqrt( (pointA[0]-pointB[0]) **2);\r\n    //console.log(x);\r\n    \r\n    let y = Math.sqrt( (pointA[1]-pointB[1]) **2);\r\n    //console.log(y);\r\n    \r\n    return maxTwoNumber(x, y);\r\n\r\n\r\n}\r\n\r\n/*\r\n    punto de distancia minima del listPoint un punto 'point' dado\r\n*/\r\n\r\nexport function minDistance(point: [x: number, y: number], listPoint: [x: number, y: number][]): number {\r\n    let pmim = listPoint[0];\r\n    let disMin = distanceTwoPoints(point, listPoint[0]);\r\n    let index = 0;\r\n    \r\n    for (let i = 1; i < listPoint.length; ++i) {\r\n        let aux = distanceTwoPoints(point, listPoint[i]);\r\n        if (aux < disMin) {\r\n            disMin = aux;\r\n            pmim = listPoint[i];\r\n            index = i;\r\n        }\r\n    }\r\n    //listPoint.splice(index, 1);\r\n    \r\n    return index;\r\n    //return [pmim[0], pmim[1]];\r\n}\r\n\r\n\r\n\r\nexport function transformToPoint(structurePos: number[]): Point {\r\n    \r\n    let point: Point = { \"x\": structurePos[0], \"y\":structurePos[1] };\r\n\r\n    return point;\r\n}\r\n\r\nexport function transformToPointList(model:{}) {\r\n    let toPoint = {};\r\n    for (let structureName in model) {        \r\n        toPoint[structureName] = [];\r\n        for (let i = 0; i < model[structureName].length; ++i) {\r\n            toPoint[structureName].push( transformToPoint(model[structureName][i]) );\r\n            console.log(toPoint[structureName][i].x);\r\n            \r\n        }\r\n        \r\n    }\r\n\r\n    return toPoint;\r\n}\r\n\r\n\r\n\r\n/*\r\n    puntos de distancia 1 de un punto dado a una lista de puntos\r\n*/\r\nexport function nearPoint(point: [x: number, y: number], listPoint: [x: number, y: number][]): number[] {\r\n    \r\n    let near: number[] = [];\r\n    for (let i = 0; i < listPoint.length; ++i) {\r\n        if (distanceTwoPoints(point, listPoint[i]) == 1) {\r\n            near.push(i);\r\n        }\r\n    }\r\n    return near;\r\n}\r\n\r\nexport function nearPointOne(point: [x: number, y: number], listPoint: [x: number, y: number][]): number {\r\n    \r\n    let near: number;\r\n    for (let i = 0; i < listPoint.length; ++i) {\r\n        if (distanceTwoPoints(point, listPoint[i]) == 1) {\r\n            near = i;\r\n            break;\r\n        }\r\n    }\r\n    return near;\r\n}\r\n\r\nexport function transformRoadToAdjacentList(roadList: [x: number, y: number][]): number[][] {\r\n    let adjacentList: number[][] = [];\r\n    for (let i = 0; i < roadList.length; ++i) {\r\n        adjacentList.push(nearPoint(roadList[i], roadList));\r\n        console.log(i , nearPoint(roadList[i], roadList));\r\n        \r\n    }\r\n    console.log(adjacentList);\r\n    \r\n    return adjacentList;\r\n}\r\n\r\nexport function reconstructPath(beginPoint: number, endPoint: number, prev: number[]): number[] {\r\n    let path:number[] = [];\r\n    for (let at = endPoint; at != -1; at = prev[at]) {\r\n        path.push(at)\r\n    }\r\n    path.reverse();\r\n\r\n    if (path[0] == beginPoint) {\r\n        return path;\r\n    }\r\n\r\n    return [];\r\n\r\n}\r\n\r\nexport function solveBFS(roadList: number[][], beginPoint: number): number[] {\r\n\r\n    //initialize visited array\r\n    let visited: boolean[] = Array<boolean>();\r\n    for (let i = 0; i < roadList.length; ++i) {\r\n        visited.push(false);\r\n    }\r\n\r\n    // Use an array as our queue representation:\r\n    let q: number[] = new Array<number>();\r\n\r\n    visited[beginPoint] = true;\r\n\r\n    q.push(beginPoint);\r\n\r\n    //save path\r\n    let path: number[] = new Array<number>();\r\n    path.push(beginPoint);\r\n\r\n    let prev = new Array<number>();\r\n    for (let i = 0; i < roadList.length; ++i) {\r\n        prev.push(-1);\r\n    }\r\n\r\n    while(q.length > 0) {\r\n\r\n        const v = q.shift();\r\n        for (let adjV of roadList[v]) {\r\n            if (!visited[adjV]) {\r\n                visited[adjV] = true;\r\n                q.push(adjV);\r\n                prev[adjV] = v;\r\n            }\r\n        }\r\n    }\r\n    return prev;\r\n}\r\n\r\nexport function roadPath(roadList: number[][], beginPoint: number, endPoint: number) {\r\n    let prev = solveBFS(roadList, beginPoint);\r\n\r\n    return reconstructPath(beginPoint, endPoint, prev);\r\n}\r\n\r\n//get object's ID by roomName, position and structure type\r\nexport function getId(roomName: string, pos: [number, number], structureType: string) {\r\n\r\n    console.log(structureType);\r\n    \r\n    const position = new RoomPosition(pos[0], pos[1], roomName);\r\n    const object = position.lookFor(structureType as keyof AllLookAtTypes);\r\n    \r\n    return object[0].id;\r\n}\r\n\r\n","export function getPlanningStructurePos(roomName: string ,structureType: string, index: number) {\r\n    const pos: [number, number] = Memory['colony'][roomName]['roomPlanning']['model'][structureType][index]['pos'];\r\n    return pos;\r\n}\r\n\r\nexport function getPlanningStructureId(roomName: string ,structureType: string, index: number) {\r\n    const pos: [number, number] = Memory['colony'][roomName]['roomPlanning']['model'][structureType][index]['id'];\r\n    if (pos) return pos;\r\n    return null;\r\n}\r\n\r\n\r\n\r\n","import * as planning from \"./RoomPlanning\"\r\nimport * as utils from \"./planningUtils\"\r\nimport * as acces from \"./planningAcces\"\r\n\r\nexport class TranslatePlanning {\r\n    mainRoom: string;\r\n\r\n\r\n    constructor(mainRoom: string) {\r\n        this.mainRoom = mainRoom;\r\n    }\r\n\r\n    public savePlanningModel() {\r\n        let roomStructsData;\r\n\r\n        let p =  Game.flags.p;\r\n        let pc =  Game.flags.pc;\r\n        let pm =  Game.flags.pm;\r\n        let pa =  Game.flags.pa;\r\n        let pb =  Game.flags.pb;\r\n\r\n        const saPosition: [number, number] = [pa.pos.x, pa.pos.y];\r\n        const sbPosition: [number, number] = [pb.pos.x, pb.pos.y];\r\n        const cPosition: [number, number] = [pc.pos.x, pc.pos.y];\r\n        const mPosition: [number, number] = [pm.pos.x, pm.pos.y];\r\n        \r\n\r\n        if (p) {\r\n            roomStructsData = planning.ManagerPlanner.computeManor(this.mainRoom,[pc,pm,pa,pb])\r\n            Game.flags.p.remove();\r\n        }\r\n        if (roomStructsData) {\r\n            planning.HelperVisual.showRoomStructures(this.mainRoom,roomStructsData['structMap'])\r\n            \r\n            Memory['colony'][this.mainRoom]['roomPlanning'] = {};\r\n            //save model\r\n            this.generateModel(roomStructsData['structMap']);\r\n            this.containerReference(roomStructsData['structMap']['container']);\r\n            this.linkReference(roomStructsData['structMap']['link']);\r\n            this.roadReference(roomStructsData['structMap']['road']);\r\n            this.labReference(roomStructsData['structMap']['lab']);\r\n\r\n            //let roadList =  utils.transformRoadToAdjacentList( roomStructsData['structMap']['road']);\r\n            \r\n            \r\n\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private labReference(labList:[]){\r\n        \r\n    }\r\n\r\n    private roadReference(roadList:[]) {\r\n        let roadListAdj =  utils.transformRoadToAdjacentList( roadList);\r\n        const spawn0Pos: [number, number] = Memory['colony'][this.mainRoom]['roomPlanning']['model']['spawn'][0]['pos'];\r\n        const posRoadNearSpawn0 = utils.nearPointOne(spawn0Pos, roadList);\r\n                \r\n        //Spawn0 to source1 path\r\n        const containerSource1Reference: number = Memory['colony'][this.mainRoom]['roomPlanning']['containerReference']['container_source1']\r\n        const containerSource1Pos: [number, number] = Memory['colony'][this.mainRoom]['roomPlanning']['model']['container'][containerSource1Reference]['pos'];\r\n        const posRoadNearContainerSource1 = utils.nearPointOne(containerSource1Pos, roadList);\r\n        let spawn0ToSource1 = utils.roadPath(roadListAdj, posRoadNearSpawn0, posRoadNearContainerSource1);\r\n     \r\n        //Spawn0 to source2 path\r\n        const containerSource2Reference: number = Memory['colony'][this.mainRoom]['roomPlanning']['containerReference']['container_source2']\r\n        const containerSource2Pos: [number, number] = Memory['colony'][this.mainRoom]['roomPlanning']['model']['container'][containerSource2Reference]['pos'];\r\n        const posRoadNearContainerSource2 = utils.nearPointOne(containerSource2Pos, roadList);\r\n        let spawn0ToSource2 = utils.roadPath(roadListAdj, posRoadNearSpawn0, posRoadNearContainerSource2);\r\n\r\n        //Spawn0 to controller\r\n        const containerControllerReference: number = Memory['colony'][this.mainRoom]['roomPlanning']['containerReference']['container_controller']\r\n        const containerControllerPos: [number, number] = Memory['colony'][this.mainRoom]['roomPlanning']['model']['container'][containerControllerReference]['pos'];\r\n        const posRoadNearContainerController = utils.nearPointOne(containerControllerPos, roadList);\r\n        let spawn0ToController = utils.roadPath(roadListAdj, posRoadNearSpawn0, posRoadNearContainerController);\r\n\r\n        \r\n        //Spawn0 to mineral\r\n        const containerMineralReference: number = Memory['colony'][this.mainRoom]['roomPlanning']['containerReference']['container_mineral']\r\n        const containerMineralPos: [number, number] = Memory['colony'][this.mainRoom]['roomPlanning']['model']['container'][containerMineralReference]['pos'];\r\n        const posRoadNearContainerMineral = utils.nearPointOne(containerMineralPos, roadList);\r\n        let spawn0ToMineral = utils.roadPath(roadListAdj, posRoadNearSpawn0, posRoadNearContainerMineral);\r\n\r\n\r\n        Memory['colony'][this.mainRoom]['roomPlanning']['roadReference'] = {\r\n            'spawn0ToSource1': spawn0ToSource1,\r\n            'spawn0ToSource2': spawn0ToSource2,\r\n            'spawn0ToController': spawn0ToController,\r\n            'spawn0ToMineral': spawn0ToMineral\r\n        }\r\n\r\n    }\r\n\r\n    private linkReference(linkList: []){\r\n        const containerReference = Memory['colony'][this.mainRoom]['roomPlanning']['containerReference'];\r\n\r\n        let posSourceContainer1: [number, number] = acces.getPlanningStructurePos(this.mainRoom, 'container', containerReference['container_source1']);\r\n        let posSourceContainer2: [number, number] = acces.getPlanningStructurePos(this.mainRoom, 'container', containerReference['container_source2']);\r\n        let posControllerContainer: [number, number] = acces.getPlanningStructurePos(this.mainRoom, 'container', containerReference['container_controller']);\r\n        let posCenterContainer: [number, number] = acces.getPlanningStructurePos(this.mainRoom, 'container', containerReference['container_mineral']);\r\n\r\n        let linkSourcel = utils.minDistance(posSourceContainer1, linkList);\r\n        let linkSource2 = utils.minDistance(posSourceContainer2, linkList);\r\n        let linkController = utils.minDistance(posControllerContainer, linkList);   \r\n        let linkCenter: number;\r\n        for (let i = 0; i < linkList.length; ++i) {\r\n            if (i != linkSourcel && i != linkSource2 && i != linkController) {\r\n                linkCenter = i;\r\n            }\r\n        }\r\n\r\n        Memory['colony'][this.mainRoom]['roomPlanning']['linkReference'] = {\r\n            'link_source1': linkSourcel,\r\n            'link_source2': linkSource2,\r\n            'link_controller': linkController,\r\n            'link_center': linkCenter\r\n        }\r\n        \r\n    }\r\n\r\n    private containerReference(containerList: []) {\r\n\r\n        let posSource1:[number, number] = Memory['colony'][this.mainRoom]['roomPlanning']['model']['source'][0]['pos'];\r\n        let posSource2:[number, number] = Memory['colony'][this.mainRoom]['roomPlanning']['model']['source'][1]['pos'];\r\n        let posMineral:[number, number] = Memory['colony'][this.mainRoom]['roomPlanning']['model']['source'][2]['pos'];\r\n\r\n        let aux = Game.rooms[this.mainRoom].controller;\r\n        let posController: [number, number] = [aux.pos.x, aux.pos.y];\r\n\r\n        let containerSourcel = utils.minDistance(posSource1, containerList);\r\n        let containerSource2 = utils.minDistance(posSource2, containerList);\r\n        let containerMineral = utils.minDistance(posMineral, containerList);\r\n        let containerController = utils.minDistance(posController, containerList);        \r\n\r\n\r\n        Memory['colony'][this.mainRoom]['roomPlanning']['containerReference'] = {\r\n            'container_source1': containerSourcel,\r\n            'container_source2': containerSource2,\r\n            'container_mineral': containerMineral,\r\n            'container_controller': containerController\r\n        }\r\n    }\r\n\r\n    /*\r\n        Planning model data. \r\n    */\r\n    private generateModel(model: {}): void {\r\n        Memory['colony'][this.mainRoom]['roomPlanning']['model'] = {}\r\n        for (let structureName in model) {\r\n            Memory['colony'][this.mainRoom]['roomPlanning']['model'][structureName] = []\r\n            for (let i in model[structureName])\r\n                Memory['colony'][this.mainRoom]['roomPlanning']['model'][structureName].push(\r\n                    {'id': '', 'pos': model[structureName][i]}\r\n                )\r\n        }\r\n\r\n        const saPos: [number, number] = [Game.flags.pa.pos.x, Game.flags.pa.pos.y];\r\n        const sbPos: [number, number] = [Game.flags.pb.pos.x, Game.flags.pb.pos.y];\r\n        const mPos: [number, number] = [Game.flags.pm.pos.x, Game.flags.pm.pos.y];\r\n        Memory['colony'][this.mainRoom]['roomPlanning']['model']['source'] = [];\r\n        Memory['colony'][this.mainRoom]['roomPlanning']['model']['source'].push(\r\n            {'id': utils.getId(this.mainRoom, saPos, 'source'), 'pos': saPos}\r\n        )\r\n        Memory['colony'][this.mainRoom]['roomPlanning']['model']['source'].push(\r\n            {'id': utils.getId(this.mainRoom, sbPos, 'source'), 'pos': sbPos}\r\n        )\r\n        Memory['colony'][this.mainRoom]['roomPlanning']['model']['source'].push(\r\n            {'id': utils.getId(this.mainRoom, mPos, 'mineral'), 'pos': mPos}\r\n        )\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    private savePlanningForEveryRCL(roadList: number[][]): void {\r\n        const memRoomPlanning = Memory['colony'][this.mainRoom]['roomPlanning'];\r\n        this.stage1(roadList);\r\n    }\r\n\r\n    private stage1(roadList: number[][]) {\r\n        const memRoomPlanning = Memory['colony'][this.mainRoom]['roomPlanning'];\r\n\r\n        //get the first spawn location from the model\r\n        memRoomPlanning['stage'] = {};\r\n        memRoomPlanning['stage']['spawn'] = [];\r\n        memRoomPlanning['stage']['spawn'].push( memRoomPlanning['model']['spawn'][0]);\r\n\r\n        //add container\r\n        let containerList = memRoomPlanning['model']['container'];\r\n\r\n        let posSource1:[number, number] = memRoomPlanning['model']['source'][0];\r\n        let posSource2:[number, number] = memRoomPlanning['model']['source'][1];\r\n        let posController:[number, number] = memRoomPlanning['model']['source'][2];\r\n\r\n        let containerSourcel = utils.minDistance(posSource1, containerList);\r\n        let containerSource2 = utils.minDistance(posSource2, containerList);\r\n        let containerController = utils.minDistance(posController, containerList);\r\n\r\n        memRoomPlanning['stage']['container'] = [];\r\n        memRoomPlanning['stage']['container'].push( containerSourcel);\r\n        memRoomPlanning['stage']['container'].push( containerSource2);\r\n        memRoomPlanning['stage']['container'].push( containerController);\r\n\r\n\r\n        \r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n}","import { TranslatePlanning } from \"@/roomPlanning/TranslatePlanning\";\r\n\r\n\r\n\r\n/*\r\nMemory.colony.\r\n        mainRoom.\r\n            state{}\r\n            roomPlanning{}\r\n            dpt_work{}\r\n*/\r\n\r\n/*\r\n    Colony's memory block inizializer.\r\n    Only when create a new colony\r\n*/\r\n\r\nexport class Mem {\r\n    mainRoom: string;\r\n\r\n    constructor(roomName: string) {\r\n        this.mainRoom = roomName;\r\n        //this.build();\r\n    }\r\n\r\n\r\n    \r\n    private initializeWorkerCreepsMem():void {\r\n\r\n        //initialize dpt_workers creeps\r\n        const colonyMem = Memory['colony'][this.mainRoom];\r\n        const namePrefix = this.mainRoom;\r\n        colonyMem['dpt_work']['creep'][namePrefix+'_dptWork_1'] = {};\r\n        colonyMem['dpt_work']['creep'][namePrefix+'_dptWork_1']['active'] = false;\r\n        colonyMem['dpt_work']['creep'][namePrefix+'_dptWork_1']['setting'] = {};\r\n\r\n        colonyMem['dpt_work']['creep'][namePrefix+'_dptWork_2'] = {};\r\n        colonyMem['dpt_work']['creep'][namePrefix+'_dptWork_2']['active'] = false;\r\n        colonyMem['dpt_work']['creep'][namePrefix+'_dptWork_2']['setting'] = {};\r\n    }\r\n\r\n    private initializeDptWork():void {\r\n        const colonyMem = Memory['colony'][this.mainRoom];\r\n        colonyMem['dpt_work'] = {};\r\n        colonyMem['dpt_work']['creep'] = {};\r\n        colonyMem['dpt_work']['buildTask'] = [];\r\n        colonyMem['dpt_work']['repairTask'] = [];\r\n        colonyMem['dpt_work']['ticksToSpawn'] = {};\r\n        this.initializeWorkerCreepsMem();\r\n    }\r\n\r\n    /*\r\n        request mem for a new colony\r\n    */\r\n    public initializeColonyMem(): void {\r\n        delete Memory['colony'][this.mainRoom]\r\n\r\n        Memory['colony'][this.mainRoom] = {};\r\n        const colonyMem = Memory['colony'][this.mainRoom];\r\n\r\n        colonyMem['state'] = {};\r\n        colonyMem['state']['currentRCL'] = 1;\r\n        colonyMem['state']['updateRoomPlanning'] = true;\r\n        colonyMem['state']['updateCreepNum'] = true;\r\n        colonyMem['state']['updateCreepNumWorker'] = true;\r\n        \r\n        colonyMem['state']['updateCreepNum'] = 1;\r\n        //save roomPlaning Block\r\n        let planning: TranslatePlanning = new TranslatePlanning(this.mainRoom);\r\n        planning.savePlanningModel();\r\n\r\n        colonyMem['creepSpawning'] = {};\r\n        colonyMem['creepSpawning']['spawn'] = [];\r\n        colonyMem['creepSpawning']['task'] = {};\r\n        colonyMem['creepSpawning']['completeTask'] = {};\r\n\r\n\r\n        this.initializeDptHarvest();\r\n        this.initializeDptLogistic();\r\n        this.initializeDptWork();\r\n\r\n        \r\n\r\n    }\r\n    \r\n    private initializeDptLogistic() {\r\n        const colonyMem = Memory['colony'][this.mainRoom];\r\n        colonyMem['dpt_logistic'] = {};\r\n        colonyMem['dpt_logistic']['state'] = '';\r\n        \r\n        colonyMem['dpt_logistic']['creep'] = {};\r\n        colonyMem['dpt_logistic']['task'] = {};\r\n\r\n        colonyMem['dpt_logistic']['ticksToSpawn'] = {};\r\n    }\r\n\r\n    private initializeDptHarvest() {\r\n        const colonyMem = Memory['colony'][this.mainRoom];\r\n        colonyMem['dpt_harvest'] = {};\r\n        colonyMem['dpt_harvest']['state'] = '';\r\n\r\n        colonyMem['dpt_harvest']['creep'] = {};\r\n        colonyMem['dpt_harvest']['creep']['internal'] = {};\r\n\r\n        colonyMem['dpt_harvest']['source'] = {}\r\n            //'id': [Pos1, Pos2, Pos3...]\r\n        colonyMem['dpt_harvest']['ticksToSpawn'] = {};\r\n    }\r\n\r\n}","export const energyAvailable = [300, 550, 800, 1300, 1800, 2300, 5600, 10000]\r\n\r\n\r\n\r\nexport function getEnergyRCL(energyAmount: number): number {\r\n\r\n    let found = false;\r\n    let i = 0;\r\n    while( !found && i < 8) {\r\n        if (energyAmount <= energyAvailable[i]) return i+1;\r\n        ++i;\r\n    }\r\n    return -1;\r\n}\r\n\r\nexport function getBody(role: string, rcl: number): BodyPartConstant[] {\r\n\r\n    let prototype: BodyPartConstant[] = bodyPrototype[role];\r\n    \r\n    const componentNum = bodyComponentNum[role][rcl];\r\n    let act: BodyPartConstant[] = [];\r\n    for (let i in prototype) {\r\n        for (let j = 0; j < componentNum[i]; ++j ) {\r\n            act.push(prototype[i]);\r\n        }\r\n    }\r\n    return act;\r\n}\r\n\r\nexport function ticksToSpawn(role: string, rcl: number): number {\r\n    const componentNum:number[] = bodyComponentNum[role][rcl.toString()];\r\n    const ticks:number = componentNum.reduce((x, y) => x + y, 0)\r\n    return ticks*3\r\n}\r\n\r\n\r\n\r\nexport const bodyPrototype = {\r\n    harvester: [WORK, CARRY, MOVE],\r\n    worker: [WORK, CARRY, MOVE],\r\n    transporter: [CARRY, MOVE]\r\n}\r\n\r\n\r\nexport const bodyComponentNum = {\r\n    //WORK  CARRY   MOVE\r\n    harvester:{\r\n        1: [2, 1, 1],\r\n        2: [4, 1, 2]\r\n    },\r\n\r\n    worker: {\r\n        1: [1, 1, 1],\r\n        2: [2, 2, 2]\r\n    },\r\n\r\n    transporter: {\r\n        1: [2, 2],\r\n        2: [3, 2]\r\n    }\r\n}\r\n\r\nexport const bodyConfigs = {\r\n    harvester:{\r\n        1: {WORK: 2, CARRY: 1, MOVE: 1},\r\n        2: {WORK: 4, CARRY: 1, MOVE: 2}\r\n    },\r\n\r\n    worker: {\r\n        1: {\"work\": 1, \"carry\": 1, \"move\": 1},\r\n        2: {WORK: 2, CARRY: 2, MOVE: 2}\r\n    },\r\n\r\n    transporter: {\r\n        1: {CARRY: 2, MOVE: 2},\r\n        2: {CARRY: 3, MOVE: 2}\r\n    }\r\n  \r\n}\r\n\r\nexport const numConfigs = {\r\n    1: {\r\n        harvester: 2,\r\n        worker: 2\r\n    }\r\n}\r\n\r\nexport function workerSourceConfigUpdate(energyRCL: number, roomName: string): void {\r\n    console.log(energyRCL);\r\n    \r\n    if (energyRCL == 1) {\r\n        const colonyMem = Memory['colony'][roomName];\r\n        const namePrefix = roomName;\r\n\r\n        const sourcePos = colonyMem['roomPlanning']['model']['source'];\r\n        const source1 = sourcePos[0];\r\n        const source2 = sourcePos[1];\r\n\r\n        const source1Pos = new RoomPosition(source1[0], source1[1], roomName);\r\n        const source2Pos = new RoomPosition(source2[0], source2[1], roomName);\r\n\r\n        const s1 = source1Pos.lookFor(LOOK_SOURCES);\r\n        const s2 = source2Pos.lookFor(LOOK_SOURCES);\r\n\r\n        console.log(s1);\r\n        \r\n        colonyMem['dpt_work']['creep'][namePrefix+'_dptWork_1']['setting']['source'] = s1[0].id;\r\n\r\n        colonyMem['dpt_work']['creep'][namePrefix+'_dptWork_2']['setting']['source'] = s2[0].id;\r\n    }\r\n}\r\n\r\nexport function workerConfigUpdate(roomName: string, dptName: string, energyRCL: number,): void {\r\n    \r\n    if (energyRCL == 1) {\r\n        const source1id = Memory['colony'][roomName]['roomPlanning']['model']['source']['energy1'];\r\n        const source2id = Memory['colony'][roomName]['roomPlanning']['model']['source']['energy2'];\r\n\r\n        const creepsMem = Memory['colony'][roomName][dptName]['creep'];\r\n        let creepNameList = Array<string>();\r\n        for (let creepName in creepsMem) {\r\n            creepNameList.push(creepName);\r\n        }\r\n        \r\n        creepsMem[creepNameList[0]]['source'] = source1id;\r\n        creepsMem[creepNameList[1]]['source'] = source2id;\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function updateCreepSetting( roomName: string,  dptName: string, energyRCL: number) {\r\n    switch (dptName) {\r\n        case 'dpt_work': \r\n            workerConfigUpdate(roomName, dptName, energyRCL);\r\n            break;\r\n\r\n        case 'dpt_harvest':\r\n            break;\r\n\r\n        default:\r\n            console.log('Department name incorrect !');\r\n            \r\n    }\r\n    \r\n}\r\n\r\n\r\n","import * as setting from \"@/creep/setting\"\r\n\r\nexport class CreepSpawning {\r\n    mainRoom: string;       \r\n    memory: {};\r\n\r\n    constructor(mainRoom: string) {\r\n        this.mainRoom = mainRoom;\r\n        this.memory = Memory['colony'][mainRoom]['creepSpawning'];\r\n    }\r\n\r\n    /*\r\n        colonyMem['Spawning'] = {};\r\n        colonyMem['Spawning']['spawn'] = [];\r\n        colonyMem['Spawning']['task'] = [];\r\n        colonyMem['Spawning']['completeTask'] = {};\r\n    */\r\n\r\n\r\n    private notifyTaskComplete(name: string, role: string, dpt: string) {\r\n        const completeTaskList = this.memory['completeTask'];\r\n        const energyRCL = setting.getEnergyRCL(Game.rooms[this.mainRoom].energyCapacityAvailable);\r\n        /*\r\n        const completeTask: SpawnTaskComplete = {\r\n            creepName: name,\r\n            deadTime: setting.ticksToSpawn(role, energyRCL) + 1500 + 10\r\n        };\r\n        */\r\n       console.log(dpt);\r\n       console.log(name);\r\n       console.log(setting.ticksToSpawn(role, energyRCL));\r\n       \r\n       \r\n       \r\n        Memory['colony'][this.mainRoom][dpt]['ticksToSpawn'][name] = Game.time + setting.ticksToSpawn(role, energyRCL) + 1500 + 10;\r\n        \r\n    }\r\n\r\n    public uid() {\r\n        //return (performance.now().toString(36)+Math.random().toString(36)).replace(/\\./g,\"\");\r\n        return (Math.random().toString(36).substr(2,9));\r\n    }\r\n\r\n    private spawn(spawnName: string, creepName: string, creepRole: string, creepData:{}, dpt: string ): ScreepsReturnCode {\r\n        const spawn = Game.spawns[spawnName];\r\n        const energyRCL = setting.getEnergyRCL(Game.rooms[this.mainRoom].energyCapacityAvailable);\r\n        console.log(energyRCL);\r\n        \r\n        const creepBody = setting.getBody(creepRole, energyRCL);\r\n\r\n        return spawn.spawnCreep(creepBody, creepName, {\r\n            memory: {\r\n                role: creepRole, \r\n                department: dpt,\r\n                data: creepData\r\n            }\r\n        })\r\n        \r\n    }\r\n\r\n    public run(): void {\r\n\r\n        const spawnTask = this.memory['task']\r\n        let spawnIndex = 0;\r\n\r\n        for (let creepName in spawnTask) {  \r\n            //console.log(creepName);\r\n            \r\n            const spawnList = this.memory['spawn'];\r\n            if (spawnIndex < spawnList.length) {\r\n            \r\n              const spawnName:string = spawnList[spawnIndex];              \r\n              const creepRole = spawnTask[creepName]['role'];\r\n              const creepDpt = spawnTask[creepName]['department'];\r\n              const creepData = spawnTask[creepName]['data'];\r\n              if (this.spawn(spawnName, creepName, creepRole, creepData, creepDpt) == OK) {\r\n                delete spawnTask[creepName];\r\n\r\n                this.notifyTaskComplete(creepName, creepRole, creepDpt);\r\n              }\r\n              \r\n              ++spawnIndex;\r\n            }\r\n        \r\n        }\r\n    }\r\n\r\n\r\n}","import * as dpt_config from \"@/department/dpt_config\"\r\n\r\nexport abstract class Department {\r\n    mainRoom: string;       \r\n    type: string;       //department type, e.g. dpt_harvest\r\n    memory: {};\r\n    spawnTaskMemory: {};\r\n    \r\n    constructor(mainRoom:string, type: string) {\r\n        this.mainRoom = mainRoom;\r\n        this.type = type;\r\n        this.memory = Memory['colony'][mainRoom][type];\r\n        this.spawnTaskMemory = Memory['colony'][mainRoom]['creepSpawning'];\r\n    }\r\n\r\n\r\n    protected sendSpawnTask(creepName: string, roleType: string): void {\r\n        const creepsList = this.memory['creep'];\r\n\r\n        const spawnTask: SpawnTask = {\r\n            creepName: creepName,\r\n            role: roleType,\r\n            dpt: 'dpt_work'\r\n        }\r\n        Memory['colony'][this.mainRoom]['creepSpawning']['task'][creepName] = {'role': roleType, 'dpt': 'dpt_work'}\r\n\r\n            //Memory['colony'][this.mainRoom]['creepSpawning']['task'].push(spawnTask);\r\n    \r\n    }\r\n\r\n    protected deleteCreep(creepName: string) {\r\n        \r\n    }\r\n\r\n    protected abstract actualizeCreepNumber();\r\n\r\n    protected sendToSpawnInitializacion(creepName: string, role: string,  data: {}, dpt: string) {\r\n        Memory['colony'][this.mainRoom]['creepSpawning']['task'][creepName] ={};\r\n        \r\n        const spawnTask = Memory['colony'][this.mainRoom]['creepSpawning']['task'][creepName];\r\n        console.log(creepName);\r\n        \r\n        spawnTask['role'] = role;\r\n        spawnTask['department'] = dpt;\r\n        spawnTask['data'] = data;\r\n        \r\n        /*\r\n        for (let config in creepConfig) {\r\n            spawnTask[config] = creepConfig[config];\r\n        }\r\n        */\r\n    }\r\n\r\n    protected uid() {\r\n        //return (performance.now().toString(36)+Math.random().toString(36)).replace(/\\./g,\"\");\r\n        return (Math.random().toString(36).substr(2,9));\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n}","//Creep Controller\r\n\r\nexport const energyAvailable = [300, 550, 800, 1300, 1800, 2300, 5600, 10000]\r\n\r\nexport function getEnergyRCL(energyAmount: number): number {\r\n\r\n    let found = false;\r\n    let i = 0;\r\n    while( !found && i < 8) {\r\n        if (energyAmount <= energyAvailable[i]) return i+1;\r\n        ++i;\r\n    }\r\n    return -1;\r\n}\r\n\r\n//Restriccion: pos no puede estar en el borde del mapa!!!\r\nexport function positionToHarvest(roomName: string, pos: [number, number]): [number, number][] {\r\n    const terrain = new Room.Terrain(roomName);\r\n    \r\n    let canStand:[number, number][] = [];\r\n    if (terrain.get(pos[0]-1, pos[1]+1) != 1) canStand.push([pos[0]-1, pos[1]+1]);  //x-1, y+1\r\n    if (terrain.get(pos[0]-1, pos[1]) != 1) canStand.push([pos[0]-1, pos[1]]);      //x-1, y\r\n    if (terrain.get(pos[0]-1, pos[1]-1) != 1) canStand.push([pos[0]-1, pos[1]-1]);  //x-1, y-1\r\n\r\n    if (terrain.get(pos[0], pos[1]+1) != 1) canStand.push([pos[0], pos[1]+1]);      //x, y+1\r\n    if (terrain.get(pos[0], pos[1]) != 1) canStand.push([pos[0], pos[1]]);          //x, y\r\n    if (terrain.get(pos[0], pos[1]-1) != 1) canStand.push([pos[0]-1, pos[1]+1]);    //x, y-1\r\n\r\n    if (terrain.get(pos[0]+1, pos[1]+1) != 1) canStand.push([pos[0]+1, pos[1]+1]);  //x+1, y+1\r\n    if (terrain.get(pos[0]+1, pos[1]) != 1) canStand.push([pos[0]+1, pos[1]]);      //x-1, y\r\n    if (terrain.get(pos[0]+1, pos[1]-1) != 1) canStand.push([pos[0]+1, pos[1]-1]);  //x-1, y-1\r\n\r\n    return canStand\r\n}\r\n\r\nexport function nwork(energyAmount: number): {} {\r\n    let energyRCL = getEnergyRCL(energyAmount);\r\n    if (energyRCL == 1) {\r\n\r\n    }\r\n\r\n    return\r\n}\r\n\r\n\r\nexport const permmanentCreepsRoleNum = {\r\n    dpt_work: {\r\n        role: 'worker',\r\n        numConfig: [2, 2, 2, 2, 2, 2, 2, 2]\r\n    }\r\n}\r\n\r\nexport const permanentNumConfigs = {\r\n    dpt_work: [2, 2, 2, 2, 2, 2, 2, 2],\r\n    dpt_harvester:[2, 2, 2, 2, 2, 2, 2, 2]\r\n    \r\n\r\n}\r\n\r\n\r\n\r\n\r\n","import { Department } from \"../Department\";\r\nimport * as dpt_config from \"@/department/dpt_config\"\r\nimport * as setting from \"@/creep/setting\";\r\nimport { isNull, max, random } from \"lodash\";\r\nimport { maxTwoNumber } from \"@/roomPlanning/planningUtils\";\r\n\r\nexport default class Dpt_Work extends Department {\r\n    \r\n    \r\n    constructor(dptRoom: string) {\r\n        super(dptRoom, 'dpt_harvest');\r\n    }\r\n\r\n    private getSourceId1() {\r\n        return Memory['colony'][this.mainRoom]['roomPlanning']['model']['source'][0]\r\n    }\r\n    private getSourceId2() {\r\n        return Memory['colony'][this.mainRoom]['roomPlanning']['model']['source'][1]\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    actualizeCreepNumber(): void {\r\n        const rclEnergy = dpt_config.getEnergyRCL(Game.rooms[this.mainRoom].energyCapacityAvailable);\r\n        if (rclEnergy == 1) {\r\n            const sourceId1 = this.getSourceId1();\r\n            const sourceId2 = this.getSourceId2();\r\n\r\n            let numCreepsNeeded1 = dpt_config.positionToHarvest(this.mainRoom, sourceId1['pos']).length;\r\n            if (numCreepsNeeded1 > 3) numCreepsNeeded1 = 3;\r\n            const data:HarvesterData = {\r\n                source: sourceId1.id,\r\n                target: null\r\n            }\r\n            const role = 'harvester';\r\n            for (let i = 0; i < numCreepsNeeded1; ++i) {\r\n                const creepName = this.uid();\r\n                \r\n                this.sendToSpawnInitializacion(creepName, role,  data, 'dpt_harvest')\r\n            }\r\n\r\n            let numCreepsNeeded2 = dpt_config.positionToHarvest(this.mainRoom, sourceId2['pos']).length;\r\n            if (numCreepsNeeded2 > 3) numCreepsNeeded2 = 3;\r\n            const config2 = {\r\n                source: sourceId2,\r\n                target: null\r\n            }\r\n            for (let i = 0; i < numCreepsNeeded2; ++i) {\r\n                const creepName = this.uid();\r\n                \r\n                //this.sendToSpawnInitializacion(creepName, config2)\r\n            }\r\n\r\n\r\n        }\r\n        //let dif = numCreepsNeeded - activeCreeps;\r\n        \r\n\r\n        //setting.workerSourceConfigUpdate(rclEnergy, this.mainRoom);\r\n\r\n    }\r\n\r\n\r\n    public run() {\r\n        if (Memory['colony'][this.mainRoom]['state']['updateCreepNum']) {\r\n            this.actualizeCreepNumber();\r\n            Memory['colony'][this.mainRoom]['state']['updateCreepNum']= false;\r\n        }\r\n        \r\n        \r\n       \r\n    }\r\n\r\n\r\n}","import {Mem} from \"./Memory\"\r\nimport Dpt_Work from \"@/department/dpt_work/Dpt_Work\";\r\nimport { CreepSpawning } from \"@/structure/CreepSpawning\";\r\nimport Dpt_harvest from \"@/department/dpt_harvest/Dpt_harvest\";\r\n\r\n\r\n/** \r\n    Ocupa de ejecutar todas las acciones de una colonia\r\n    y la comunicacion intercolonial\r\n*/\r\nexport class Colony {\r\n\r\n    mainRoom: string;  //main roomName\r\n    /* Colony property */\r\n    //dpt_work: Dpt_Work;\r\n    //creepSpawning: CreepSpawning;\r\n\r\n    constructor(mainRoom: string) {\r\n        this.mainRoom = mainRoom;\r\n        //this.memory = new Mem(mainRoom);\r\n        //this.dpt_work = new Dpt_Work(mainRoom);\r\n        //this.creepSpawning = new CreepSpawning(mainRoom);\r\n    }\r\n\r\n\r\n\r\n    //initialize colony Memory\r\n    public initializeMem(): void {\r\n        const memory = new Mem(this.mainRoom);\r\n        memory.initializeColonyMem();\r\n    }\r\n\r\n\r\n\r\n\r\n    public run() {\r\n        //const dpt_work = new Dpt_Work(this.mainRoom);\r\n        //const creepSpawning = new CreepSpawning(this.mainRoom);\r\n        //dpt_work.run();\r\n        \r\n        //creepSpawning.run();\r\n        \r\n        const dpt_harvest = new Dpt_harvest(this.mainRoom);\r\n        dpt_harvest.run();\r\n\r\n        const creepSpawning = new CreepSpawning(this.mainRoom);\r\n        creepSpawning.run();\r\n    }\r\n    \r\n}\r\n\r\n\r\n//Memory['colony']['W7N7']['creepSpawning']['spawn'].push('Spawn1')\r\n//ColonyApi.createColony('W7N7')\r\n\r\n//Memory['colony']['W7N7']['dpt_work']['ticksToSpawn']['W7N7_dptWork_1'] = Game.time + 10;","import {Colony} from \"./Colony\"\r\n\r\nglobal.ColonyApi = {\r\n    createColony(roomName: string) : string{\r\n        const col1 = new Colony(roomName);\r\n        col1.initializeMem();\r\n        //col1.updateSpawnTask();\r\n\r\n        return \"Colony \" + roomName + \" created.\"\r\n    },\r\n\r\n    generateCreep(roomName: string, role: string) {\r\n        \r\n    }\r\n    \r\n\r\n}\r\n\r\nexport function nothing(){\r\n    return \"nothinf\"\r\n}\r\n\r\nexport {};","\r\n \r\n /**\r\n  * 把 obj2 的原型合并到 obj1 的原型上\r\n  * 如果原型的键以 Getter 结尾，则将会把其挂载为 getter 属性\r\n  * @param obj1 要挂载到的对象\r\n  * @param obj2 要进行挂载的对象\r\n  */\r\n export const assignPrototype = function(obj1: {[key: string]: any}, obj2: {[key: string]: any}) {\r\n     Object.getOwnPropertyNames(obj2.prototype).forEach(key => {\r\n         if (key.includes('Getter')) {\r\n             Object.defineProperty(obj1.prototype, key.split('Getter')[0], {\r\n                 get: obj2.prototype[key],\r\n                 enumerable: false,\r\n                 configurable: true\r\n             })\r\n         }\r\n         else obj1.prototype[key] = obj2.prototype[key]\r\n     })\r\n }","export const basic:{\r\n    [role in BaseRoleConstant]: (data: SourceTargetData) => ICreepConfig\r\n} = {\r\n    colonizer: (data: SourceTargetData): ICreepConfig => ({\r\n        source: creep => {\r\n            const source = Game.getObjectById(data.source as Id<Source>);\r\n            if (creep.harvest(source) == ERR_NOT_IN_RANGE) {\r\n                creep.moveTo(source);\r\n            }\r\n            return creep.store.getFreeCapacity() <= 0;\r\n        },\r\n        target: creep => {\r\n            const cSide = creep.pos.findClosestByRange(FIND_CONSTRUCTION_SITES);\r\n            const controller = Game.rooms[creep.room.name].controller;\r\n            if (creep.upgradeController(controller) == ERR_NOT_IN_RANGE) creep.moveTo(controller);\r\n\r\n            /*\r\n            if (cSide) {\r\n                if (creep.build(cSide) == ERR_NOT_IN_RANGE) creep.moveTo(cSide);\r\n            }\r\n            */\r\n           \r\n            return (creep.store.getUsedCapacity() <= 0);\r\n        }\r\n\r\n\r\n        \r\n\r\n    }),\r\n\r\n\r\n    builder: (data: SourceTargetData): ICreepConfig => ({\r\n        source: creep => {\r\n            const source = Game.getObjectById(data.source as Id<Source>);\r\n\r\n            if (creep.harvest(source) == ERR_NOT_IN_RANGE) creep.moveTo(source);\r\n\r\n        // 自己身上的能量装满了，返回 true（切换至 target 阶段）\r\n        return creep.store.getFreeCapacity() <= 0\r\n\r\n            return true;\r\n        },\r\n        target: creep => {\r\n            const target = Game.getObjectById(data.target as Id<ConstructionSite>);\r\n            if (creep.build(target) == ERR_NOT_IN_RANGE) creep.moveTo(target);\r\n\r\n\r\n            return creep.store[RESOURCE_ENERGY] <= 0\r\n        }\r\n\r\n\r\n        \r\n\r\n    }),\r\n    harvester: (data: HarvesterData): ICreepConfig => ({\r\n        source: creep => {\r\n            const source = Game.getObjectById(data.source as Id<Source>);\r\n            if (creep.harvest(source) == ERR_NOT_IN_RANGE) {\r\n                creep.moveTo(source);\r\n            }\r\n            \r\n            //change state if creep store max\r\n            return creep.store.getFreeCapacity() <= 0;\r\n        },\r\n        target: creep => {\r\n            let target: StructureContainer | Creep;\r\n            target = Game.getObjectById(data.source as Id<StructureContainer> | Id<Creep>);\r\n            //if target is a creep, throw a task to call a transporter\r\n            if (!target || target instanceof Creep ) {\r\n                \r\n            }\r\n\r\n\r\n            return false;\r\n        }\r\n\r\n\r\n        \r\n\r\n    }),\r\n}","\r\nimport { basic } from \"./role/basic\";\r\n\r\n\r\n/*\r\n    creep work \r\n*/\r\n\r\nexport default class CreepExtension extends Creep {\r\n    //public work(data: SourceTargetData, role: string): void\r\n    public work(): void {\r\n        let data: SourceTargetData = {\"target\": \"aaa\", \"source\": \"ddd\"};\r\n        //const config: ICreepConfig = worker['builder'](s);\r\n        let role = '';\r\n        //---------------- GET CREEP LOGIC --------------------\r\n        //console.log(this.memory['role']);\r\n        //console.log(this.memory['data'])\r\n\r\n        const creepLogic = basic[this.memory['role']](this.memory['data'])\r\n        //const creepLogic = basic[role](data);\r\n\r\n\r\n        // ------------------------ 第二步：执行 creep 准备阶段 ------------------------\r\n\r\n        // 没准备的时候就执行准备阶段\r\n        if (!this.memory['ready']) {\r\n            // 有准备阶段配置则执行\r\n            if (creepLogic.prepare && creepLogic.isReady) {\r\n                creepLogic.prepare(this)\r\n                this.memory['ready'] = creepLogic.isReady(this)\r\n            }\r\n            // 没有就直接准备完成\r\n            else this.memory['ready'] = true\r\n            return\r\n        }\r\n\r\n        // ------------------------ 第三步：执行 creep 工作阶段 ------------------------\r\n\r\n        let stateChange = true\r\n        // 执行对应阶段\r\n        // 阶段执行结果返回 true 就说明需要更换 working 状态\r\n        if (this.memory['working']) {\r\n            if (creepLogic.target) stateChange = creepLogic.target(this)\r\n        }\r\n        else {\r\n            if (creepLogic.source) stateChange = creepLogic.source(this)\r\n        }\r\n\r\n        // 状态变化了就切换工作阶段\r\n        if (stateChange) this.memory['working'] = !this.memory['working']\r\n        }\r\n    }","import { assignPrototype } from \"@/utils\"\r\nimport CreepExtension from \"@/creep/mout.creep\"\r\n\r\n/**\r\n * 挂载 creep 拓展\r\n */\r\n\r\nexport default () => {\r\n    // 保存原始 move，在 creepExtension 里会进行修改\r\n    assignPrototype(Creep, CreepExtension)\r\n}","import {Colony} from \"./colony/Colony\"\nimport * as ColonyApi from \"./colony/ColonyApi\"\nimport {Mem} from \"./colony/Memory\"\n\nimport mountCreep from './creep'\nimport { CreepSpawning } from \"./structure/CreepSpawning\"\n/*\nColonyApi.createColony('W7N3')\n\n\n\n*/\n\n\n//Main loop\nmodule.exports.loop = function() {\n  \n  mountCreep();\n  Mem;\n  \n\n  ColonyApi;\n\n  const colony = new Colony('W7N7');\n  colony.run();\n\n  //const creepSpawning = new CreepSpawning('W8N7');\n  //console.log(creepSpawning.uid());\n    //console.log(performance.now());\n    //console.log('C' + Math.random().toString(36).substr(2,8));\n    const creep = Memory['creeps'];\n    for (let creepName in creep)  {\n      if (Game.creeps[creepName]) {\n        Game.creeps[creepName]['work']();\n        \n      }\n    }\n\n}\n"],"names":["planning.ManagerPlanner","planning.HelperVisual","utils.transformRoadToAdjacentList","utils.nearPointOne","utils.roadPath","acces.getPlanningStructurePos","utils.minDistance","utils.getId","energyAvailable","getEnergyRCL","setting.getEnergyRCL","setting.ticksToSpawn","setting.getBody","dpt_config.getEnergyRCL","dpt_config.positionToHarvest","Dpt_harvest"],"mappings":"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"}