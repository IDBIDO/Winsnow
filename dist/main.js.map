{"version":3,"file":"main.js","sources":["../src/utils.ts","../src/roomPlanning/planningUtils.ts","../src/roomPlanning/RoomPlanning.js","../src/roomPlanning/planningAcces.ts","../src/roomPlanning/TranslatePlanning.ts","../src/colony/Memory.ts","../src/creep/setting.ts","../src/structure/CreepSpawning.ts","../src/operationResearch/planningUtils.ts","../src/colony/nameManagement.ts","../src/colony/dpt_comunication.ts","../src/department/Department.ts","../src/department/dpt_config.ts","../src/department/dpt_harvest/Dpt_Harvest.ts","../src/SuperMove.js","../src/structure/Tower.ts","../src/operationResearch/OperationReserch.ts","../src/department/dpt_logistic/Dpt_Logistic.ts","../src/structure/ControllerOrder.ts","../src/department/dpt_build/Dpt_Build.ts","../src/department/dpt_upgrader/Dpt_Upgrader.ts","../src/colony/Colony.ts","../src/colony/ColonyApi.ts","../src/MemHack.js","../src/colony/planningUtils.ts","../src/creep/role/basic.ts","../src/creep/role/advanced.ts","../src/creep/role/index.ts","../src/creep/mount/mout.creep.ts","../src/creep/mount/index.ts","../src/main.ts"],"sourcesContent":["\r\n \r\n /**\r\n  * 把 obj2 的原型合并到 obj1 的原型上\r\n  * 如果原型的键以 Getter 结尾，则将会把其挂载为 getter 属性\r\n  * @param obj1 要挂载到的对象\r\n  * @param obj2 要进行挂载的对象\r\n  */\r\n export const assignPrototype = function(obj1: {[key: string]: any}, obj2: {[key: string]: any}) {\r\n     Object.getOwnPropertyNames(obj2.prototype).forEach(key => {\r\n         if (key.includes('Getter')) {\r\n             Object.defineProperty(obj1.prototype, key.split('Getter')[0], {\r\n                 get: obj2.prototype[key],\r\n                 enumerable: false,\r\n                 configurable: true\r\n             })\r\n         }\r\n         \r\n         else obj1.prototype[key] = obj2.prototype[key]\r\n     })\r\n }\r\n\r\n\r\nexport function connectedComponents(adj) {\r\n  var numVertices = adj.length\r\n  var visited = new Array(numVertices)\r\n  for(var i=0; i<numVertices; ++i) {\r\n    visited[i] = false\r\n  }\r\n  var components = []\r\n  for(var i=0; i<numVertices; ++i) {\r\n    if(visited[i]) {\r\n      continue\r\n    }\r\n    var toVisit = [i]\r\n    var cc = [i]\r\n    visited[i] = true\r\n    while(toVisit.length > 0) {\r\n      var v = toVisit.pop()\r\n      var nbhd = adj[v]\r\n      for(var j=0; j<nbhd.length; ++j) {\r\n        var u = nbhd[j]\r\n        if(!visited[u]) {\r\n          visited[u] = true\r\n          toVisit.push(u)\r\n          cc.push(u)\r\n        }\r\n      }\r\n    }\r\n    components.push(cc)\r\n  }\r\n  return components\r\n}\r\n\r\nexport function binarySearch (arr, x, start, end) {\r\n      \r\n  // Base Condition\r\n  if (start > end) return false;\r\n\r\n  // Find the middle index\r\n  let mid=Math.floor((start + end)/2);\r\n\r\n  // Compare mid with given key x\r\n  if (arr[mid]===x) return true;\r\n       \r\n  // If element at mid is greater than x,\r\n  // search in the left half of mid\r\n  if(arr[mid] > x)\r\n      return binarySearch(arr, x, start, mid-1);\r\n  else\r\n\r\n      // If element at mid is smaller than x,\r\n      // search in the right half of mid\r\n      return binarySearch(arr, x, mid+1, end);\r\n}\r\n\r\nexport function intersection(setA, setB) {\r\n  let _intersection = new Set();\r\n  for (let elem of setB) {\r\n      if (setA.has(elem)) {\r\n          _intersection.add(elem);\r\n      }\r\n  }\r\n  return _intersection;\r\n}\r\n\r\nexport function difference(setA, setB) {\r\n  let _difference = new Set(setA);\r\n  for (let elem of setB) {\r\n      _difference.delete(elem);\r\n  }\r\n  return _difference;\r\n}","import { binarySearch } from \"@/utils\";\r\nimport { max, negate, xor } from \"lodash\";\r\n\r\n\r\nexport function equalPoint(pointA: [number, number], pointB: [number, number]): boolean {\r\n    if (pointA[0] == pointB[0] && pointA[1] == pointB[1]) return true;\r\n    return false;\r\n}\r\n\r\nexport function maxTwoNumber(x:number, y: number) {\r\n    if (x >= y) return x;\r\n    return y;\r\n}\r\n\r\nexport function translatePosToNode(pos: [number, number]): number {\r\n    return pos[0]*50 + pos[1];\r\n}\r\n\r\nexport function translateNodeToPos(node: number): [number, number] {\r\n    return [Math.floor(node/50), node%50]\r\n}\r\n\r\nexport function distanceTwoPoints(pointA: [x: number, y:number], pointB: [x: number, y:number]): number {\r\n\r\n    //return Math.sqrt( (pointA[0]-pointB[0]) **2 + (pointA[1]-pointB[1]) **2 )\r\n    let x = Math.sqrt( (pointA[0]-pointB[0]) **2);\r\n    //console.log(x);\r\n    \r\n    let y = Math.sqrt( (pointA[1]-pointB[1]) **2);\r\n    //console.log(y);\r\n    \r\n    return maxTwoNumber(x, y);\r\n\r\n\r\n}\r\n\r\n/*\r\n    punto de distancia minima del listPoint un punto 'point' dado\r\n*/\r\n\r\nexport function minDistance(point: [x: number, y: number], listPoint: [x: number, y: number][]): number {\r\n    let pmim = listPoint[0];\r\n    let disMin = distanceTwoPoints(point, listPoint[0]);\r\n    let index = 0;\r\n    \r\n    for (let i = 1; i < listPoint.length; ++i) {\r\n        let aux = distanceTwoPoints(point, listPoint[i]);\r\n        if (aux < disMin) {\r\n            disMin = aux;\r\n            pmim = listPoint[i];\r\n            index = i;\r\n        }\r\n    }\r\n    //listPoint.splice(index, 1);\r\n    \r\n    return index;\r\n    //return [pmim[0], pmim[1]];\r\n}\r\n\r\n\r\n\r\nexport function transformToPoint(structurePos: number[]): Point {\r\n    \r\n    let point: Point = { \"x\": structurePos[0], \"y\":structurePos[1] };\r\n\r\n    return point;\r\n}\r\n\r\nexport function transformToPointList(model:{}) {\r\n    let toPoint = {};\r\n    for (let structureName in model) {        \r\n        toPoint[structureName] = [];\r\n        for (let i = 0; i < model[structureName].length; ++i) {\r\n            toPoint[structureName].push( transformToPoint(model[structureName][i]) );\r\n            //console.log(toPoint[structureName][i].x);\r\n            \r\n        }\r\n        \r\n    }\r\n\r\n    return toPoint;\r\n}\r\n\r\n\r\n/*\r\n    puntos de distancia 1 de un punto dado a una lista de puntos\r\n*/\r\nexport function nearPoint(point: [x: number, y: number], listPoint: [x: number, y: number][]): number[] {\r\n    \r\n    let near: number[] = [];\r\n    for (let i = 0; i < listPoint.length; ++i) {\r\n        if (distanceTwoPoints(point, listPoint[i]) == 1) {\r\n            near.push(i);\r\n        }\r\n    }\r\n    return near;\r\n}\r\n\r\nexport function nearPointOne(point: [x: number, y: number], listPoint: [x: number, y: number][]): number {\r\n    \r\n    let near: number;\r\n    for (let i = 0; i < listPoint.length; ++i) {\r\n        if (distanceTwoPoints(point, listPoint[i]) == 1) {\r\n            near = i;\r\n            break;\r\n        }\r\n    }\r\n    return near;\r\n}\r\n\r\nexport function transformRoadToAdjacentList(roadList: [x: number, y: number][]): number[][] {\r\n    let adjacentList: number[][] = [];\r\n    for (let i = 0; i < roadList.length; ++i) {\r\n        adjacentList.push(nearPoint(roadList[i], roadList));\r\n        //console.log(i , nearPoint(roadList[i], roadList));\r\n        \r\n    }\r\n    //console.log(adjacentList);\r\n    \r\n    \r\n    return adjacentList;\r\n}\r\n\r\nexport function reconstructPath(beginPoint: number, endPoint: number, prev: number[]): number[] {\r\n    let path:number[] = [];\r\n    for (let at = endPoint; at != -1; at = prev[at]) {\r\n        path.push(at)\r\n    }\r\n    path.reverse();\r\n\r\n    if (path[0] == beginPoint) {\r\n        return path;\r\n    }\r\n\r\n    return [];\r\n\r\n}\r\n\r\nexport function solveBFS(roadList: number[][], beginPoint: number): number[] {\r\n\r\n    //initialize visited array\r\n    let visited: boolean[] = Array<boolean>();\r\n    for (let i = 0; i < roadList.length; ++i) {\r\n        visited.push(false);\r\n    }\r\n\r\n    // Use an array as our queue representation:\r\n    let q: number[] = new Array<number>();\r\n\r\n    visited[beginPoint] = true;\r\n\r\n    q.push(beginPoint);\r\n\r\n    //save path\r\n    let path: number[] = new Array<number>();\r\n    path.push(beginPoint);\r\n\r\n    let prev = new Array<number>();\r\n    for (let i = 0; i < roadList.length; ++i) {\r\n        prev.push(-1);\r\n    }\r\n\r\n    while(q.length > 0) {\r\n\r\n        const v = q.shift();\r\n        for (let adjV of roadList[v]) {\r\n            if (!visited[adjV]) {\r\n                visited[adjV] = true;\r\n                q.push(adjV);\r\n                prev[adjV] = v;\r\n            }\r\n        }\r\n    }\r\n    return prev;\r\n}\r\n\r\nexport function roadPath(roadList: number[][], beginPoint: number, endPoint: number) {\r\n    let prev = solveBFS(roadList, beginPoint);\r\n\r\n    return reconstructPath(beginPoint, endPoint, prev);\r\n}\r\n\r\n//get object's ID by roomName, position and structure type\r\nexport function getId(roomName: string, pos: [number, number], structureType: string) {\r\n\r\n    //console.log(structureType);\r\n    \r\n    const position = new RoomPosition(pos[0], pos[1], roomName);\r\n    const object = position.lookFor(structureType as keyof AllLookAtTypes);\r\n    \r\n    return object[0].id;\r\n}\r\n\r\n\r\n/*\r\n    only valid if distance between two points are interger\r\n*/\r\nfunction pointsBetweenTwo(point1: [number, number], point2: [number, number]): [number, number][] {\r\n    let x = point1[0] - point2[0];\r\n    let y = point1[1] - point2[1];\r\n\r\n    const max = maxTwoNumber(Math.abs(x), Math.abs(y)) ;\r\n    const incX = -(x/max);\r\n    const incY = -(y/max);\r\n\r\n    let r = Array<[number, number]>(max);\r\n    let actualX = point1[0];\r\n    let actualY = point1[1];\r\n\r\n    for (let i = 0; i < max; ++i ) {\r\n      actualX += incX;\r\n      actualY += incY;\r\n      r[i] = [actualX, actualY];\r\n        \r\n    }\r\n    r.pop();\r\n    return r;\r\n}\r\n\r\nexport function outOfPlanning(map: boolean[][], point: number) {\r\n\r\n}\r\n\r\nexport function inMapRange(pos: [number, number]):boolean {\r\n    \r\n    if (pos[0]>= 0 && pos[0] < 50) {\r\n        if (pos[1] >= 0 && pos[1] < 50) {            \r\n            return true;            \r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n/*\r\n    negative points will ignored\r\n*/\r\nexport function nearPosition(pos: [number, number]):[number, number][] {\r\n    \r\n    let nearPoints: [number, number][] = [\r\n        [pos[0]-1, pos[1]+1], \r\n        [pos[0]-1, pos[1]], \r\n        [pos[0]-1, pos[1]-1],\r\n\r\n        [pos[0], pos[1]+1], \r\n        [pos[0], pos[1]-1], \r\n\r\n        [pos[0]+1, pos[1]+1], \r\n        [pos[0]+1, pos[1]], \r\n        [pos[0]+1, pos[1]-1], \r\n    ]\r\n    \r\n    let validNearPoints:[number, number][] = []\r\n    for (let i = 0; i < nearPoints.length; ++i) {\r\n        if (inMapRange(nearPoints[i])) {\r\n            validNearPoints.push(nearPoints[i]);\r\n        }\r\n    }\r\n\r\n    return validNearPoints;\r\n}\r\n\r\nexport function isRampartPos(roomName: string, pos: [number, number]): boolean {\r\n    \r\n    const rampartDataList = Memory['colony'][roomName]['roomPlanning']['model']['rampart'];\r\n    for (let i = 0; i < rampartDataList.length; ++i) {\r\n        if (pos[0] == rampartDataList[i]['pos'][0] && pos[1] == rampartDataList[i]['pos'][1]) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n\r\n}\r\n\r\nexport function isRampartProtectPos(roomName: string, pos: [number, number]): boolean {\r\n    const protectedPosList: number[] = Memory['colony'][roomName]['roomPlanning']['inRampartPos'];\r\n    const posNode = translatePosToNode(pos);\r\n    if (binarySearch(protectedPosList, posNode, 0, protectedPosList.length - 1 )) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function getRangePoints(point: [number, number], range: number):[number, number][] {\r\n    const angulo1: [number, number] = [point[0]-range, point[1]+ range];\r\n    const angulo2: [number, number] = [point[0]+range, point[1]+ range];\r\n    const angulo3: [number, number] = [point[0]+range, point[1]- range];\r\n    const angulo4: [number, number] = [point[0]-range, point[1]- range];\r\n\r\n    const r1 = [angulo1].concat(pointsBetweenTwo(angulo1, angulo2));\r\n    const r2 = r1.concat([angulo2].concat(pointsBetweenTwo(angulo2, angulo3)));\r\n    const r3 = r2.concat([angulo3].concat(pointsBetweenTwo(angulo3, angulo4)));\r\n    const r4 = r3.concat([angulo4].concat(pointsBetweenTwo(angulo4, angulo1)));\r\n\r\n    return r4;\r\n\r\n}\r\n","/**\r\n * 63超级扣位置自动布局\r\n * 能覆盖95% 地地形布局的覆盖\r\n * \r\n * author：6g3y,Scorpior,Scokranotes,ChenyangDu\r\n * version:1.0.8\r\n * \r\n * 【使用方法（傻瓜版）】\r\n * 1.设置4个flag，分别为对应房间的\r\n *     pc 控制器\r\n *     pm 矿\r\n *     pa pb 能量源\r\n * 2.下载63大佬的超级扣位置自动布局，解压并导入wasm二进制模块，\r\n *   命名（不要后缀）：algo_wasm_priorityqueue，确保此时文件夹中应当增了以下两个文件\r\n *     + 63超级扣位置自动布局_改良版.js\r\n *     + algo_wasm_priorityqueue.wasm\r\n * \r\n * 3.在主循环代码的末尾，也就是main.js的module.exports.loop中最后一行添加\r\n *      require(\"63超级扣位置自动布局_改良版\").run()\r\n * \r\n * 4.运行（注意截图）\r\n * 5.放一个flag名字为p，随便放哪，运行会自动检测，检测到有p这个flag就会运行，运行完成会自动删掉\r\n *   显示的时间非常短，注意截图，消失了再放一个p又会重新运行一遍，不要反复折腾完，很耗CPU\r\n * \r\n * 【使用方法（高级版）】\r\n * 1.计算位置\r\n *  [flagController,flagMineral,flagSourceA,flagSourceB]\r\n *  必须包含.pos对象 {{{ p.pos.x|y }}}\r\n * >> roomStructsData = ManagerPlanner.computeManor(p.pos.roomName,[pc,pm,pa,pb])\r\n * \r\n * 2.可视化显示\r\n * >> HelperVisual.showRoomStructures(roomStructsData.roomName,roomStructsData.structMap)\r\n * \r\n * 【结果说明】\r\n * {\r\n *       roomName: roomName\r\n *       storagePos: {x,y} //storage集群中心位置\r\n *       labPos: {x,y} //lab中心位置\r\n *       structMap:{ \"rampart\" : [[x1,y1],[x2,y2] ...] ...} \r\n *           \"建筑类型，直接用没问题的\":[[x1,y1]]\r\n *           //建造的时候按顺序就可以了 ，顺序是距离 storagePos 排序过后的（除了road）\r\n *           //具体建造多少个，使用 CONTROLLER_STRUCTURES 获取当前可以造多少\r\n * }\r\n * \r\n * \r\n * 【警告】\r\n * ！！警告！！ 确保你的bucket和可运行CPU超过100个 ！！警告！！\r\n * ！！警告！！ 确保你的bucket和可运行CPU超过100个 ！！警告！！\r\n * ！！警告！！ 确保你的bucket和可运行CPU超过100个 ！！警告！！\r\n * ！！警告！！ 确保你的bucket和可运行CPU超过100个 ！！警告！！\r\n * ！！警告！！ 确保你的bucket和可运行CPU超过100个 ！！警告！！\r\n * ！！警告！！ 确保你的bucket和可运行CPU超过100个 ！！警告！！\r\n * \r\n * \r\n * 【原理】：能跑就行有空 写篇简书\r\n * 【代码】：挺乱的 如果有机会在整理一下代码\r\n * \r\n * 【更新说明】：\r\n * 1.优化了外矿的寻路\r\n * 2.优化了塔的布局\r\n * 3.更新了说明文档\r\n * \r\n * 感谢63！\r\n * \r\n */\r\n\r\n\r\n \r\n/**\r\n *  wasm 优先队列\r\n *  帮你加速涉及优先级的调度算法\r\n *  \r\n *  author: Scorpior\r\n *  version: v1.1.0\r\n *  \r\n *  usage: \r\n *  1. add .js and .wasm modules\r\n *  2. require .js module and use\r\n *\r\n *  本人有改动！\r\n */\r\n\r\n global.structuresShape= {\r\n    \"spawn\": \"◎\",\r\n    \"extension\": \"ⓔ\",\r\n    \"link\": \"◈\",\r\n    \"road\": \"•\",\r\n    \"constructedWall\": \"▓\",\r\n    \"rampart\": \"⊙\",\r\n    \"storage\": \"▤\",\r\n    \"tower\": \"🔫\",\r\n    \"observer\": \"👀\",\r\n    \"powerSpawn\": \"❂\",\r\n    \"extractor\": \"⇌\",\r\n    \"terminal\": \"✡\",\r\n    \"lab\": \"☢\",\r\n    \"container\": \"□\",\r\n    \"nuker\": \"▲\",\r\n    \"factory\": \"☭\"\r\n}\r\nglobal.structuresColor= {\r\n    \"spawn\": \"cyan\",\r\n    \"extension\": \"#0bb118\",\r\n    \"link\": \"yellow\",\r\n    \"road\": \"#fa6f6f\",\r\n    \"constructedWall\": \"#003fff\",\r\n    \"rampart\": \"#003fff\",\r\n    \"storage\": \"yellow\",\r\n    \"tower\": \"cyan\",\r\n    \"observer\": \"yellow\",\r\n    \"powerSpawn\": \"cyan\",\r\n    \"extractor\": \"cyan\",\r\n    \"terminal\": \"yellow\",\r\n    \"lab\": \"#d500ff\",\r\n    \"container\": \"yellow\",\r\n    \"nuker\": \"cyan\",\r\n    \"factory\": \"yellow\"\r\n}\r\nlet helpervisual={\r\n    //线性同余随机数\r\n    rnd : function( seed ){\r\n    return ( seed * 9301 + 49297 ) % 233280; //为何使用这三个数?\r\n    },\r\n    // seed 的随机颜色\r\n    randomColor : function (seed){\r\n        seed = parseInt(seed)\r\n        let str = \"12334567890ABCDEF\"\r\n        let out = \"#\"\r\n        for(let i=0;i<6;i++){\r\n            seed = helpervisual.rnd(seed+Game.time%100)\r\n            out+=str[parseInt(seed)%str.length]\r\n        }\r\n        return out\r\n    },\r\n    // 大概消耗1 CPU！ 慎用！\r\n    showRoomStructures : function (roomName,structMap){\r\n        let roomStructs = new RoomArray().init()\r\n        const visual = new RoomVisual(roomName);\r\n        structMap[\"road\"].forEach(e=>roomStructs.set(e[0],e[1],\"road\"))\r\n        _.keys(CONTROLLER_STRUCTURES).forEach(struct=>{\r\n            if(struct==\"road\"){\r\n                structMap[struct].forEach(e=>{\r\n                    roomStructs.forNear((x,y,val)=>{\r\n                        if(val ==\"road\"&&((e[0]>=x&&e[1]>=y)||(e[0]>x&&e[1]<y)))visual.line(x,y,e[0],e[1],{color:structuresColor[struct]})\r\n                    },e[0],e[1]);\r\n                    visual.text(structuresShape[struct], e[0],e[1]+0.25, {color: structuresColor[struct],opacity:0.75,fontSize: 7})\r\n                })\r\n            }\r\n            else structMap[struct].forEach(e=>visual.text(structuresShape[struct], e[0],e[1]+0.25, {color: structuresColor[struct],opacity:0.75,fontSize: 7}))\r\n        })\r\n    },\r\n}\r\n\r\nexport let HelperVisual=helpervisual;\r\n\r\n\r\nclass UnionFind{\r\n\r\n    constructor(size) {\r\n        this.size  = size\r\n    }\r\n    init() {\r\n        if(!this.parent)\r\n            this.parent = new Array(this.size)\r\n        for(let i=0;i<this.size;i++){\r\n            this.parent[i]=i;\r\n        }\r\n    }\r\n    find(x) {\r\n        let r = x;\r\n        while (this.parent[r] != r) r = this.parent[r];\r\n        while (this.parent[x] != x) {\r\n            let t = this.parent[x];\r\n            this.parent[x] = r;\r\n            x = t;\r\n        }\r\n        return x;\r\n    }\r\n    union(a,b){\r\n        a = this.find(a)\r\n        b = this.find(b)\r\n        if(a>b)this.parent[a]=b;\r\n        else if(a!=b) this.parent[b]=a;\r\n    }\r\n    same(a,b){\r\n        return this.find(a) ==  this.find(b)\r\n    }\r\n}\r\n\r\n\r\nglobal.UnionFind = UnionFind\r\n\r\nlet NodeCache= []\r\nfunction NewNode(k,x,y,v){\r\n    let t\r\n    if(NodeCache.length){\r\n        t = NodeCache.pop()\r\n    }else{\r\n        t = {}\r\n    }\r\n    t.k = k\r\n    t.x = x\r\n    t.y = y\r\n    t.v = v\r\n    return t\r\n}\r\n\r\n\r\nfunction ReclaimNode(node){\r\n    if(NodeCache.length<10000)\r\n        NodeCache.push(node)\r\n}\r\n\r\n\r\n// @ts-ignore\r\nconst binary = require('algo_wasm_priorityqueue');   // 读取二进制文件\r\nconst wasmModule = new WebAssembly.Module(binary);  // 初始化为wasm类\r\n\r\n/**\r\n * \r\n * @typedef {Object} node\r\n * @property {number} k 优先级实数（可负）\r\n * \r\n * @typedef {{\r\n *      memory:{\r\n *          buffer: ArrayBuffer\r\n *      },\r\n *      init(is_min:number):void,\r\n *      push(priorty:number, id:number):void,\r\n *      pop():void,\r\n *      top():number,\r\n *      get_identifier(pointer:number):number,\r\n *      size():number,\r\n *      clear():void,\r\n *      is_empty():boolean\r\n *  }} cppQueue\r\n */\r\n\r\nclass BaseQueue {\r\n    /**\r\n     * 队列元素个数\r\n     * @returns {number}\r\n     */\r\n    size() {\r\n        // @ts-ignore\r\n        return this.instance.size();\r\n    }\r\n    /**\r\n     * 清空整个队列\r\n     */\r\n    clear() {\r\n        // @ts-ignore\r\n        this.instance.clear();\r\n    }\r\n    /**\r\n     * 队列是否为空\r\n     * @returns {boolean} 实际返回值是0或1\r\n     */\r\n    isEmpty() {\r\n        // @ts-ignore\r\n        return !this.instance.is_empty();\r\n    }\r\n}\r\n\r\n/**\r\n *  c++优先队列\r\n *  最大容量 131072 个元素（2的17次方）\r\n *  每个元素是带有priority属性的任意对象\r\n *  连续pop 100k个元素时比js队列快 80% 以上，元素个数少时比js快 5~10 倍\r\n */\r\nclass PriorityQueue extends BaseQueue {\r\n    /**\r\n     * @param {boolean} isMinRoot 优先级方向，true则pop()时得到数字最小的，否则pop()出最大的\r\n     */\r\n    constructor(isMinRoot=false) {\r\n        super();\r\n        /**@type {cppQueue} */\r\n        let instance;\r\n        /**@type {node[]} */\r\n        let cache = [];\r\n\r\n        const imports = {   // 把wasm类实例化需要的接口函数\r\n            env: {\r\n                emscripten_notify_memory_growth() {\r\n                }\r\n            },\r\n            wasi_snapshot_preview1: {\r\n                proc_exit: () => { }\r\n            }\r\n        };\r\n        // @ts-ignore\r\n        instance = new WebAssembly.Instance(wasmModule, imports).exports;   // 实例化\r\n        instance.init(+!!isMinRoot);  // !!转化为boolean, +转为数字\r\n\r\n        /**\r\n         * @param {node} node \r\n         */\r\n        this.push = (node) => {\r\n            try {\r\n                instance.push(node.k, cache.length);\r\n                cache.push(node);\r\n            } catch (e) {\r\n                if (e instanceof TypeError) {\r\n                    throw e;\r\n                } else {\r\n                    throw Error(`priorityQueue is full.\\n\\t Current size is ${instance.size()}, buffer length is ${instance.memory.buffer.byteLength * 2 / 1024}KB.`);\r\n                }\r\n            }\r\n        }\r\n        /** \r\n         *  @returns {node|undefined}\r\n         */\r\n        this.pop = () => {\r\n            if (instance.size() > 0) {\r\n                let pointer = instance.top();\r\n                let id = instance.get_identifier(pointer);\r\n                let node = cache[id];\r\n                instance.pop();\r\n                // @ts-ignore\r\n                cache[id] = undefined;\r\n                return node;\r\n            } else {\r\n                return undefined;\r\n            }\r\n        }\r\n        /**\r\n         *  @returns {node|undefined}\r\n         */\r\n        this.top = () => {\r\n            if (instance.size() > 0) {\r\n                let pointer = instance.top();\r\n                return cache[instance.get_identifier(pointer)];\r\n            } else {\r\n                return undefined;\r\n            }\r\n        }\r\n        /**\r\n         *  @returns {undefined}\r\n         */\r\n        this.whileNoEmpty = (func) => {\r\n            while (!this.isEmpty()){\r\n                let node = this.pop();\r\n                func(node)\r\n                ReclaimNode(node)\r\n            }\r\n        }\r\n\r\n        Object.defineProperty(this, 'instance', {   // 不想被枚举到\r\n            value: instance\r\n        })\r\n    }\r\n    /**\r\n     *  把节点插入队列\r\n     * @param {node} node 待插入对象，至少含有priority:k属性\r\n     */\r\n    push(node) { }\r\n    /** \r\n     *  查看顶端节点，空队列返回undefined\r\n     *  @returns {node|undefined}\r\n     */\r\n    top() { return }\r\n    /**\r\n     *  取出顶端节点，空队列返回undefined\r\n     *  @returns {node|undefined}\r\n     */\r\n    pop() { return }\r\n}\r\n\r\nglobal.PriorityQueue = PriorityQueue\r\nglobal.NewNode = NewNode\r\nglobal.ReclaimNode = ReclaimNode\r\n// module.exports = {\r\n//     PriorityQueue: PriorityQueue\r\n// }\r\n\r\n\r\nlet RoomArray_proto= {\r\n    exec(x,y,val){\r\n        let tmp = this.arr[x*50+y]\r\n        this.set(x,y,val);\r\n        return tmp\r\n    },\r\n    get(x,y){\r\n        return this.arr[x*50+y];\r\n    },\r\n    set(x,y,value){\r\n        this.arr[x*50+y]=value;\r\n    },\r\n    init(){\r\n        if(!this.arr)\r\n            this.arr = new Array(50*50)\r\n        for(let i=0;i<2500;i++){\r\n            this.arr[i]=0;\r\n        }\r\n        return this;\r\n    },\r\n    forEach(func){\r\n        for(let y = 0; y < 50; y++) {\r\n            for(let x = 0; x < 50; x++) {\r\n                func(x,y,this.get(x,y))\r\n            }\r\n        }\r\n    },\r\n    for4Direction(func,x,y,range=1){\r\n        for(let e of [[1,0],[-1,0],[0,1],[0,-1]]){\r\n            let xt=x+e[0]\r\n            let yt=y+e[1]\r\n            if(xt>=0&&yt>=0&&xt<=49&&yt<=49)\r\n                func(xt,yt,this.get(xt,yt))\r\n        }\r\n    },\r\n    forNear(func,x,y,range=1){\r\n        for(let i=-range;i<=range;i++){\r\n            for(let j=-range;j<=range;j++){\r\n                let xt=x+i\r\n                let yt=y+j\r\n                if((i||j)&&xt>=0&&yt>=0&&xt<=49&&yt<=49)\r\n                    func(xt,yt,this.get(xt,yt))\r\n            }\r\n        }\r\n    },\r\n    forBorder(func,range=1){\r\n        for(let y = 0; y < 50; y++) {\r\n            func(0,y,this.get(0,y))\r\n            func(49,y,this.get(49,y))\r\n        }\r\n        for(let x = 1; x < 49; x++) {\r\n            func(x,0,this.get(x,0))\r\n            func(x,49,this.get(x,49))\r\n        }\r\n    },\r\n    initRoomTerrainWalkAble(roomName){\r\n        let terrain = new Room.Terrain(roomName);\r\n        this.forEach((x,y)=> this.set(x,y, terrain.get(x,y)==1?0:terrain.get(x,y)==0?1:2))\r\n    }\r\n}\r\nclass RoomArray {\r\n    constructor(){\r\n        this.__proto__ = RoomArray_proto\r\n    }\r\n}\r\n\r\n\r\nglobal.minPlaneCnt = 140 // 内部布局最小面积！ 试过了，140是 基本上最低配置了\r\n\r\nlet visited = new RoomArray()\r\nlet roomWalkable = new RoomArray()\r\nlet nearWall = new RoomArray()\r\nlet routeDistance = new RoomArray()\r\nlet roomObjectCache = new RoomArray()\r\n\r\nlet nearWallWithInterpolation= new RoomArray()\r\nlet interpolation = new RoomArray()\r\n\r\nlet queMin = new PriorityQueue(true)\r\nlet queMin2 = new PriorityQueue(true)\r\nlet startPoint = new PriorityQueue(true)\r\n\r\nlet unionFind = new UnionFind(50*50);\r\n\r\n/**\r\n * controller mineral source posList\r\n */\r\nlet objects = []\r\n\r\nlet pro={\r\n    /**\r\n     * https://www.bookstack.cn/read/node-in-debugging/2.2heapdump.md\r\n     * 防止内存泄漏！！！！\r\n     * 闭包太多，改不动了\r\n     */\r\n    init  (){\r\n        visited = new RoomArray()\r\n        roomWalkable = new RoomArray()\r\n        nearWall = new RoomArray()\r\n        routeDistance = new RoomArray()\r\n\r\n        nearWallWithInterpolation= new RoomArray()\r\n        interpolation = new RoomArray()\r\n        roomObjectCache = new RoomArray()\r\n\r\n        queMin = new PriorityQueue(true)\r\n        queMin2 = new PriorityQueue(true)\r\n        startPoint = new PriorityQueue(true)\r\n\r\n        unionFind = new UnionFind(50*50);\r\n\r\n\r\n        visited.init()\r\n        nearWall.init()\r\n        routeDistance.init()\r\n        roomWalkable.init()\r\n\r\n        nearWallWithInterpolation.init()\r\n        interpolation.init()\r\n        roomObjectCache.init()\r\n        unionFind.init()\r\n\r\n        queMin.clear()\r\n        queMin2.clear()\r\n        startPoint.clear()\r\n    },\r\n    /**\r\n     * 防止内存泄漏！！！！\r\n     */\r\n    dismiss (){\r\n        visited = null\r\n        roomWalkable = null\r\n        nearWall = null\r\n        routeDistance = null\r\n        roomObjectCache = null\r\n\r\n        nearWallWithInterpolation= null\r\n        interpolation = null\r\n\r\n        queMin = null\r\n        queMin2 = null\r\n        startPoint = null\r\n\r\n        unionFind = null\r\n        objects= []\r\n    },\r\n    /**\r\n     * 计算区块的最大性能指标 ，性能消耗的大头！\r\n     * 优化不动了\r\n     */\r\n    getBlockPutAbleCnt (roomWalkable,visited,queMin,unionFind,tarRoot,putAbleCacheMap,AllCacheMap){\r\n        if(putAbleCacheMap[tarRoot])return [putAbleCacheMap[tarRoot],AllCacheMap[tarRoot]]\r\n        // let t = Game.cpu.getUsed() //这很吃性能，但是是必须的\r\n        let roomManor = routeDistance\r\n        roomManor.init()\r\n        roomManor.forEach((x, y, val)=>{if(tarRoot==unionFind.find(x*50+y)){roomManor.set(x,y,1)}})\r\n        roomManor.forEach((x, y, val)=>{\r\n            if(val){\r\n                let manorCnt = 0\r\n                let wallCnt = 0\r\n                roomManor.for4Direction((x1,y1,val1)=>{\r\n                    if(val1)manorCnt+=1\r\n                    if(!roomWalkable.get(x1,y1))wallCnt+=1\r\n                },x,y)\r\n                if(manorCnt==1&&wallCnt == 0)roomManor.set(x,y,0)\r\n            }\r\n        })\r\n        let dfsMoreManor = function (x,y,val){\r\n            if(!val&&roomWalkable.get(x,y)){\r\n                let manorCnt = 0\r\n                let wallCnt = 0\r\n                roomManor.for4Direction((x1,y1,val1)=>{\r\n                    if(val1)manorCnt+=1\r\n                    if(!roomWalkable.get(x1,y1))wallCnt+=1\r\n                },x,y)\r\n                if(manorCnt>=2||manorCnt==1&&wallCnt>=2){\r\n                    roomManor.set(x,y,1)\r\n                    roomManor.for4Direction((x1,y1,val1)=>{\r\n                        dfsMoreManor(x1,y1,val1)\r\n                    },x,y)\r\n                }\r\n            }\r\n        }\r\n        roomManor.forEach((x, y, val)=>{dfsMoreManor(x,y,val)})\r\n        roomWalkable.forBorder((x,y,val)=>{\r\n            if(val){\r\n                roomManor.forNear((x,y,val)=>{\r\n                    roomManor.set(x,y,0)\r\n                },x,y)\r\n                roomManor.set(x,y,0)\r\n            }\r\n        })\r\n\r\n        let innerPutAbleList = []\r\n        let AllCacheList = []\r\n\r\n\r\n            // &&!roomObjectCache.get(x,y)\r\n        visited.init()/*\r\n        roomWalkable.forEach((x, y, val)=>{\r\n            if(!roomManor.get(x,y)||roomObjectCache.get(x,y)) {\r\n                // const visual = new RoomVisual(\"W3N6\");\r\n                // if(roomObjectCache.get(x,y))visual.text(val&&!roomObjectCache.get(x,y)?-4:-1, x,y+0.25, {color: 'red',opacity:0.99,font: 7})\r\n                // queMin.push(NewNode(val&&!roomObjectCache.get(x,y)?-4:-1,x,y));\r\n                let innerWall = false //在墙上的时候要退一格子\r\n                if(roomObjectCache.get(x,y)){\r\n                    roomManor.forNear((x,y,val)=>{if(!val&&roomWalkable.get(x,y))innerWall=true},x,y)\r\n                }\r\n                queMin.push(NewNode(val?((roomObjectCache.get(x,y)&&!innerWall)?-1:-4):-1,x,y));\r\n                // visited.set(x,y,1) 这里不能设置visited 因为 -4 和-1 优先级不同 如果 -4距离和-1比较，-1会抢走-4 导致 rangeAttack打得到\r\n            }\r\n        })*/\r\n\r\n        roomWalkable.forEach((x, y, val)=>{\r\n            if(!roomManor.get(x,y)) {\r\n                queMin.push(NewNode(val?-4:-1,x,y));\r\n                // visited.set(x,y,1) 这里不能设置visited 因为 -4 和-1 优先级不同 如果 -4距离和-1比较，-1会抢走-4 导致 rangeAttack打得到\r\n            }\r\n        })\r\n\r\n        // let t = Game.cpu.getUsed() //这很吃性能，真的优化不动了\r\n\r\n        queMin.whileNoEmpty(nd=>{\r\n            let func = function (x,y,val){\r\n                let item = NewNode(nd.k+2,x,y);\r\n                if(!visited.exec(x,y,1)){\r\n                    queMin.push(NewNode(nd.k+1,x,y))\r\n                    if(roomManor.get(x,y)){\r\n                        if(nd.k+1>=0&&val){\r\n                            innerPutAbleList.push(item)\r\n                            // visual.text(nd.k+2, x,y+0.25, {color: 'red',opacity:0.99,font: 7})\r\n                        }\r\n                        if(val)\r\n                            AllCacheList.push(item)\r\n                    }\r\n                }\r\n            }\r\n            visited.set(nd.x,nd.y,1)\r\n            if(nd.k>=-1)\r\n                roomWalkable.for4Direction(func,nd.x,nd.y)\r\n            else\r\n                roomWalkable.forNear(func,nd.x,nd.y)\r\n        })\r\n\r\n        // console.log(Game.cpu.getUsed()-t)\r\n\r\n        putAbleCacheMap[tarRoot] = innerPutAbleList\r\n        AllCacheMap[tarRoot] = AllCacheList\r\n        return [putAbleCacheMap[tarRoot],AllCacheMap[tarRoot]]\r\n    },\r\n    /**\r\n     * 插值，计算区块的预处理和合并需求\r\n     * @param roomName\r\n     */\r\n    computeBlock (roomName){\r\n        const visual = new RoomVisual(roomName);\r\n\r\n        roomWalkable.initRoomTerrainWalkAble(roomName)\r\n        roomWalkable.initRoomTerrainWalkAble(roomName)\r\n\r\n        //计算距离山体要多远\r\n        roomWalkable.forEach((x,y,val)=>{if(!val){queMin.push(NewNode(0,x,y));visited.set(x,y,1)}})\r\n        queMin.whileNoEmpty(nd=>{\r\n            roomWalkable.for4Direction((x,y,val)=>{\r\n                if(!visited.exec(x,y,1)&&val){\r\n                    queMin.push(NewNode(nd.k+1,x,y))\r\n                }\r\n            },nd.x,nd.y)\r\n            nearWall.exec(nd.x,nd.y,nd.k)\r\n        })\r\n\r\n        //距离出口一格不能放墙\r\n        roomWalkable.forBorder((x,y,val)=>{\r\n            if(val){\r\n                roomWalkable.forNear((x,y,val)=>{\r\n                    if(val){\r\n                        // roomWalkable.set(x,y,0);\r\n                        nearWall.set(x,y,50);\r\n                        queMin.push(NewNode(0,x,y));\r\n                        // visited.set(x,y,1)\r\n                    }\r\n                },x,y)\r\n                // roomWalkable.set(x,y,0);\r\n                queMin.push(NewNode(0,x,y));\r\n                nearWall.set(x,y,50)\r\n                // visited.set(x,y,1)\r\n            }\r\n        })\r\n\r\n        let roomPutAble = routeDistance\r\n        roomPutAble.initRoomTerrainWalkAble(roomName)\r\n        roomWalkable.forBorder((x,y,val)=>{\r\n            if(val){\r\n                roomWalkable.forNear((x,y,val)=>{\r\n                    if(val){\r\n                        roomPutAble.set(x,y,0)\r\n                    }\r\n                },x,y)\r\n                roomPutAble.set(x,y,0)\r\n            }\r\n        })\r\n        // 计算 控制器，矿物的位置\r\n        let getObjectPos =function(x,y,struct){\r\n            let put = false\r\n            let finalX = 0\r\n            let finalY = 0\r\n            roomPutAble.for4Direction((x,y,val)=>{\r\n                if(val&&!put&&!roomObjectCache.get(x,y)){\r\n                    finalX = x\r\n                    finalY = y\r\n                    put = true\r\n                }\r\n            },x,y)\r\n            roomPutAble.forNear((x,y,val)=>{\r\n                if(val&&!put&&!roomObjectCache.get(x,y)){\r\n                    finalX = x\r\n                    finalY = y\r\n                    put = true\r\n                }\r\n            },x,y)\r\n            roomObjectCache.set(finalX,finalY,struct)\r\n            return [finalX,finalY]\r\n        }\r\n        for(let i=0;i<objects.length;i++){\r\n            let pos = objects[i]\r\n            //container 位置\r\n            let p = getObjectPos(pos.x,pos.y,\"container\")\r\n\r\n            // link 位置\r\n            if(i!=1){\r\n                let linkPos = getObjectPos(p[0],p[1],\"link\")\r\n                roomObjectCache.link = roomObjectCache.link || []\r\n                roomObjectCache.link.push(linkPos) // link controller 然后是  source\r\n            }else{\r\n                roomObjectCache.extractor = [[pos.x,pos.y]]\r\n            }\r\n            roomObjectCache.container = roomObjectCache.container || []\r\n            if(i!=1)roomObjectCache.container.unshift(p) //如果是 mineral 最后一个\r\n            else roomObjectCache.container.push(p)\r\n        }\r\n\r\n        //插值，这里用拉普拉斯矩阵，对nearWall 插值 成 nearWallWithInterpolation\r\n        nearWall.forEach((x,y,val)=>{\r\n            let value = -4*val\r\n            nearWall.for4Direction((x,y,val)=>{\r\n                value += val\r\n            },x,y)\r\n            interpolation.set(x,y,value)\r\n            if(value>0)value=0;\r\n            if(val&&roomWalkable.get(x,y))nearWallWithInterpolation.set(x,y,val+value*0.1)\r\n        })\r\n\r\n\r\n        // 计算距离出口多远\r\n        visited.init()\r\n        routeDistance.init()\r\n        queMin.whileNoEmpty(nd=>{\r\n            roomWalkable.forNear((x,y,val)=>{\r\n                if(!visited.exec(x,y,1)&&val){\r\n                    queMin.push(NewNode(nd.k+1,x,y))\r\n                }\r\n            },nd.x,nd.y)\r\n            routeDistance.set(nd.x,nd.y,nd.k)\r\n        })\r\n\r\n        // 对距离的格子插入到队列 ，作为分开的顺序\r\n        routeDistance.forEach((x,y,val)=>{\r\n            if(!roomWalkable.get(x,y))return\r\n            if(val)startPoint.push(NewNode(-val,x,y))\r\n        })\r\n\r\n\r\n        let sizeMap = {}\r\n        let posSeqMap = {}\r\n\r\n        // 分块，将地图分成一小块一小块\r\n        visited.init()\r\n        for(let i=0;i<100000;i++){\r\n            if(startPoint.isEmpty())break;\r\n            let cnt = 0\r\n            // let color = randomColor(i)\r\n            let nd = startPoint.pop()\r\n            let currentPos = nd.x*50+nd.y\r\n            let posSeq = []\r\n\r\n            //搜索分块\r\n            let dfsFindDown = function (roomArray,x,y){\r\n                let currentValue = roomArray.get(x,y)\r\n                if(!visited.exec(x,y,1)){\r\n                    roomArray.for4Direction((x1,y1,val)=>{\r\n                        if(val&&(x1==x||y1==y) &&val<currentValue){\r\n                            dfsFindDown(roomArray,x1,y1)\r\n                        }\r\n                    },x,y)\r\n                    cnt++\r\n                    // visual.circle(x,y, {fill: color, radius: 0.5 ,opacity : 0.5})\r\n                    let pos = x*50+y\r\n                    posSeq.push(pos)\r\n                    unionFind.union(currentPos,pos)\r\n                }\r\n            }\r\n\r\n            // 跑到最高点\r\n            let dfsFindUp = function (roomArray,x,y){\r\n                let currentValue = roomArray.get(x,y)\r\n                if(!visited.exec(x,y,1)){\r\n                    roomArray.forNear((x1,y1,val)=>{\r\n                        if(val>currentValue&&currentValue<6){ //加了一点优化，小于时分裂更过\r\n                            dfsFindUp(roomArray,x1,y1)\r\n                        }\r\n                        else if(val&&val<currentValue){\r\n                            dfsFindDown(roomArray,x1,y1)\r\n                        }\r\n                    },x,y)\r\n                    cnt++\r\n                    // visual.circle(x,y, {fill: color, radius: 0.5 ,opacity : 0.5})\r\n                    let pos = x*50+y\r\n                    posSeq.push(pos)\r\n                    unionFind.union(currentPos,pos)\r\n                }\r\n            }\r\n            dfsFindUp(nearWallWithInterpolation,nd.x,nd.y)\r\n\r\n            //记录每一块的位置和大小 以 并查集的根节点 作为记录点\r\n            if(cnt>0){\r\n                let pos = unionFind.find(currentPos);\r\n                // queMin.push({k:cnt,v:pos})\r\n                queMin.push(NewNode(cnt,0,0,pos))\r\n                sizeMap[pos] = cnt\r\n                posSeqMap[pos] = posSeq\r\n            }\r\n        }\r\n\r\n        // 将出口附近的块删掉\r\n        roomWalkable.forBorder((x,y,val)=>{\r\n            if(val){\r\n                roomWalkable.forNear((x,y,val)=>{\r\n                    if(val){\r\n                        let pos = unionFind.find(x*50+y);\r\n                        if(sizeMap[pos]) delete sizeMap[pos]\r\n                    }\r\n                },x,y)\r\n                let pos = unionFind.find(x*50+y);\r\n                if(sizeMap[pos]) delete sizeMap[pos]\r\n            }\r\n        })\r\n\r\n        let putAbleCacheMap = {}\r\n        let allCacheMap = {}\r\n        // let i = 0\r\n        // 合并小块成大块的\r\n        queMin.whileNoEmpty(nd=>{\r\n            let pos = nd.v;\r\n            if(nd.k != sizeMap[pos])return;// 已经被合并了\r\n            // i++;\r\n\r\n            visited.init()\r\n            let nearCntMap={}\r\n            let allNearCnt = 0\r\n\r\n            //搜索附近的块\r\n            posSeqMap[pos].forEach(e=>{\r\n                let y = e%50;\r\n                let x = ((e-y)/50);//Math.round\r\n                roomWalkable.forNear((x,y,val)=>{\r\n                    if(val&&!visited.exec(x,y,1)){\r\n                        let currentPos = unionFind.find(x*50+y);\r\n                        if(currentPos == pos)return;\r\n                        allNearCnt+=1\r\n                        // if(i==104)\r\n                        // visual.text(parseInt(1*10)/10, x,y+0.25, {color: \"cyan\",opacity:0.99,font: 7})\r\n                        let currentSize = sizeMap[currentPos];\r\n                        if(currentSize<300){\r\n                            nearCntMap[currentPos]=(nearCntMap[currentPos]||0)+1;\r\n                        }\r\n                    }\r\n                },x,y)\r\n            })\r\n\r\n            let targetPos = undefined;\r\n            let nearCnt = 0;\r\n            let maxRatio = 0;\r\n\r\n            // 找出合并附近最优的块\r\n            _.keys(nearCntMap).forEach(currentPos=>{\r\n                let currentRatio = nearCntMap[currentPos]/Math.sqrt(Math.min(sizeMap[currentPos],nd.k))//实际/期望\r\n                if( currentRatio == maxRatio ? sizeMap[currentPos]<sizeMap[targetPos]:currentRatio > maxRatio){\r\n                    targetPos = currentPos;\r\n                    maxRatio = currentRatio;\r\n                    nearCnt = nearCntMap[currentPos];\r\n                }\r\n            })\r\n            _.keys(nearCntMap).forEach(currentPos=>{\r\n                if(nearCnt < nearCntMap[currentPos]){\r\n                    targetPos = currentPos;\r\n                    nearCnt = nearCntMap[currentPos];\r\n                }\r\n            })\r\n            let minSize = sizeMap[targetPos];\r\n            let cnt = nd.k+minSize;\r\n            // let nearRatio =nearCntMap[targetPos]/allNearCnt;\r\n\r\n            let targetBlockPutAbleCnt = 0\r\n            let ndkBlockPutAbleCnt = 0\r\n            if(minSize>minPlaneCnt)\r\n                targetBlockPutAbleCnt = pro.getBlockPutAbleCnt(roomWalkable,visited,queMin2,unionFind,targetPos,putAbleCacheMap,allCacheMap)[0].length\r\n            if(nd.k>minPlaneCnt)\r\n                ndkBlockPutAbleCnt = pro.getBlockPutAbleCnt(roomWalkable, visited, queMin2, unionFind, nd.v,putAbleCacheMap,allCacheMap)[0].length\r\n\r\n            // if(targetBlockPutAbleCnt||ndkBlockPutAbleCnt)clog(targetBlockPutAbleCnt,ndkBlockPutAbleCnt)\r\n            // 打印中间变量\r\n            // if(targetPos&&cnt>50&&(targetBlockPutAbleCnt||ndkBlockPutAbleCnt)){\r\n            //     let y = pos%50\r\n            //     let x = Math.round((pos-y)/50)\r\n            //     let y1 = targetPos%50\r\n            //     let x1 = Math.round((targetPos-y1)/50)\r\n            //     visual.line(x,y,x1,y1)\r\n            //     // visual.text(nd.k+\"+\"+minSize+\"=\"+cnt, (x+x1)/2,(y+y1)/2-0.25, {color: \"red\",opacity:0.99,font: 7})\r\n            //     // visual.text(allNearCnt+\"_\"+nearCntMap[targetPos]+\" \"+nearCnt+\" \"+parseInt(nearCnt/Math.sqrt(Math.min(minSize,nd.k))*100)/100+\" \"+parseInt(maxRatio-Math.sqrt(nd.k)/12*100)/100, (x+x1)/2,(y+y1)/2+0.25, {color: \"yellow\",opacity:0.99,font: 7})\r\n            //     visual.text(parseInt(targetBlockPutAbleCnt*100)/100+\" \"+parseInt(ndkBlockPutAbleCnt*100)/100, (x+x1)/2,(y+y1)/2+0.25, {color: \"yellow\",opacity:0.99,font: 7})\r\n            // }\r\n\r\n            // if(targetPos&&((cnt<=250&&maxRatio>0.7)||(cnt<=300&&maxRatio>0.8)||(cnt<=350&&maxRatio>0.9)||(maxRatio>1&&cnt<400)||nd.k<=10)){//||maxRatio>1.5\r\n            // if(targetPos&&(maxRatio-cnt/500>0.2&&cnt<400)){//||maxRatio>1.5\r\n\r\n            // cnt = targetBlockPutAbleCnt+ndkBlockPutAbleCnt;\r\n            // 合并\r\n            if(targetPos&&Math.max(targetBlockPutAbleCnt,ndkBlockPutAbleCnt)<minPlaneCnt){//&&(maxRatio-Math.sqrt(cnt)/20>=0||(nearRatio>0.7&&nd.k<100))\r\n            // if(targetPos&&(cnt<300||Math.min(nd.k,minSize)<150)&&(maxRatio-Math.sqrt(cnt)/20>=0||Math.max(nd.k,minSize)<200||(nearRatio>0.7&&nd.k<100))){//*Math.sqrt(nearRatio)\r\n\r\n\r\n                unionFind.union(pos,targetPos);\r\n                nd.v = unionFind.find(pos);\r\n\r\n                if(pos != nd.v) delete sizeMap[pos];\r\n                else delete sizeMap[targetPos];\r\n\r\n                nd.k = cnt;\r\n                sizeMap[nd.v] = cnt;\r\n                posSeqMap[nd.v] = posSeqMap[targetPos].concat(posSeqMap[pos])\r\n                delete putAbleCacheMap[nd.v]\r\n                delete putAbleCacheMap[targetPos]\r\n                if(pos != nd.v) delete posSeqMap[pos];\r\n                else delete posSeqMap[targetPos];\r\n                queMin.push(NewNode(nd.k,nd.x,nd.y,nd.v));\r\n            }\r\n\r\n        })\r\n        // 打印结果\r\n\r\n        // const visual = new RoomVisual(roomName);\r\n        // _.keys(sizeMap).forEach(e=>{\r\n        //     let y = e%50\r\n        //     let x = ((e-y)/50)//Math.round\r\n        //     let color = \"red\"\r\n        //     let cnt = pro.getBlockPutAbleCnt(roomWalkable,visited,queMin2,unionFind,e,putAbleCacheMap).length\r\n        //     pro.getBlockPutAbleCnt(roomWalkable,visited,queMin2,unionFind,e,putAbleCacheMap).forEach(t=>{\r\n        //         visual.circle(t.x, t.y, {fill: randomColor(e), radius: 0.5 ,opacity : 0.35})\r\n        //     })\r\n        //     // let cnt = sizeMap[e]\r\n        //     if(sizeMap[e]>0)visual.text(parseInt(cnt*10)/10, x,y+0.25, {color: color,opacity:0.99,font: 7})\r\n        // })\r\n\r\n        // roomWalkable.forEach((x, y, val)=>{if(val>0&&sizeMap[unionFind.find(x*50+y)]>0)visual.circle(x, y, {fill: randomColor(unionFind.find(x*50+y)), radius: 0.5 ,opacity : 0.15})})\r\n\r\n\r\n        // 打印中间变量\r\n        // nearWallWithInterpolation.forEach((x, y, val)=>{if(val>0)visual.circle(x, y, {fill: \"#ff9797\", radius: 0.5 ,opacity : 0.05*val+0.01})})\r\n        // nearWall.forEach((x, y, val)=>{if(val)visual.text(parseInt(val*10)/10, x,y+0.25, {color: \"red\",opacity:0.5,font: 7})})\r\n\r\n        return [unionFind,sizeMap,roomWalkable,nearWall,putAbleCacheMap,allCacheMap]\r\n\r\n    },\r\n    /**\r\n     * 计算 分布图\r\n     * 计算建筑的位置\r\n     * @param roomName,\r\n     * @param points [flagController,flagMineral,flagSourceA,flagSourceB]\r\n     * @return result { roomName:roomName,storagePos:{x,y},labPos:{x,y},structMap:{ \"rampart\" : [[x1,y1],[x2,y2] ...] ...} }\r\n     */\r\n    computeManor (roomName,points){\r\n        pro.init()\r\n        for(let p of points){\r\n            if(p.pos&&p.pos.roomName==roomName)objects.push(p.pos)\r\n        }\r\n        // const visual = new RoomVisual(roomName);\r\n        let blockArray = pro.computeBlock(roomName)\r\n        let unionFind = blockArray[0]\r\n        let sizeMap = blockArray[1]\r\n        let wallMap = {}\r\n        let roomWalkable = blockArray[2]\r\n        let nearWall = blockArray[3]\r\n        let putAbleCacheMap = blockArray[4]\r\n        let allCacheMap = blockArray[5]\r\n\r\n        let roomManor = interpolation\r\n        let roomStructs = nearWallWithInterpolation\r\n\r\n\r\n        roomManor.init()\r\n        roomStructs.init()\r\n\r\n        // let closeToWall = new RoomArray()\r\n        nearWall.init()\r\n\r\n        // let queMin = new PriorityQueue(true)\r\n        queMin.clear()\r\n        // let visited = new RoomArray()\r\n\r\n        let finalPos = undefined;\r\n        let wallCnt = 1e9;\r\n        let putAbleList = []\r\n        let innerPutAbleList = []\r\n\r\n        let centerX = undefined;\r\n        let centerY = undefined;\r\n        _.keys(sizeMap).forEach(pos=>{\r\n            // if(sizeMap[pos]<150)return\r\n            pro.getBlockPutAbleCnt(roomWalkable, visited, queMin, unionFind, pos,putAbleCacheMap,allCacheMap)\r\n            let currentPutAbleList = putAbleCacheMap[pos]\r\n            let allList = allCacheMap[pos]\r\n            if(currentPutAbleList.length<minPlaneCnt)return\r\n\r\n            wallMap[pos] = []\r\n\r\n            visited.init()\r\n            roomWalkable.forBorder((x,y,val)=>{if(val){queMin.push(NewNode(0,x,y));visited.set(x,y,1)}})\r\n\r\n            let roomManor = routeDistance //当前的Manor\r\n            roomManor.init()\r\n            allList.forEach(e=>{\r\n                roomManor.set(e.x,e.y,1)\r\n            })\r\n            // currentPutAbleList.forEach(e=>visual.text(e.k, e.x,e.y+0.25, {color: 'red',opacity:0.99,font: 7}))\r\n\r\n            queMin.whileNoEmpty(nd=>{\r\n                if(!roomManor.get(nd.x,nd.y))\r\n                roomWalkable.forNear((x,y,val)=>{\r\n                    if(!visited.exec(x,y,1)&&val){\r\n                        if(!roomManor.get(x,y))\r\n                            queMin.push(NewNode(nd.k+1,x,y))\r\n                        else{\r\n                            wallMap[pos].push(NewNode(0,x,y))\r\n                            // visual.text('X', x,y+0.25, {color: 'red',opacity:0.99,font: 7})\r\n                        }\r\n                    }\r\n                },nd.x,nd.y)\r\n            })\r\n\r\n            // wallMap[pos].forEach(xy=>queMin.push(NewNode(0,xy.x,xy.y)))\r\n\r\n            let currentInnerPutAbleList = currentPutAbleList\r\n\r\n            let maxDist = 0;\r\n            let filter2 = currentInnerPutAbleList.filter(e=>e.k>2);\r\n            if (filter2.length < 30) {\r\n                filter2.forEach(a=>{\r\n                    filter2.forEach(b=>{\r\n                        maxDist = Math.max(maxDist,Math.abs(a.x-b.x)+Math.abs(a.y-b.y))\r\n                    })\r\n                })\r\n            }\r\n\r\n            let currentWallCnt = wallMap[pos].length;\r\n            // {\r\n            //     let y = pos%50\r\n            //     let x = ((pos-y)/50)//Math.round\r\n            //     visual.text(parseInt((allList.length)*10)/10, x,y, {color: \"yellow\",opacity:0.99,font: 7})\r\n            //     visual.text(parseInt((currentPutAbleList.length)*10)/10, x,y+0.5, {color: \"red\",opacity:0.99,font: 7})\r\n            //     visual.text(parseInt((currentInnerPutAbleList.length)*10)/10, x,y+1, {color: \"red\",opacity:0.99,font: 7})\r\n            // }\r\n            if(minPlaneCnt<currentPutAbleList.length&&wallCnt>currentWallCnt&&(currentInnerPutAbleList.filter(e=>e.k>1).length>30||maxDist>5)){\r\n                putAbleList = currentPutAbleList\r\n                innerPutAbleList = currentInnerPutAbleList\r\n                wallCnt = currentWallCnt\r\n                finalPos = pos\r\n                centerX = currentPutAbleList.map(e=>e.x).reduce((a,b)=>a+b)/currentPutAbleList.length;\r\n                centerY = currentPutAbleList.map(e=>e.y).reduce((a,b)=>a+b)/currentPutAbleList.length;\r\n            }\r\n\r\n            // allCacheMap[pos].forEach(t=>{\r\n            //     visual.circle(t.x, t.y, {fill: randomColor(pos), radius: 0.5 ,opacity : 0.15})\r\n            // })\r\n        })\r\n\r\n        if(!putAbleCacheMap[finalPos])\r\n            return\r\n\r\n        let walls = wallMap[finalPos]\r\n\r\n\r\n        roomManor.init()\r\n        allCacheMap[finalPos].forEach(e=>{\r\n            roomManor.set(e.x,e.y,-1)\r\n        })\r\n        innerPutAbleList.forEach(e=>{\r\n            roomManor.set(e.x,e.y,e.k)\r\n        })\r\n\r\n        // visited.init()\r\n        // roomWalkable.forEach((x, y, val)=>{if(!roomManor.get(x,y)){queMin.push(NewNode(val?-3:-1,x,y));visited.set(x,y,1)}})\r\n\r\n\r\n\r\n        let storageX = 0\r\n        let storageY = 0\r\n        let storageDistance = 100\r\n\r\n        // innerPutAbleList.forEach(e=>visual.text(e.k, e.x,e.y+0.25, {color: 'red',opacity:0.99,font: 7}))\r\n        innerPutAbleList.filter(e=>e.k>2).forEach(e=>{\r\n            let x =e.x\r\n            let y =e.y\r\n            let detX= centerX-x\r\n            let detY= centerY-y\r\n            let distance = Math.sqrt(detX*detX+detY*detY)\r\n            if(storageDistance>distance){\r\n                storageDistance = distance\r\n                storageX = x\r\n                storageY = y\r\n            }\r\n        })\r\n\r\n\r\n        if(Game.flags.storagePos){\r\n            storageX = Game.flags.storagePos.pos.x;\r\n            storageY = Game.flags.storagePos.pos.y;\r\n        }\r\n\r\n        let labX = 0\r\n        let labY = 0\r\n        let labDistance = 1e5\r\n        innerPutAbleList.filter(e=>e.k>4).forEach(e=>{\r\n            let x =e.x\r\n            let y =e.y\r\n            let detX= centerX-x\r\n            let detY= centerY-y\r\n            let distance = Math.sqrt(detX*detX+detY*detY)\r\n\r\n            if(labDistance>distance&&Math.abs(x-storageX)+Math.abs(y-storageY)>5){\r\n                labDistance = distance\r\n                labX = x\r\n                labY = y\r\n            }\r\n        })\r\n\r\n        roomManor.forEach((x,y,val)=>{\r\n            if(val>=2){\r\n                // if(roomManor.get(x,y)>0&&Math.abs(x-storageX)+Math.abs(y-storageY)>2)\r\n                    // visual.text(val, x,y+0.25, {color: 'cyan',opacity:0.99,font: 7})\r\n                let distance = Math.sqrt(Math.pow(centerX-x-0.5,2)+Math.pow(centerY-y-0.5,2))\r\n                if(labDistance<=distance) return;\r\n                let checkCnt = 0;\r\n                let check=function (x,y){\r\n                    if(roomManor.get(x,y)>0&&Math.abs(x-storageX)+Math.abs(y-storageY)>2){\r\n                        checkCnt+=1;\r\n                    }\r\n                }\r\n                for(let i=-1;i<3;i++)\r\n                    for(let j=-1;j<3;j++)\r\n                        check(x+i,y+j);\r\n                if(checkCnt==16){\r\n                    labDistance = distance\r\n                    labX = x\r\n                    labY = y\r\n                }\r\n            }\r\n        })\r\n\r\n\r\n        // visual.text(\"C\", centerX,centerY+0.25, {color: 'green',opacity:0.99,font: 7})\r\n        // visual.text(\"S\", storageX,storageY+0.25, {color: 'blue',opacity:0.99,font: 7})\r\n        // visual.text(\"L\", labX+0.5,labY+0.75, {color: 'blue',opacity:0.99,font: 7})\r\n        // clog(roomName)\r\n\r\n        // clog(roomName,storageX,storageY,labX,labY,innerPutAbleList.length,wallCnt,finalPos)\r\n        // clog(innerPutAbleList.filter(e=>e.k==1).length)\r\n\r\n        // _.keys(sizeMap).forEach(e=>{\r\n        //     let y = e%50\r\n        //     let x = ((e-y)/50)//Math.round\r\n        //     let color = \"red\"\r\n        //     if(sizeMap[e]>0)visual.text(parseInt(sizeMap[e]*10)/10, x,y+1+0.25, {color: color,opacity:0.99,font: 7})\r\n        // })\r\n\r\n        // CONTROLLER_STRUCTURES: {\r\n        //     \"spawn\": {0: 0, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 2, 8: 3},\r\n        //     \"extension\": {0: 0, 1: 0, 2: 5, 3: 10, 4: 20, 5: 30, 6: 40, 7: 50, 8: 60},\r\n        //     \"link\": {1: 0, 2: 0, 3: 0, 4: 0, 5: 2, 6: 3, 7: 4, 8: 6},\r\n        //     \"road\": {0: 2500, 1: 2500, 2: 2500, 3: 2500, 4: 2500, 5: 2500, 6: 2500, 7: 2500, 8: 2500},\r\n        //     \"constructedWall\": {1: 0, 2: 2500, 3: 2500, 4: 2500, 5: 2500, 6: 2500, 7: 2500, 8: 2500},\r\n        //     \"rampart\": {1: 0, 2: 2500, 3: 2500, 4: 2500, 5: 2500, 6: 2500, 7: 2500, 8: 2500},\r\n        //     \"storage\": {1: 0, 2: 0, 3: 0, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1},\r\n        //     \"tower\": {1: 0, 2: 0, 3: 1, 4: 1, 5: 2, 6: 2, 7: 3, 8: 6},\r\n        //     \"observer\": {1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 1},\r\n        //     \"powerSpawn\": {1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 1},\r\n        //     \"extractor\": {1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 1, 7: 1, 8: 1},\r\n        //     \"terminal\": {1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 1, 7: 1, 8: 1},\r\n        //     \"lab\": {1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 3, 7: 6, 8: 10},\r\n        //     \"container\": {0: 5, 1: 5, 2: 5, 3: 5, 4: 5, 5: 5, 6: 5, 7: 5, 8: 5},\r\n        //     \"nuker\": {1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 1},\r\n        //     \"factory\": {1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 1, 8: 1}\r\n        // }\r\n\r\n        // nearWall.forEach((x, y, val)=>{if(val>2&&finalPos==unionFind.find(x*50+y))visual.text(nearWall.get(x,y),x, y+0.5, {color: \"red\",opacity:0.99,font: 7})})\r\n\r\n        /**\r\n         * 这里开始计算布局！\r\n         * @type {{}}\r\n         */\r\n        let structMap = {}\r\n        _.keys(CONTROLLER_STRUCTURES).forEach(e=>structMap[e] = [])\r\n\r\n        // 资源点布局\r\n        structMap[\"link\"] = roomObjectCache.link\r\n        structMap[\"container\"] = roomObjectCache.container\r\n        structMap[\"extractor\"] = roomObjectCache.extractor\r\n        //中心布局\r\n        structMap[\"storage\"] .push([storageX-1,storageY])\r\n        structMap[\"terminal\"] .push([storageX,storageY+1])\r\n        structMap[\"factory\"] .push([storageX+1,storageY])\r\n        structMap[\"link\"] .push([storageX,storageY-1])\r\n        for(let i=-1;i<=1;i++){\r\n            for(let j=-1;j<=1;j++) {\r\n                structMap[\"road\"].push([storageX+i+j,storageY+i-j]) //仿射变换 [sin,cos,cos,-sin]\r\n            }\r\n        }\r\n        // 这里修改lab布局\r\n        let labs = [\r\n            \"☢☢-☢\",\r\n            \"☢-☢-\",\r\n            \"-☢-☢\",\r\n            \"☢-☢☢\"\r\n            // \"☢☢☢☢☢\",\r\n            // \"-----\",\r\n            // \"☢☢☢☢☢\"\r\n        ]\r\n        let labChangeDirection = false;\r\n        if ((storageX - labX) * (storageY - labY) < 0) {\r\n            labChangeDirection = true\r\n        }\r\n\r\n        let vis = {}\r\n        for(let i=0;i<2;i++){\r\n            for(let j=0;j<2;j++){\r\n                vis[i+\"_\"+j] = 1 // 优先放置中间的label\r\n                let jj = labChangeDirection?j:1-j;\r\n                let structs = labs[i+1].charAt(j+1)\r\n                if(structs == '☢')\r\n                    structMap[\"lab\"].push([labX+i,labY+jj])\r\n                else\r\n                    structMap[\"road\"].push([labX+i,labY+jj])\r\n            }\r\n        }\r\n\r\n        for(let i=-1;i<3;i++){\r\n            for(let j=-1;j<3;j++){\r\n                if(vis[i+\"_\"+j])continue;\r\n                let jj = labChangeDirection?j:1-j;\r\n                let structs = labs[i+1].charAt(j+1)\r\n                if(structs == '☢')\r\n                    structMap[\"lab\"].push([labX+i,labY+jj])\r\n                else\r\n                    structMap[\"road\"].push([labX+i,labY+jj])\r\n            }\r\n        }\r\n\r\n        walls.forEach(e=>structMap[\"rampart\"].push([e.x,e.y]))\r\n\r\n        _.keys(CONTROLLER_STRUCTURES).forEach(struct=>structMap[struct].forEach(e=>roomStructs.set(e[0],e[1],struct)))\r\n\r\n        structMap[\"road\"].forEach(e=>roomStructs.set(e[0],e[1],1))\r\n        //设置权值，bfs联通路径！\r\n        let setModel = function (xx,yy){\r\n            let checkAble = (x,y)=> (x>=0&&y>=0&&x<=49&&y<=49)&&roomManor.get(x,y)>0&&!roomStructs.get(x,y)\r\n            for(let i=-1;i<=1;i++){\r\n                for(let j=-1;j<=1;j++) {\r\n                    let x = xx+i+j\r\n                    let y = yy+i-j\r\n                    if(checkAble(x,y)){\r\n                        if(i||j){\r\n                            // structMap[\"road\"] .push([x,y]) //仿射变换 [sin,cos,cos,-sin]\r\n                            roomStructs.set(x,y,1)\r\n                        }else{\r\n                            // structMap[\"spawn\"] .push([x,y])\r\n                            roomStructs.set(x,y,12)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            for(let e of [[1,0],[-1,0],[0,1],[0,-1]]){\r\n                let x=xx+e[0]\r\n                let y=yy+e[1]\r\n                if(checkAble(x,y)){\r\n                    // structMap[\"extension\"] .push([x,y])\r\n                    roomStructs.set(x,y,8)\r\n                }\r\n            }\r\n        }\r\n\r\n        for(let i=0;i<50;i+=4){\r\n            for(let j=0;j<50;j+=4) {\r\n                let x =storageX%4+i\r\n                let y =storageY%4+j\r\n                setModel(x,y)\r\n                setModel(x+2,y+2)\r\n\r\n            }\r\n        }\r\n        visited.init()\r\n        visited.set(storageX,storageY,1)\r\n\r\n        queMin.push(NewNode(1,storageX,storageY))\r\n        let costRoad = routeDistance //重复使用\r\n        costRoad.init()\r\n        queMin.whileNoEmpty(nd=>{\r\n            roomStructs.forNear((x,y,val)=>{\r\n                if(!visited.exec(x,y,1)&&val>0){\r\n                    queMin.push(NewNode(nd.k+val,x,y))\r\n                }\r\n            },nd.x,nd.y)\r\n            costRoad.set(nd.x,nd.y,nd.k)\r\n            // visual.text(nd.k,nd.x,nd.y+0.25, {color: \"pink\",opacity:0.99,font: 7})\r\n        })\r\n\r\n        structMap[\"road\"].forEach(e=>roomStructs.set(e[0],e[1],\"road\")) //这里把之前的road覆盖上去防止放在之前里road上了\r\n\r\n        costRoad.forEach((x,y,val)=>{\r\n            if(!val)return;\r\n            let minVal =50;\r\n            // let finalX = 0;\r\n            // let finalY = 0;\r\n            costRoad.forNear((x1,y1,val)=>{\r\n                if(minVal>val&&val>0){\r\n                    minVal = val\r\n                    // finalX = x1\r\n                    // finalY = y1\r\n                }\r\n            },x,y)\r\n            // 方案2 没那么密集\r\n            costRoad.forNear((x1,y1,val)=>{\r\n                if(minVal==val&&val>0){\r\n                    // structMap[\"road\"].push([x1,y1])\r\n                    roomStructs.set(x1,y1,\"road\")\r\n                }\r\n            },x,y)\r\n            // 方案1 密集\r\n            // structMap[\"road\"].push([finalX,finalY])\r\n            // roomStructs.set(finalX,finalY,\"road\")\r\n        })\r\n\r\n        let spawnPos = []\r\n        let extensionPos = []\r\n        roomStructs.forEach((x,y,val)=>{\r\n            if (val > 0) {\r\n                let dist = 100;\r\n                costRoad.forNear((x,y,val)=>{\r\n                    if(val)dist = Math.min(dist,val)\r\n                },x,y)\r\n                // let dist = Math.sqrt(Math.pow(x-storageX,2)+Math.pow(y-storageY,2))\r\n                if(val==12){// 8 && 12 上面有写，注意！！！\r\n                    spawnPos.push([x,y,dist])\r\n                }\r\n                else{\r\n                    extensionPos.push([x,y,dist])\r\n                    // visual.text(dist,x, y+0.25, {color: \"pink\",opacity:0.99,font: 7})\r\n                }\r\n            }\r\n        })\r\n        let cmpFunc=(a,b)=>a[2]==b[2]?(a[1]==b[1]?a[0]-b[0]:a[1]-b[1]):a[2]-b[2];\r\n        spawnPos = spawnPos.sort(cmpFunc);\r\n        extensionPos = extensionPos.sort(cmpFunc);\r\n        let oriStruct = [];\r\n        let putList=[];\r\n        [\"spawn\",\"powerSpawn\",\"nuker\",\"tower\", \"observer\"].forEach(struct=>{\r\n            for(let i=0;i<CONTROLLER_STRUCTURES[struct][8];i++){\r\n                oriStruct.push(struct)\r\n            }\r\n        })\r\n        oriStruct.forEach(struct=>{\r\n            let e = spawnPos.shift()\r\n            if(!e) e = extensionPos.shift()\r\n            structMap[struct].push([e[0],e[1]])\r\n            putList.push([e[0],e[1],struct])\r\n        })\r\n        extensionPos.push(...spawnPos)\r\n        extensionPos = extensionPos.sort(cmpFunc);\r\n        let extCnt= 60\r\n        extensionPos.forEach(e=>{\r\n            if(extCnt>0){\r\n                structMap[\"extension\"].push([e[0],e[1]]);\r\n                putList.push([e[0],e[1],\"extension\"])\r\n                extCnt-=1;\r\n            }\r\n        })\r\n\r\n\r\n        // 更新roads\r\n        roomStructs.init()\r\n        _.keys(CONTROLLER_STRUCTURES).forEach(struct=>structMap[struct].forEach(e=>roomStructs.set(e[0],e[1],struct)))\r\n        visited.init()\r\n        structMap[\"road\"].forEach(e=>visited.set(e[0],e[1],1))\r\n        /**\r\n         * 更新最近的roads 但是可能有残缺\r\n         */\r\n        putList.forEach(e=>{\r\n            let x = e[0]\r\n            let y = e[1]\r\n            let minVal =50;\r\n            costRoad.forNear((x1,y1,val)=>{\r\n                if(minVal>val&&val>0){\r\n                    minVal = val\r\n                }\r\n            },x,y)\r\n            // 方案2 没那么密集\r\n            costRoad.forNear((x1,y1,val)=>{\r\n                if(minVal==val&&val>0){\r\n                    // 找到建筑最近的那个road\r\n                    roomStructs.set(x1,y1,\"road\")\r\n                }\r\n            },x,y)\r\n        })\r\n        /**\r\n         * 再roads的基础上，对rads进行补全，将残缺的连起来\r\n         */\r\n        roomStructs.forEach((x,y,val)=>{\r\n            if(val == 'link'||val == 'container')return; // 资源点的不要 放路\r\n            if(! val instanceof String||val>-1)return; // 附近有建筑 ，并且不是road\r\n            // visual.text(val,x, y+0.25, {color: \"pink\",opacity:0.99,font: 7})\r\n            let minVal =50;\r\n            costRoad.forNear((x1,y1,val)=>{\r\n                if(minVal>val&&val>0){\r\n                    minVal = val\r\n                }\r\n            },x,y)\r\n            // 方案2 没那么密集\r\n            costRoad.forNear((x1,y1,val)=>{\r\n                if(minVal==val&&val>0){\r\n                    // 找到建筑最近的那个road\r\n                    if(!visited.exec(x1,y1,1))structMap[\"road\"].push([x1,y1])\r\n                }\r\n            },x,y)\r\n        })\r\n\r\n        // 处理塔的位置，让塔尽量靠外\r\n        let getRange=function(a,b){\r\n            return Math.max(Math.abs(a[0]-b[0]),Math.abs(a[1]-b[1]))\r\n        }\r\n        let poses = []\r\n        let types = [\"nuker\",\"tower\", \"observer\"]\r\n        types.forEach(type=>{\r\n            structMap[type].forEach(e=>{\r\n                let dis = 0\r\n                structMap[\"rampart\"].forEach(e_ramp=>{\r\n                    dis += getRange(e_ramp,e)\r\n                })\r\n                poses.push({pos:e,type,dis})\r\n            })\r\n        })\r\n        poses.sort((a,b)=>(a.dis-b.dis))\r\n        \r\n        for(let i=0;i<6;i++){\r\n            if(poses[i].type == \"tower\")continue;\r\n            for(let j=6;j<poses.length;j++){\r\n                if(poses[j].type != \"tower\")continue;\r\n                poses[j].type = poses[i].type\r\n                poses[i].type = \"tower\"\r\n            }\r\n        }\r\n        types.forEach(type=>{structMap[type] = []})\r\n        poses.forEach(pos=>{\r\n            structMap[pos.type].push(pos.pos)\r\n        })\r\n\r\n        //#region 新的连接外矿方式\r\n\r\n        let costs = new PathFinder.CostMatrix;\r\n        let terrain = new Room.Terrain(roomName);\r\n        for(let i=0;i<50;i++){\r\n            for(let j=0;j<50;j++){\r\n                let te = terrain.get(i,j)\r\n                costs.set(i,j,te==TERRAIN_MASK_WALL?255:(te==TERRAIN_MASK_SWAMP?4:2))\r\n            }\r\n        }\r\n        for(let struct of OBSTACLE_OBJECT_TYPES){\r\n            if(structMap[struct]){\r\n                structMap[struct].forEach(e=>{\r\n                    costs.set(e[0],e[1],255)\r\n                })\r\n            }\r\n        }\r\n        structMap[\"road\"].forEach(e=>{\r\n            costs.set(e[0],e[1],1)\r\n        })\r\n        for(let i=0;i<50;i++){\r\n            for(let j=0;j<50;j++){\r\n                // new RoomVisual(roomName).text(costs.get(i,j),new RoomPosition(i,j,roomName))\r\n            }\r\n        }\r\n        structMap[\"container\"].forEach(e=>{\r\n            let ret = PathFinder.search(\r\n                new RoomPosition(centerX,centerY,roomName),\r\n                {pos:new RoomPosition(e[0],e[1],roomName),range:1}, \r\n                {\r\n                    roomCallback:()=>{return costs},\r\n                    maxRooms:1\r\n                }\r\n            )\r\n            ret.path.forEach(pos=>{\r\n                if(costs.get(pos.x,pos.y) != 1){\r\n                    structMap['road'].push([pos.x,pos.y])\r\n                    costs.set(pos.x,pos.y,1)\r\n                }\r\n            })\r\n            \r\n        })\r\n        //#endregion\r\n\r\n        //#region 旧的连接外矿道路\r\n\r\n        // // 连接外矿的全部道路\r\n        // _.keys(CONTROLLER_STRUCTURES).forEach(struct=>structMap[struct].forEach(e=>roomStructs.set(e[0],e[1],struct)))\r\n\r\n        // costRoad.forEach((x,y,val)=>costRoad.set(x,y,100))//初始化100\r\n        // visited.init()\r\n        // queMin.push(NewNode(0,storageX,storageY))//以 storage为中心\r\n        // visited.exec(storageX,storageY,1)\r\n        // queMin.whileNoEmpty(nd=>{\r\n        //     roomStructs.forNear((x,y,val)=>{\r\n        //         let roadCost = roomWalkable.get(x,y);\r\n        //         if(!visited.exec(x,y,1)&&(!val||val=='road'||val=='rampart')&&roadCost){\r\n        //             queMin.push(NewNode(nd.k+(val=='road'?0:roadCost==2?4:2),x,y))\r\n        //         }\r\n        //     },nd.x,nd.y)\r\n        //     costRoad.set(nd.x,nd.y,nd.k)\r\n        //     // visual.text(costRoad.get(nd.x,nd.y),nd.x,nd.y+0.25, {color: \"pink\",opacity:0.99,font: 7})\r\n        // })\r\n\r\n        // // 将dp的位置进行递归回去\r\n        // let border = visited //边界不能放路\r\n        // border.init()\r\n        // visited.forBorder((x,y,val)=>{visited.set(x,y,1)})\r\n        // structMap[\"container\"].forEach(e=>{\r\n        //     let dfsBack = function (x,y){\r\n        //         let minVal =500;\r\n        //         let finalX = 0;\r\n        //         let finalY = 0;\r\n        //         costRoad.forNear((x,y,val)=>{\r\n        //             let struct = roomStructs.get(x,y)\r\n        //             if(minVal>val&&!visited.get(x,y)&&val>=0&&roomWalkable.get(x,y)&&(!struct||struct=='road'||struct=='rampart')) {\r\n        //                 minVal = val\r\n        //                 finalX = x\r\n        //                 finalY = y\r\n        //             }\r\n        //         },x,y)\r\n        //         if(minVal){\r\n        //             if(\"road\"!=roomStructs.exec(finalX,finalY,\"road\")){\r\n        //                 structMap[\"road\"].push([finalX,finalY]);\r\n        //                 dfsBack(finalX,finalY)\r\n        //             }\r\n        //         }\r\n        //         // visual.text(minVal,finalX,finalY+0.25, {color: \"pink\",opacity:0.99,font: 7})\r\n        //     }\r\n        //     dfsBack(e[0],e[1])\r\n        //     structMap[\"road\"].forEach(e=>costRoad.set(e[0],e[1],0))\r\n        // })\r\n\r\n        //#endregion\r\n\r\n        // 可视化部分\r\n        // allCacheMap[finalPos].forEach(t=>{\r\n        //     visual.circle(t.x, t.y, {fill: \"#33ff00\", radius: 0.5 ,opacity : 0.03})\r\n        // })\r\n        // putAbleList.forEach(t=>{\r\n        //     visual.circle(t.x, t.y, {fill: \"#b300ff\", radius: 0.5 ,opacity : 0.1})\r\n        // })\r\n\r\n        // roomStructs.init()\r\n        // _.keys(CONTROLLER_STRUCTURES).forEach(struct=>structMap[struct].forEach(e=>roomStructs.set(e[0],e[1],struct)))\r\n\r\n\r\n        // let t = Game.cpu.getUsed()\r\n        // console.log(Game.cpu.getUsed()-t)\r\n        pro.dismiss()\r\n\r\n        // HelperVisual.showRoomStructures(roomName,structMap)\r\n\r\n        // clog(roomName,structMap[\"extension\"].length,structMap[\"spawn\"].length,wallCnt,innerPutAbleList.length)\r\n        return{\r\n            roomName:roomName,\r\n            // storagePos:{storageX,storageY},\r\n            // labPos:{labX,labY},\r\n            structMap:structMap\r\n        }\r\n\r\n    },\r\n\r\n};\r\n\r\nexport let ManagerPlanner = pro;\r\nmodule.exports = {\r\n    run(){\r\n        let roomStructsData = undefined //放全局变量\r\n\r\n        let p = Game.flags.p; // 触发器\r\n        let pa = Game.flags.pa;\r\n        let pb = Game.flags.pb;\r\n        let pc = Game.flags.pc;\r\n        let pm = Game.flags.pm;\r\n        if(p) {\r\n            roomStructsData = ManagerPlanner.computeManor(p.pos.roomName,[pc,pm,pa,pb])\r\n            Game.flags.p.remove()\r\n        }\r\n        if(roomStructsData){\r\n            //这个有点消耗cpu 不看的时候记得关\r\n            HelperVisual.showRoomStructures(roomStructsData.roomName,roomStructsData.structMap)\r\n        }\r\n    }\r\n}\r\n/*\r\nmodule.exports = {\r\n    HelperVisual:helpervisual,\r\n    ManagerPlanner:pro,\r\n    \r\n}\r\n*/","export function getPlanningStructurePos(roomName: string ,structureType: string, index: number) {\r\n    const pos: [number, number] = Memory['colony'][roomName]['roomPlanning']['model'][structureType][index]['pos'];\r\n    return pos;\r\n}\r\n\r\nexport function getPlanningStructureId(roomName: string ,structureType: string, index: number) {\r\n    const pos: [number, number] = Memory['colony'][roomName]['roomPlanning']['model'][structureType][index]['id'];\r\n    if (pos) return pos;\r\n    return null;\r\n}\r\n\r\n\r\n\r\n","import * as planning from \"./RoomPlanning\"\r\nimport * as utils from \"./planningUtils\"\r\nimport * as acces from \"./planningAcces\"\r\nimport { connectedComponents } from \"@/utils\";\r\n\r\nexport class TranslatePlanning {\r\n    mainRoom: string;\r\n\r\n\r\n    constructor(mainRoom: string) {\r\n        this.mainRoom = mainRoom;\r\n    }\r\n\r\n    public savePlanningModel() {\r\n        let roomStructsData;\r\n\r\n        let p =  Game.flags.p;\r\n        let pc =  Game.flags.pc;\r\n        let pm =  Game.flags.pm;\r\n        let pa =  Game.flags.pa;\r\n        let pb =  Game.flags.pb;\r\n\r\n        const saPosition: [number, number] = [pa.pos.x, pa.pos.y];\r\n        const sbPosition: [number, number] = [pb.pos.x, pb.pos.y];\r\n        const cPosition: [number, number] = [pc.pos.x, pc.pos.y];\r\n        const mPosition: [number, number] = [pm.pos.x, pm.pos.y];\r\n        \r\n\r\n        if (p) {\r\n            roomStructsData = planning.ManagerPlanner.computeManor(this.mainRoom,[pc,pm,pa,pb])\r\n            Game.flags.p.remove();\r\n        }\r\n        if (roomStructsData) {\r\n            planning.HelperVisual.showRoomStructures(this.mainRoom,roomStructsData['structMap'])\r\n            \r\n            Memory['colony'][this.mainRoom]['roomPlanning'] = {};\r\n            //save model\r\n            this.generateModel(roomStructsData['structMap']);\r\n  \r\n            this.generateTemporal();\r\n            /*\r\n                {\r\n                    'road'{\r\n                        9: [x, y],\r\n                        8: [x, y]\r\n                    },\r\n                    'extension' {\r\n                        \r\n                    }\r\n                }\r\n            */\r\n            this.constructionSideRefAndPos();\r\n            this.inRampartPos();\r\n            this.containerReference(roomStructsData['structMap']['container']);\r\n            this.linkReference(roomStructsData['structMap']['link']);\r\n            this.roadReference(roomStructsData['structMap']['road']);\r\n            this.labReference(roomStructsData['structMap']['lab']);\r\n\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private constructionSideRefAndPos() {\r\n        Memory['colony'][this.mainRoom]['roomPlanning']['constructionSide'] = {};\r\n\r\n        const constructionSideRefPos = Memory['colony'][this.mainRoom]['roomPlanning']['constructionSide'];\r\n        const model = Memory['colony'][this.mainRoom]['roomPlanning']['model'];\r\n        for (let structureType in model) {\r\n            constructionSideRefPos[structureType] = {};\r\n        }\r\n    }\r\n\r\n    private labReference(labList:[]){\r\n        \r\n    }\r\n\r\n    private roadReference(roadList:[]) {\r\n        let roadListAdj =  utils.transformRoadToAdjacentList( roadList);\r\n        const spawn0Pos: [number, number] = Memory['colony'][this.mainRoom]['roomPlanning']['model']['spawn'][0]['pos'];\r\n        const posRoadNearSpawn0 = utils.nearPointOne(spawn0Pos, roadList);\r\n                \r\n        //Spawn0 to source1 path\r\n        const containerSource1Reference: number = Memory['colony'][this.mainRoom]['roomPlanning']['containerReference']['container_source1']\r\n        const containerSource1Pos: [number, number] = Memory['colony'][this.mainRoom]['roomPlanning']['model']['container'][containerSource1Reference]['pos'];\r\n        const posRoadNearContainerSource1 = utils.nearPointOne(containerSource1Pos, roadList);\r\n        let spawn0ToSource1 = utils.roadPath(roadListAdj, posRoadNearSpawn0, posRoadNearContainerSource1);\r\n     \r\n        //Spawn0 to source2 path\r\n        const containerSource2Reference: number = Memory['colony'][this.mainRoom]['roomPlanning']['containerReference']['container_source2']\r\n        const containerSource2Pos: [number, number] = Memory['colony'][this.mainRoom]['roomPlanning']['model']['container'][containerSource2Reference]['pos'];\r\n        const posRoadNearContainerSource2 = utils.nearPointOne(containerSource2Pos, roadList);\r\n        let spawn0ToSource2 = utils.roadPath(roadListAdj, posRoadNearSpawn0, posRoadNearContainerSource2);\r\n\r\n        //Spawn0 to controller\r\n        const containerControllerReference: number = Memory['colony'][this.mainRoom]['roomPlanning']['containerReference']['container_controller']\r\n        const containerControllerPos: [number, number] = Memory['colony'][this.mainRoom]['roomPlanning']['model']['container'][containerControllerReference]['pos'];\r\n        const posRoadNearContainerController = utils.nearPointOne(containerControllerPos, roadList);\r\n        let spawn0ToController = utils.roadPath(roadListAdj, posRoadNearSpawn0, posRoadNearContainerController);\r\n\r\n        \r\n        //Spawn0 to mineral\r\n        const containerMineralReference: number = Memory['colony'][this.mainRoom]['roomPlanning']['containerReference']['container_mineral']\r\n        const containerMineralPos: [number, number] = Memory['colony'][this.mainRoom]['roomPlanning']['model']['container'][containerMineralReference]['pos'];\r\n        const posRoadNearContainerMineral = utils.nearPointOne(containerMineralPos, roadList);\r\n        let spawn0ToMineral = utils.roadPath(roadListAdj, posRoadNearSpawn0, posRoadNearContainerMineral);\r\n\r\n\r\n        Memory['colony'][this.mainRoom]['roomPlanning']['roadReference'] = {\r\n            'spawn0ToSource1': spawn0ToSource1,\r\n            'spawn0ToSource2': spawn0ToSource2,\r\n            'spawn0ToController': spawn0ToController,\r\n            'spawn0ToMineral': spawn0ToMineral\r\n        }\r\n\r\n    }\r\n\r\n    private roomWall(): boolean[][] {\r\n        const rampartList = Memory['colony'][this.mainRoom]['roomPlanning']['temp']['rampart'];\r\n        const matrix = new Array(50).fill(true).map(() => new Array(50).fill(true));\r\n        const terrain = new Room.Terrain(this.mainRoom);\r\n        for (let i = 0; i < 50; ++i) {\r\n            for (let j = 0; j < 50; ++j) {\r\n                if (terrain.get(i, j) == TERRAIN_MASK_WALL || utils.isRampartPos(this.mainRoom,[i, j])) {\r\n                    matrix[i][j] = false;\r\n                }\r\n            }\r\n        }\r\n        return matrix;\r\n    }\r\n\r\n    private nearConectedPos(pos: [number, number]): [number, number][] {\r\n        const terrain = new Room.Terrain(this.mainRoom);\r\n        const rampartList = Memory['colony'][this.mainRoom]['roomPlanning']['temp']['rampart'];\r\n\r\n        const candidatePos = utils.nearPosition(pos);\r\n        \r\n        let r: [number, number][] = [];\r\n        for (let i = 0; i < candidatePos.length; ++i) {\r\n\r\n            if (terrain.get(candidatePos[i][0], candidatePos[i][1]) != TERRAIN_MASK_WALL && !utils.isRampartPos(this.mainRoom, candidatePos[i])) {\r\n                r.push([candidatePos[i][0], candidatePos[i][1]])\r\n            }\r\n        }\r\n\r\n        return r;\r\n    }\r\n\r\n    private roomWallToAdj(roomCanPass: boolean[][]): number[][] {\r\n        let adjList: number[][]= [];\r\n        for (let i = 0; i < roomCanPass.length; ++i) {\r\n            for (let j = 0; j < roomCanPass[i].length; ++j) {\r\n                const node = utils.translatePosToNode([i, j]);\r\n                //console.log(node);\r\n                \r\n                if (!roomCanPass[i][j]) {\r\n                    adjList[node]=[];\r\n                } \r\n                else {\r\n                    const nearPos = this.nearConectedPos([i, j]);\r\n                    let actualNode: number[] = [];\r\n                    for (let i = 0; i < nearPos.length; ++i) {\r\n                       actualNode.push( utils.translatePosToNode(nearPos[i]) )\r\n                    }\r\n                    adjList[node] = actualNode;\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n        \r\n        \r\n       /*\r\n        for (let i = 0; i < roomCanPass.length; ++i) {\r\n            for (let j = 0; j < roomCanPass[i].length; ++j) {\r\n                const node = this.translatePosToNode([j, i]);\r\n                //console.log(node);\r\n                if (!roomCanPass[i][j]) adjList.push([]);\r\n                else {\r\n                    const nearPos = this.nearConectedPos([j, i]);\r\n                    let actualNode: number[] = [];\r\n                    for (let i = 0; i < nearPos.length; ++i) {\r\n                        actualNode.push( this.translatePosToNode(nearPos[i]) )\r\n                    }\r\n                    adjList.push(actualNode);\r\n                }\r\n\r\n            }\r\n        }\r\n        */\r\n        return adjList;\r\n    }\r\n\r\n    private translatePosToNode(pos: [number, number]): number {\r\n        return pos[0]*50 + pos[1];\r\n    }\r\n\r\n    private translateNodeToPos(node: number): [number, number] {\r\n        return [Math.floor(node/50), node%50]\r\n    }\r\n\r\n    private searchCC(cc: number[][], obj: number) {\r\n        for (let i = 0; i< cc.length; ++i) {\r\n            \r\n            for (let j = 0; j < cc[i].length; ++j) {\r\n                if (cc[i][j] == obj) {\r\n                    return i;\r\n                }\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    private inRampartPos() {\r\n\r\n        //const matrix = new Array(50).fill(false).map(() => new Array(50).fill(false));\r\n\r\n        //wall pos mask false\r\n        const roomWall = this.roomWall();\r\n        let cont = 0;\r\n        \r\n        for (let i = 0; i < roomWall.length; ++i) {\r\n            for (let j = 0; j < roomWall.length; ++j) {\r\n                if (!roomWall[i][j]) ++cont;\r\n            }\r\n        }\r\n        \r\n        const adjacentList = this.roomWallToAdj(roomWall);\r\n        const cc = connectedComponents(adjacentList)\r\n        \r\n        const spawn0Pos = Memory['colony'][this.mainRoom]['roomPlanning']['model']['spawn'][0]['pos'];\r\n        const spawn0Node = utils.translatePosToNode(spawn0Pos);\r\n        const indexProtectedComponent = this.searchCC(cc, spawn0Node);\r\n        \r\n        //console.log(cc[indexProtectedComponent]);\r\n        let sortedCC = cc[indexProtectedComponent];\r\n        sortedCC.sort();\r\n        //console.log(sortedCC);\r\n\r\n        let protectedPos: [number, number][] = [];\r\n        for (let i = 0; i < sortedCC.length; ++i) {\r\n            protectedPos.push(utils.translateNodeToPos(sortedCC[i]));\r\n        }\r\n       // console.log(protectedPos);\r\n        Memory['colony'][this.mainRoom]['roomPlanning']['inRampartPos'] = sortedCC;\r\n        \r\n    }\r\n\r\n    private linkReference(linkList: []){\r\n        const containerReference = Memory['colony'][this.mainRoom]['roomPlanning']['containerReference'];\r\n\r\n        let posSourceContainer1: [number, number] = acces.getPlanningStructurePos(this.mainRoom, 'container', containerReference['container_source1']);\r\n        let posSourceContainer2: [number, number] = acces.getPlanningStructurePos(this.mainRoom, 'container', containerReference['container_source2']);\r\n        let posControllerContainer: [number, number] = acces.getPlanningStructurePos(this.mainRoom, 'container', containerReference['container_controller']);\r\n        let posCenterContainer: [number, number] = acces.getPlanningStructurePos(this.mainRoom, 'container', containerReference['container_mineral']);\r\n\r\n        let linkSourcel = utils.minDistance(posSourceContainer1, linkList);\r\n        let linkSource2 = utils.minDistance(posSourceContainer2, linkList);\r\n        let linkController = utils.minDistance(posControllerContainer, linkList);   \r\n        let linkCenter: number;\r\n        for (let i = 0; i < linkList.length; ++i) {\r\n            if (i != linkSourcel && i != linkSource2 && i != linkController) {\r\n                linkCenter = i;\r\n            }\r\n        }\r\n\r\n        Memory['colony'][this.mainRoom]['roomPlanning']['linkReference'] = {\r\n            'link_source1': linkSourcel,\r\n            'link_source2': linkSource2,\r\n            'link_controller': linkController,\r\n            'link_center': linkCenter\r\n        }\r\n        \r\n    }\r\n\r\n    private containerReference(containerList: []) {\r\n\r\n        let posSource1:[number, number] = Memory['colony'][this.mainRoom]['roomPlanning']['model']['source'][0]['pos'];\r\n        let posSource2:[number, number] = Memory['colony'][this.mainRoom]['roomPlanning']['model']['source'][1]['pos'];\r\n        let posMineral:[number, number] = Memory['colony'][this.mainRoom]['roomPlanning']['model']['source'][2]['pos'];\r\n\r\n        let aux = Game.rooms[this.mainRoom].controller;\r\n        let posController: [number, number] = [aux.pos.x, aux.pos.y];\r\n\r\n        let containerSourcel = utils.minDistance(posSource1, containerList);\r\n        let containerSource2 = utils.minDistance(posSource2, containerList);\r\n        let containerMineral = utils.minDistance(posMineral, containerList);\r\n        let containerController = utils.minDistance(posController, containerList);        \r\n\r\n\r\n        Memory['colony'][this.mainRoom]['roomPlanning']['containerReference'] = {\r\n            'container_source1': containerSourcel,\r\n            'container_source2': containerSource2,\r\n            'container_mineral': containerMineral,\r\n            'container_controller': containerController\r\n        }\r\n    }\r\n\r\n    /*\r\n        Planning model data. \r\n    */\r\n    private generateModel(model: {}): void {\r\n        Memory['colony'][this.mainRoom]['roomPlanning']['model'] = {}\r\n        for (let structureName in model) {\r\n            Memory['colony'][this.mainRoom]['roomPlanning']['model'][structureName] = []\r\n            for (let i in model[structureName])\r\n                Memory['colony'][this.mainRoom]['roomPlanning']['model'][structureName].push(\r\n                    {'id': '', 'pos': model[structureName][i]}\r\n                )\r\n        }\r\n\r\n        const saPos: [number, number] = [Game.flags.pa.pos.x, Game.flags.pa.pos.y];\r\n        const sbPos: [number, number] = [Game.flags.pb.pos.x, Game.flags.pb.pos.y];\r\n        const mPos: [number, number] = [Game.flags.pm.pos.x, Game.flags.pm.pos.y];\r\n        Memory['colony'][this.mainRoom]['roomPlanning']['model']['source'] = [];\r\n        Memory['colony'][this.mainRoom]['roomPlanning']['model']['source'].push(\r\n            {'id': utils.getId(this.mainRoom, saPos, 'source'), 'pos': saPos}\r\n        )\r\n        Memory['colony'][this.mainRoom]['roomPlanning']['model']['source'].push(\r\n            {'id': utils.getId(this.mainRoom, sbPos, 'source'), 'pos': sbPos}\r\n        )\r\n        Memory['colony'][this.mainRoom]['roomPlanning']['model']['source'].push(\r\n            {'id': utils.getId(this.mainRoom, mPos, 'mineral'), 'pos': mPos}\r\n        )\r\n    }\r\n\r\n    private tempExtension() {\r\n        const temp = Memory['colony'][this.mainRoom]['roomPlanning']['temp'];\r\n        const extensionList = Memory['colony'][this.mainRoom]['roomPlanning']['model']['extension'];\r\n        temp['extension'] = {};\r\n\r\n        const spawn0Pos:[number, number] = Memory['colony'][this.mainRoom]['roomPlanning']['model']['spawn'][0]['pos'];\r\n        let array = Array<arrayPos>(extensionList.length);\r\n        for (let i = 0; i < extensionList.length; ++i) {\r\n            //temp['extension'][i] = extensionList[i]['pos'];\r\n            const distance = utils.distanceTwoPoints(spawn0Pos, extensionList[i]['pos']);\r\n            const temp: arrayPos = {\r\n                'ref': i.toString(),\r\n                'pos': extensionList[i]['pos'],\r\n                'distance': distance\r\n            }\r\n            array[i] = temp;\r\n        }\r\n        array.sort(function (a, b) {\r\n\r\n            if (a.distance > b.distance) {  //si a es mayor, retornar 1\r\n            return 1;\r\n            }\r\n            if (a.distance < b.distance) {  //si a es memor, retornar -1\r\n            return -1;\r\n            }\r\n            // a must be equal to b\r\n            return 0;\r\n            \r\n        });\r\n\r\n        for (let i = 0; i < extensionList.length; ++i) {\r\n            temp['extension'][i] = array[i].pos;\r\n\r\n        }\r\n\r\n        //change model extension\r\n        const modelExtension = Memory['colony'][this.mainRoom]['roomPlanning']['model']['extension'];\r\n        for (let i = 0; i < modelExtension.length; ++i) {\r\n            modelExtension[i]['pos'] = temp['extension'][i];\r\n        }\r\n    }\r\n\r\n    private tempSpawn() {\r\n        const temp = Memory['colony'][this.mainRoom]['roomPlanning']['temp'];\r\n        const spawnList = Memory['colony'][this.mainRoom]['roomPlanning']['model']['spawn'];\r\n        temp['spawn'] = {};\r\n\r\n        const controllerRoomPos = Game.rooms[this.mainRoom].controller.pos;\r\n        const controllerPos:[number, number] = [controllerRoomPos.x, controllerRoomPos.y];\r\n        let array = Array<arrayPos>(spawnList.length);\r\n        for (let i = 0; i < spawnList.length; ++i) {\r\n            //temp['extension'][i] = extensionList[i]['pos'];\r\n            const distance = utils.distanceTwoPoints(controllerPos, spawnList[i]['pos']);\r\n            const temp: arrayPos = {\r\n                'ref': i.toString(),\r\n                'pos': spawnList[i]['pos'],\r\n                'distance': distance\r\n            }\r\n            array[i] = temp;\r\n        }\r\n        array.sort(function (a, b) {\r\n\r\n            if (a.distance < b.distance) {  //si a es mayor, retornar 1\r\n            return 1;\r\n            }\r\n            if (a.distance > b.distance) {  //si a es memor, retornar -1\r\n            return -1;\r\n            }\r\n            // a must be equal to b\r\n            return 0;\r\n            \r\n        });\r\n\r\n        for (let i = 0; i < spawnList.length; ++i) {\r\n            temp['spawn'][i] = array[i].pos;\r\n\r\n        }\r\n\r\n        //change model extension\r\n        const modelExtension = Memory['colony'][this.mainRoom]['roomPlanning']['model']['spawn'];\r\n        for (let i = 0; i < modelExtension.length; ++i) {\r\n            modelExtension[i]['pos'] = temp['spawn'][i];\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    private generateTemporal() {\r\n        Memory['colony'][this.mainRoom]['roomPlanning']['temp'] = {};\r\n        const temp = Memory['colony'][this.mainRoom]['roomPlanning']['temp'];\r\n        const model = Memory['colony'][this.mainRoom]['roomPlanning']['model'];\r\n\r\n        //copy model to temp\r\n        for (let structureName in model) {\r\n            Memory['colony'][this.mainRoom]['roomPlanning']['temp'][structureName] = {}\r\n            for (let i in model[structureName])\r\n                Memory['colony'][this.mainRoom]['roomPlanning']['temp'][structureName][i] =\r\n                    model[structureName][i]['pos']\r\n                \r\n        }\r\n\r\n        //modify spawn order\r\n        this.tempSpawn();\r\n\r\n        //modify extension order\r\n        this.tempExtension();\r\n\r\n        \r\n\r\n    }\r\n\r\n}","import { getRangePoints, isRampartProtectPos, translateNodeToPos, translatePosToNode } from \"@/roomPlanning/planningUtils\";\r\nimport { TranslatePlanning } from \"@/roomPlanning/TranslatePlanning\";\r\nimport { difference, intersection } from \"@/utils\";\r\n\r\n\r\n\r\n/*\r\nMemory.colony.\r\n        mainRoom.\r\n            state{}\r\n            roomPlanning{}\r\n            dpt_build{}\r\n*/\r\n\r\n/*\r\n    Colony's memory block inizializer.\r\n    Only when create a new colony\r\n*/\r\n\r\nexport class Mem {\r\n    mainRoom: string;\r\n\r\n    constructor(roomName: string) {\r\n        this.mainRoom = roomName;\r\n        //this.build();\r\n    }\r\n\r\n\r\n    static constructionData(roomName: string, structureType: BuildableStructureConstant) {\r\n        return Memory['colony'][roomName]['roomPlanning']['model'][structureType];\r\n    }\r\n\r\n    /*\r\n        request mem for a new colony\r\n    */\r\n    public initializeColonyMem(): void {\r\n        if (! Memory['colony']) {\r\n            Memory['colony'] = {};\r\n        }\r\n        if (! Memory['creeps']) {\r\n            Memory['creeps'] = {};\r\n        }\r\n\r\n        delete Memory['colony'][this.mainRoom]\r\n\r\n        Memory['colony'][this.mainRoom] = {};\r\n        const colonyMem = Memory['colony'][this.mainRoom];\r\n\r\n        colonyMem['state'] = {};\r\n        colonyMem['state']['buildColony'] = {}\r\n\r\n        colonyMem['state']['buildColony']['buildRCL'] = 0;\r\n        colonyMem['state']['buildColony']['fase'] = 0;\r\n        colonyMem['state']['buildColony']['working'] = false;\r\n        colonyMem['state']['buildColony']['task'] = {}\r\n        colonyMem['state']['buildColony']['task']['building'] = false;\r\n        colonyMem['state']['buildColony']['task']['levelUP'] = false;\r\n        \r\n        colonyMem['state']['controller'] = {};\r\n        colonyMem['state']['controller']['fillTaskTTL'] = -1;\r\n        colonyMem['state']['controller']['actualRCL'] = 1;\r\n\r\n\r\n        //save roomPlaning Block\r\n        let planning: TranslatePlanning = new TranslatePlanning(this.mainRoom);\r\n        planning.savePlanningModel();\r\n\r\n        colonyMem['creepSpawning'] = {};\r\n        colonyMem['creepSpawning']['spawn'] = [];\r\n        colonyMem['creepSpawning']['task'] = {};\r\n        colonyMem['creepSpawning']['completeTask'] = {};\r\n\r\n\r\n\r\n        this.initializeDptHarvest();\r\n        this.initializeDptLogistic();\r\n        this.initializeDptWork();\r\n        this.initializeDptUpgrader();\r\n        this.initializeTowersMem();\r\n        this.initializeDptRepair();\r\n    }\r\n\r\n    private compuLinkPosCanditate(candidateLinkPos: {}) {\r\n        const colonyMem = Memory['colony'][this.mainRoom];\r\n        const rampartList = colonyMem['roomPlanning']['temp']['rampart'];\r\n        \r\n        const length = Object.keys(rampartList).length;\r\n        \r\n        for (let i = 0; i < length; ++i) {\r\n            const inRange2Pos = getRangePoints(rampartList[i], 2);\r\n            \r\n            \r\n            for (let rangePos = 0; rangePos < inRange2Pos.length; ++rangePos) {\r\n                if (isRampartProtectPos(this.mainRoom, inRange2Pos[rangePos])) {\r\n                    //translate to pos to node\r\n                    const node = translatePosToNode(inRange2Pos[rangePos]);\r\n                    candidateLinkPos[node] = new Set();\r\n                }\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    private compuRampartRangeLessEqual4(candidateLinkPos) {\r\n        const colonyMem = Memory['colony'][this.mainRoom];\r\n        const rampartList = colonyMem['roomPlanning']['temp']['rampart'];\r\n        const length = Object.keys(rampartList).length;\r\n\r\n        for (let nodeName in candidateLinkPos) {\r\n            const nodePos = translateNodeToPos(parseInt(nodeName));\r\n            const nodeRoomPos = new RoomPosition(nodePos[0], nodePos[1], this.mainRoom);\r\n            for (let i = 0; i< length; ++i) {\r\n                if (nodeRoomPos.getRangeTo(rampartList[i][0], rampartList[i][1]) <= 4) {\r\n                    candidateLinkPos[nodeName].add(i);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private compuLinkDataAndDeleteCandidate(linkPosData: {}, candidateLinkPos:{}) {\r\n        const colonyMem = Memory['colony'][this.mainRoom];\r\n        //const inRampartPos = colonyMem['roomPlanning']['inRampartPos'];\r\n        const keys = Object.keys(candidateLinkPos);\r\n        let maxNode = keys[0];\r\n        //find max number rampart node\r\n        for (let i in candidateLinkPos) {\r\n            if (candidateLinkPos[i].size > candidateLinkPos[maxNode].size) {\r\n                maxNode = i;\r\n            }\r\n        }\r\n\r\n        //add maxNode to linkPosData\r\n        linkPosData[maxNode] = candidateLinkPos[maxNode];\r\n\r\n        //delete assigned rampart\r\n        for (let i in candidateLinkPos) {\r\n            candidateLinkPos[i] = difference(candidateLinkPos[i], linkPosData[maxNode]);\r\n            \r\n            \r\n        }\r\n    }\r\n\r\n    private allRampartAssigned(candidateLinkPos: {}): boolean {\r\n        let allAssigned = true;\r\n        for (let i in candidateLinkPos) {\r\n            if (candidateLinkPos[i].size) allAssigned = false;\r\n        }\r\n        return allAssigned;\r\n    }\r\n\r\n    private assignLinkToRampart() {\r\n\r\n        const colonyMem = Memory['colony'][this.mainRoom];\r\n        \r\n        let candidateLinkPos = {};\r\n        //1. calcular candidatos a ser posicion de link\r\n            /*  candirateLinkPos = {\r\n                    node : {set of rampart reference}\r\n                }\r\n            */\r\n        this.compuLinkPosCanditate(candidateLinkPos);\r\n        \r\n        \r\n\r\n        // 2. calcular los rampart a posicion <= 4 a cada posicion candidato\r\n        this.compuRampartRangeLessEqual4(candidateLinkPos);\r\n        \r\n        // 3. coger el nodo con mas rampart\r\n        let linkNodeData ={};\r\n        let allAssigned = false;\r\n        while( !allAssigned ) {\r\n            this.compuLinkDataAndDeleteCandidate(linkNodeData, candidateLinkPos);\r\n            allAssigned = this.allRampartAssigned(candidateLinkPos);\r\n        }\r\n\r\n        //save linkPosData in Memory\r\n            /* linkPosData\r\n                    node: [ramparts reference]\r\n            */\r\n        let linkPosData = {};\r\n        for (let i in linkNodeData) {\r\n            //console.log(i + ' ' + translateNodeToPos(parseInt(i)) + ' ' + linkNodeData[i].size);\r\n        \r\n            let rampartRef = [];\r\n            const iterator1 = linkNodeData[i].values();\r\n            for (let it = 0; it < linkNodeData[i].size; ++it) {\r\n                //console.log(iterator1.next().value);\r\n                rampartRef.push(parseInt(iterator1.next().value))\r\n            }\r\n            linkPosData[i] = rampartRef;\r\n        }\r\n        colonyMem['dpt_repair']['linkPosData'] = linkPosData;\r\n\r\n        \r\n    }\r\n\r\n    private initializeDptRepair() {\r\n        const colonyMem = Memory['colony'][this.mainRoom];\r\n        colonyMem['dpt_repair'] = {};\r\n        colonyMem['dpt_repair']['wallHitsUpdate'] = false;\r\n        colonyMem['dpt_repair']['wallHits'] = 0;\r\n        colonyMem['dpt_repair']['nukerHitsUpdate'] = false;\r\n        colonyMem['dpt_repair']['nukerHits'] = 0;        \r\n        colonyMem['dpt_repair']['task'] = {};\r\n        colonyMem['dpt_repair']['rampartData'] = {};\r\n        colonyMem['dpt_repair']['linksPos'] = [];\r\n        colonyMem['dpt_repair']['ticksToSpawn'] = {};\r\n        this.assignLinkToRampart();\r\n    }\r\n\r\n    private initializeTowersMem() {\r\n        const colonyMem = Memory['colony'][this.mainRoom];\r\n        colonyMem['tower'] = {};\r\n        colonyMem['tower']['data'] = {};\r\n        colonyMem['tower']['healTask'] = {};\r\n        colonyMem['tower']['attackTask'] = {};\r\n        colonyMem['tower']['repairRoad'] = {};\r\n        colonyMem['tower']['repairRampart'] = {};\r\n    \r\n\r\n    }\r\n\r\n\r\n    private initializeCentralCluster() {\r\n        \r\n    }\r\n\r\n    private initializeLabMem() {\r\n\r\n    }\r\n\r\n    private initializeDptUpgrader() {\r\n        const colonyMem = Memory['colony'][this.mainRoom];\r\n        colonyMem['dpt_upgrade'] = {};\r\n        colonyMem['dpt_upgrade']['actualize'] = false;\r\n        colonyMem['dpt_upgrade']['storage'] = {};\r\n        colonyMem['dpt_upgrade']['storage']['id'] = null;\r\n        colonyMem['dpt_upgrade']['container'] = {};\r\n        colonyMem['dpt_upgrade']['container']['stage1'] = 0;\r\n        colonyMem['dpt_upgrade']['container']['stage2'] = 0;\r\n        colonyMem['dpt_upgrade']['container']['stage3'] = 0;\r\n\r\n\r\n        colonyMem['dpt_upgrade']['ticksToSpawn'] = {};\r\n\r\n    }\r\n    \r\n    private initializeDptLogistic() {\r\n        const colonyMem = Memory['colony'][this.mainRoom];\r\n        \r\n        colonyMem['dpt_logistic'] = {};\r\n\r\n        colonyMem['dpt_logistic']['actualize'] = false;\r\n\r\n        colonyMem['dpt_logistic']['storage'] = [];\r\n\r\n        colonyMem['dpt_logistic']['fillTask'] = false;\r\n\r\n        colonyMem['dpt_logistic']['request'] = [];\r\n        \r\n        colonyMem['dpt_logistic']['sourceTask'] = {};\r\n        colonyMem['dpt_logistic']['targetTask'] = {};\r\n\r\n        colonyMem['dpt_logistic']['oneTimeCreeps'] = {};\r\n        colonyMem['dpt_logistic']['ticksToSpawn'] = {};\r\n\r\n    }\r\n\r\n    private initializeDptHarvest() {\r\n        const colonyMem = Memory['colony'][this.mainRoom];\r\n        colonyMem['dpt_harvest'] = {};\r\n\r\n        colonyMem['dpt_harvest']['actualize'] = false;\r\n\r\n        colonyMem['dpt_harvest']['source1'] = {};\r\n        colonyMem['dpt_harvest']['source1']['id'] = '';\r\n        colonyMem['dpt_harvest']['source1']['outRampart'] = true;\r\n        colonyMem['dpt_harvest']['source1']['creeps'] = [];\r\n\r\n        colonyMem['dpt_harvest']['source2'] = {};\r\n        colonyMem['dpt_harvest']['source2']['id'] = '';\r\n        colonyMem['dpt_harvest']['source2']['outRampart'] = true;\r\n        colonyMem['dpt_harvest']['source2']['creeps'] = [];\r\n\r\n        colonyMem['dpt_harvest']['mineral'] = {};\r\n        colonyMem['dpt_harvest']['mineral']['id'] = '';\r\n        colonyMem['dpt_harvest']['mineral']['outRampart'] = true;\r\n        colonyMem['dpt_harvest']['mineral']['creeps'] = [];\r\n        \r\n        colonyMem['dpt_harvest']['creep'] = {};\r\n        colonyMem['dpt_harvest']['ticksToSpawn'] = {};\r\n\r\n        colonyMem['dpt_harvest']['container'] = {};\r\n\r\n    }\r\n\r\n    private initializeDptWork():void {\r\n        const colonyMem = Memory['colony'][this.mainRoom];\r\n        colonyMem['dpt_build'] = {};\r\n        colonyMem['dpt_build']['actualize'] = false;\r\n        colonyMem['dpt_build']['ticksToSpawn'] = {};\r\n        colonyMem['dpt_build']['buildCost'] = 0;\r\n        colonyMem['dpt_build']['buildTask'] = {};\r\n        colonyMem['dpt_build']['request'] = [];\r\n        colonyMem['dpt_build']['transporterCreeps'] = {}\r\n    }\r\n\r\n    \r\n}","export const energyAvailable = [300, 550, 800, 1300, 1800, 2300, 5600, 10000]\r\n\r\n\r\n\r\nexport function getEnergyRCL(energyAmount: number): number {\r\n\r\n    /*\r\n    let found = false;\r\n    let i = 0;\r\n    while( !found && i < 8) {\r\n        if (energyAvailable[i] > energyAmount) return i;\r\n        ++i;\r\n    }\r\n    return -1;\r\n    */\r\n   let found = false;\r\n   let i = 0;\r\n   while (!found && i < 8) {\r\n    if (energyAvailable[i] > energyAmount) return i;\r\n    ++i;\r\n   }\r\n   return 8;\r\n}\r\n\r\nexport function getBody(role: string, rcl: number): BodyPartConstant[] {\r\n\r\n    let prototype: BodyPartConstant[] = bodyPrototype[role];\r\n    \r\n    const componentNum = bodyComponentNum[role][rcl];\r\n    let act: BodyPartConstant[] = [];\r\n    for (let i in prototype) {\r\n        for (let j = 0; j < componentNum[i]; ++j ) {\r\n            act.push(prototype[i]);\r\n        }\r\n    }\r\n    return act;\r\n}\r\n\r\nexport function getQueenBody(){\r\n\r\n}\r\n\r\nexport function ticksToSpawn(role: string, rcl: number): number {\r\n    const componentNum:number[] = bodyComponentNum[role][rcl.toString()];\r\n    const ticks:number = componentNum.reduce((x, y) => x + y, 0)\r\n    return ticks*3\r\n}\r\n\r\n\r\n\r\nexport const bodyPrototype = {\r\n    harvester: [WORK, CARRY, MOVE],\r\n    worker: [WORK, CARRY, MOVE],\r\n    builder: [WORK, CARRY, MOVE],\r\n    transporter: [CARRY, MOVE],\r\n    repairer: [WORK, CARRY, MOVE],\r\n    initializer: [WORK, CARRY, MOVE],\r\n    iniQueen: [CARRY, MOVE],\r\n    upgrader_base: [WORK, CARRY, MOVE]\r\n}\r\n\r\n\r\nexport const bodyComponentNum = {\r\n    //WORK  CARRY   MOVE\r\n    harvester:{\r\n        1: [2, 1, 1],\r\n        2: [3, 1, 2],\r\n        3: [4, 1, 2],\r\n        4: [5, 1, 2],\r\n        5: [5, 2, 3],\r\n        6: [6, 4, 3],\r\n        7: [6, 6, 3],\r\n        8: [6, 6, 3],\r\n\r\n    },\r\n\r\n    worker: {\r\n        1: [1, 1, 1],\r\n        2: [2, 2, 2]\r\n    },\r\n    builder: {\r\n        1: [1, 3, 1],\r\n        2: [2, 3, 1],\r\n        3: [2, 3, 1],\r\n        4: [3, 4, 2],\r\n        5: [2, 4, 2],\r\n        6: [3, 5, 3],\r\n        7: [5, 7, 5],\r\n        8: [7, 9, 7]\r\n\r\n    },\r\n    upgrader_base: {\r\n        1: [2, 1, 1],\r\n        2: [3, 1, 2],\r\n        3: [3, 1, 2],\r\n        4: [3, 1, 1],\r\n        5: [3, 1, 1],\r\n        6: [3, 1, 1],\r\n        7: [2, 1, 1],\r\n        8: [15, 5, 8]\r\n    },\r\n    repairer: {\r\n        3: [1, 3, 1],\r\n        4: [1, 3, 1],\r\n        5: [1, 3, 1],\r\n        6: [2, 6, 1], \r\n        7: [4, 12, 2], \r\n        8: [10, 6, 5], \r\n    },\r\n\r\n    transporter: {\r\n        1: [3, 3],\r\n        2: [6, 3],\r\n        3: [6, 3],\r\n        4: [6, 3],\r\n        5: [6, 3],\r\n        6: [10, 5],\r\n    },\r\n\r\n    initializer: {\r\n        1: [2, 1, 1]\r\n    },\r\n    iniQueen: {\r\n        1: [3, 3],\r\n    }\r\n\r\n}\r\n\r\nexport const bodyConfigs = {\r\n    harvester:{\r\n        1: {WORK: 2, CARRY: 1, MOVE: 1},\r\n        2: {WORK: 4, CARRY: 1, MOVE: 2}\r\n    },\r\n\r\n    worker: {\r\n        1: {\"work\": 1, \"carry\": 1, \"move\": 1},\r\n        2: {WORK: 2, CARRY: 2, MOVE: 2}\r\n    },\r\n\r\n    transporter: {\r\n        1: {CARRY: 3, MOVE: 3},\r\n        2: {CARRY: 3, MOVE: 3}\r\n    }\r\n  \r\n}\r\n\r\nexport const numConfigs = {\r\n    1: {\r\n        harvester: 2,\r\n        worker: 2\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport function workerSourceConfigUpdate(energyRCL: number, roomName: string): void {\r\n    //console.log(energyRCL);\r\n    \r\n    if (energyRCL == 1) {\r\n        const colonyMem = Memory['colony'][roomName];\r\n        const namePrefix = roomName;\r\n\r\n        const sourcePos = colonyMem['roomPlanning']['model']['source'];\r\n        const source1 = sourcePos[0];\r\n        const source2 = sourcePos[1];\r\n\r\n        const source1Pos = new RoomPosition(source1[0], source1[1], roomName);\r\n        const source2Pos = new RoomPosition(source2[0], source2[1], roomName);\r\n\r\n        const s1 = source1Pos.lookFor(LOOK_SOURCES);\r\n        const s2 = source2Pos.lookFor(LOOK_SOURCES);\r\n\r\n        //console.log(s1);\r\n        \r\n        colonyMem['dpt_work']['creep'][namePrefix+'_dptWork_1']['setting']['source'] = s1[0].id;\r\n\r\n        colonyMem['dpt_work']['creep'][namePrefix+'_dptWork_2']['setting']['source'] = s2[0].id;\r\n    }\r\n}\r\n\r\nexport function workerConfigUpdate(roomName: string, dptName: string, energyRCL: number,): void {\r\n    \r\n    if (energyRCL == 1) {\r\n        const source1id = Memory['colony'][roomName]['roomPlanning']['model']['source']['energy1'];\r\n        const source2id = Memory['colony'][roomName]['roomPlanning']['model']['source']['energy2'];\r\n\r\n        const creepsMem = Memory['colony'][roomName][dptName]['creep'];\r\n        let creepNameList = Array<string>();\r\n        for (let creepName in creepsMem) {\r\n            creepNameList.push(creepName);\r\n        }\r\n        \r\n        creepsMem[creepNameList[0]]['source'] = source1id;\r\n        creepsMem[creepNameList[1]]['source'] = source2id;\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function updateCreepSetting( roomName: string,  dptName: string, energyRCL: number) {\r\n    switch (dptName) {\r\n        case 'dpt_work': \r\n            workerConfigUpdate(roomName, dptName, energyRCL);\r\n            break;\r\n\r\n        case 'dpt_harvest':\r\n            break;\r\n\r\n        default:\r\n            console.log('Department name incorrect !');\r\n            \r\n    }\r\n    \r\n}\r\n\r\n\r\n","import { creepName } from \"@/colony/nameManagement\";\r\nimport * as setting from \"@/creep/setting\"\r\n\r\nexport class CreepSpawning {\r\n    mainRoom: string;       \r\n    memory: {};\r\n\r\n    constructor(mainRoom: string) {\r\n        this.mainRoom = mainRoom;\r\n        this.memory = Memory['colony'][mainRoom]['creepSpawning'];\r\n    }\r\n\r\n    /*\r\n        colonyMem['Spawning'] = {};\r\n        colonyMem['Spawning']['spawn'] = [];\r\n        colonyMem['Spawning']['task'] = [];\r\n        colonyMem['Spawning']['completeTask'] = {};\r\n    */\r\n\r\n\r\n    private notifyTaskComplete(name: string, role: string, dpt: string) {\r\n        const energyRCL = setting.getEnergyRCL(Game.rooms[this.mainRoom].energyCapacityAvailable);\r\n\r\n        Memory['colony'][this.mainRoom][dpt]['ticksToSpawn'][name] = Game.time + setting.ticksToSpawn(role, energyRCL) + 1500 + 10;\r\n        \r\n    }\r\n\r\n    public uid() {\r\n        //return (performance.now().toString(36)+Math.random().toString(36)).replace(/\\./g,\"\");\r\n        return (Math.random().toString(36).substr(2,9));\r\n    }\r\n\r\n    private spawn(spawnName: string, creepName: string, creepRole: string, creepData:{}, dpt: string, pull: boolean): ScreepsReturnCode {\r\n        const spawn = Game.spawns[spawnName];\r\n        const energyRCL = setting.getEnergyRCL(Game.rooms[this.mainRoom].energyCapacityAvailable);\r\n        //console.log(Game.rooms[this.mainRoom].energyCapacityAvailable);\r\n        \r\n        //console.log(energyRCL);\r\n        \r\n        const creepBody = setting.getBody(creepRole, energyRCL);\r\n        //console.log(creepBody);\r\n        \r\n        if (creepData) {\r\n            return spawn.spawnCreep(creepBody, creepName, {\r\n                memory: {\r\n                    role: creepRole, \r\n                    department: dpt,\r\n                    roomName: this.mainRoom,\r\n                    task: creepData,\r\n                    dontPullMe: pull\r\n                }\r\n            })\r\n        } \r\n        else return spawn.spawnCreep(creepBody, creepName);\r\n    }\r\n\r\n    static sendToSpawnRecycle(roomName: string, creepName: string, role: string, dpt: string) {\r\n        Memory['colony'][roomName]['creepSpawning']['task'][creepName] ={};\r\n            \r\n        const spawnTask = Memory['colony'][roomName]['creepSpawning']['task'][creepName];\r\n            \r\n        spawnTask['role'] = role;\r\n        spawnTask['roomName'] = roomName;\r\n        spawnTask['department'] = dpt;\r\n    }\r\n  \r\n    /** send a creep spawning task. In case of recycle creep, param task must be null*/\r\n    static sendToSpawnInitializacion(roomName: string, creepName: string, role: string,  task: {}, dpt: string, pull: boolean) {\r\n        Memory['colony'][roomName]['creepSpawning']['task'][creepName] ={};\r\n            \r\n        const spawnTask = Memory['colony'][roomName]['creepSpawning']['task'][creepName];\r\n            \r\n        spawnTask['role'] = role;\r\n        spawnTask['roomName'] = roomName;\r\n        spawnTask['department'] = dpt;\r\n        spawnTask['task'] = task;\r\n        spawnTask['dontPullMe'] = pull;\r\n    \r\n    }\r\n\r\n    private notifyOneTimeTRansporter(creepName:string, creepRole: string) {\r\n        const energyRCL = setting.getEnergyRCL(Game.rooms[this.mainRoom].energyCapacityAvailable);\r\n\r\n        Memory['colony'][this.mainRoom]['dpt_logistic']['oneTimeCreeps'][creepName] = Game.time + setting.ticksToSpawn(creepRole, energyRCL) + 1500 + 10;\r\n        \r\n    }\r\n\r\n    private spawnTaskExecution() {\r\n     \r\n        const spawnTask = this.memory['task']\r\n        let spawnIndex = 0;\r\n\r\n        for (let creepName in spawnTask) {  \r\n            //console.log(creepName);\r\n            \r\n            const spawnList = this.memory['spawn'];\r\n            if (spawnIndex < spawnList.length) {\r\n            \r\n              const spawnName:string = spawnList[spawnIndex];              \r\n              const creepRole = spawnTask[creepName]['role'];\r\n              const creepDpt = spawnTask[creepName]['department'];\r\n              const creepData = spawnTask[creepName]['task'];   //////////////////////\r\n              const pull = spawnTask[creepName]['dontPullMe'];\r\n              const rcode = this.spawn(spawnName, creepName, creepRole, creepData, creepDpt, pull);\r\n              //console.log(rcode);\r\n              if (rcode == OK) {\r\n                \r\n                delete spawnTask[creepName];\r\n\r\n                if (Memory['colony'][this.mainRoom][creepDpt]) this.notifyTaskComplete(creepName, creepRole, creepDpt);\r\n                else if (creepRole == 'transporter') this.notifyOneTimeTRansporter(creepName, creepRole);\r\n              }\r\n              \r\n              ++spawnIndex;\r\n            }\r\n        \r\n        }\r\n    }\r\n\r\n    private getAvailableSpawnName():string {\r\n\r\n        const spawnList = this.memory['spawn'];\r\n        for (let i = 0;  i < spawnList.length; ++i) {\r\n            if (Game.spawns[spawnList[i]].spawning == null) return spawnList[i];\r\n        }\r\n        return null;\r\n\r\n    }\r\n\r\n\r\n    private spawnQueen() {\r\n        const spawnName = this.getAvailableSpawnName();\r\n        \r\n        if (spawnName) {\r\n            //console.log(spawnName);\r\n\r\n            const source: LogisticSourceTask = {\r\n                id: null, \r\n                roomName: null,\r\n                pos: null\r\n            }\r\n            const data: LogisticData = {\r\n                source: source,\r\n                target: null\r\n            }\r\n            let r = this.spawn(spawnName, 'Queen'+ this.mainRoom, 'iniQueen', data, 'dpt_logistic', false);\r\n            //console.log(r);\r\n            \r\n            \r\n        }\r\n    }\r\n    static initializeCreepState(creepName: string) {\r\n        Memory.creeps[creepName]['ready'] = false;\r\n        Memory.creeps[creepName]['working'] = false;\r\n        if (Memory.creeps[creepName]['sendLogisticRequest']) {\r\n            Memory.creeps[creepName]['sendLogisticRequest'] = false;\r\n        }\r\n        //transporter\r\n        if (Memory.creeps[creepName]['sendTaskRequest']) {\r\n            Memory.creeps[creepName]['sendTaskRequest'] = false;\r\n        }\r\n\r\n        //builder\r\n        const role = Memory.creeps[creepName]['role'];\r\n        if (role == 'builder') {\r\n            Memory.creeps[creepName]['task']['logisticCreepName'] = null;\r\n            Memory.creeps[creepName]['task']['target']['id'] = null;\r\n        }\r\n        \r\n\r\n    }\r\n\r\n    private recycleQueenSpawning(spawnName: string, creepName: string, creepRole: string): ScreepsReturnCode {\r\n        const spawn = Game.spawns[spawnName];\r\n\r\n        const energyRCL = setting.getEnergyRCL(Game.rooms[this.mainRoom].energyCapacityAvailable);\r\n        const creepBody = setting.getBody(creepRole, energyRCL);\r\n        CreepSpawning.initializeCreepState(creepName);\r\n        \r\n        const rcode =  spawn.spawnCreep(creepBody, creepName);\r\n        if (rcode == OK) {\r\n            CreepSpawning.initializeCreepState(creepName);\r\n            Memory.creeps[creepName]['task']= {};\r\n            Memory.creeps[creepName]['task']['type'] = null;\r\n        }\r\n        return rcode\r\n        \r\n    }\r\n\r\n\r\n\r\n    public run(): void {\r\n        const queen = Game.creeps['Queen'+this.mainRoom];\r\n        let r: ScreepsReturnCode;\r\n        if (Memory.creeps['Queen'+this.mainRoom]) {\r\n            if (!queen) {\r\n                const spawnName = this.getAvailableSpawnName();\r\n                if (spawnName) {\r\n                    r = this.recycleQueenSpawning(spawnName, 'Queen'+this.mainRoom, 'transporter')\r\n                    //console.log(r);\r\n                    \r\n                    \r\n                }\r\n            }\r\n        } else {\r\n            this.spawnQueen();\r\n            \r\n        }\r\n\r\n        if (r != OK) {\r\n            this.spawnTaskExecution();\r\n            \r\n        }\r\n\r\n    }\r\n\r\n\r\n}","\r\nexport function getLinkReference(roomName: string, structureFunction: LinkFunction):number {\r\n    return Memory['colony'][roomName]['roomPlanning']['linkReference'][structureFunction];\r\n}\r\n\r\n/** CONTAINER CONSULTOR */\r\nexport function getContainerReference(roomName: string, structureFunction: ContainerFunction):number {\r\n    return Memory['colony'][roomName]['roomPlanning']['containerReference'][structureFunction];\r\n}\r\n\r\nexport function getContainerPos(roomName: string, containerFunction: ContainerFunction): [number, number] {\r\n    const sc1Reference = getContainerReference(roomName, containerFunction);\r\n    const sc1Pos: [number, number] = Memory['colony'][roomName]['roomPlanning']['model']['container'][sc1Reference]['pos'];\r\n    return sc1Pos;\r\n}\r\n\r\nexport function getContainerID(roomName: string, containerFunction: ContainerFunction): string {\r\n    const sc1Reference = getContainerReference(roomName, containerFunction);\r\n    const sc1ID: string = Memory['colony'][roomName]['roomPlanning']['model']['container'][sc1Reference]['id'];\r\n    return sc1ID;\r\n}\r\n\r\n\r\n\r\nexport function getConstructionSideID(roomName:string, pos: [number, number]) {\r\n    const targetPos = new RoomPosition(pos[0], pos[1], roomName);\r\n    const constructionSideList = targetPos.lookFor(LOOK_CONSTRUCTION_SITES);\r\n    console.log(constructionSideList);\r\n    \r\n    if (constructionSideList) {\r\n        //console.log(constructionSideList[0]['id']);\r\n        \r\n        return constructionSideList[0]['id'];\r\n    }\r\n    else return null;\r\n}\r\n\r\nexport function getSourceEnery1ID(roomName: string) {\r\n    return Memory['colony'][roomName]['roomPlanning']['model']['source'][0]['id'];\r\n}\r\n\r\n\r\nexport function getSourceEnery1Pos(roomName: string): [number, number] {\r\n    return Memory['colony'][roomName]['roomPlanning']['model']['source'][0]['pos'];\r\n}\r\n\r\nexport function getSourceEnery2ID(roomName: string) {\r\n    return Memory['colony'][roomName]['roomPlanning']['model']['source'][1]['id'];\r\n}\r\n\r\n\r\nexport function getSourceEnery2Pos(roomName: string): [number,number] {\r\n    return Memory['colony'][roomName]['roomPlanning']['model']['source'][1]['pos'];\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/******************** COMPU POSITION **********************/\r\n\r\n\r\n//Restriccion: pos no puede estar en el borde del mapa!!!\r\nexport function positionToHarvest(roomName: string, pos: [number, number]): [number, number][] {\r\n    const terrain = new Room.Terrain(roomName);\r\n    \r\n    let canStand:[number, number][] = [];\r\n    if (terrain.get(pos[0]-1, pos[1]+1) != 1) canStand.push([pos[0]-1, pos[1]+1]);  //x-1, y+1\r\n    if (terrain.get(pos[0]-1, pos[1]) != 1) canStand.push([pos[0]-1, pos[1]]);      //x-1, y\r\n    if (terrain.get(pos[0]-1, pos[1]-1) != 1) canStand.push([pos[0]-1, pos[1]-1]);  //x-1, y-1\r\n\r\n    if (terrain.get(pos[0], pos[1]+1) != 1) canStand.push([pos[0], pos[1]+1]);      //x, y+1\r\n    //if (terrain.get(pos[0], pos[1]) != 1) canStand.push([pos[0], pos[1]]);          //x, y\r\n    if (terrain.get(pos[0], pos[1]-1) != 1) canStand.push([pos[0]-1, pos[1]+1]);    //x, y-1\r\n\r\n    if (terrain.get(pos[0]+1, pos[1]+1) != 1) canStand.push([pos[0]+1, pos[1]+1]);  //x+1, y+1\r\n    if (terrain.get(pos[0]+1, pos[1]) != 1) canStand.push([pos[0]+1, pos[1]]);      //x-1, y\r\n    if (terrain.get(pos[0]+1, pos[1]-1) != 1) canStand.push([pos[0]+1, pos[1]-1]);  //x-1, y-1\r\n\r\n    return canStand\r\n}\r\n\r\n/************************ SEND TO SPAWN ************************/\r\n","\r\nexport function logisticTaskName(request: TaskRequest) {\r\n     //return (performance.now().toString(36)+Math.random().toString(36)).replace(/\\./g,\"\");\r\n    return (request.type + Math.random().toString(36).substr(2,7));\r\n}\r\n\r\nexport function repairerTaskName() {\r\n    //return (performance.now().toString(36)+Math.random().toString(36)).replace(/\\./g,\"\");\r\n   return ('repair_' + Math.random().toString(36).substr(2,7));\r\n}\r\n\r\nexport function creepName() {\r\n    return Math.random().toString(36).substr(2,10).toLocaleUpperCase()\r\n}\r\n\r\nexport function requestName() {\r\n    return (Math.random().toString(36).substr(2,6))\r\n}\r\n\r\nexport function towerTask() {\r\n    return ('TOWER' + Math.random().toString(36).substr(2,6));\r\n}\r\n","\r\n\r\n/******************* FASE1: OBJECT SEND REQUEST  ***********************/\r\n\r\nimport { logisticTaskName } from \"./nameManagement\";\r\n\r\n    /* Fase1.1:  TASK REQUEST CREATION */\r\nexport function moveRequest(id: string, pos: [number, number], roomName: string): MoveRequest {\r\n\r\n    const r: MoveRequest = {\r\n        type: 'MOVE',\r\n        source: {\r\n            id: id, \r\n            pos: pos, \r\n            roomName: roomName\r\n        }\r\n    }\r\n    return r;\r\n}\r\n\r\nexport function transferRequest(id: string, resourceType: ResourceConstant ,amount: number): TransferRequest {\r\n\r\n    const r: TransferRequest = {\r\n        type: 'TRANSFER',\r\n        target: {\r\n            id: id, \r\n            resourceType: resourceType,\r\n            amount: amount,\r\n        }\r\n    }\r\n    return r;\r\n}\r\n\r\nexport function withdrawRequest(id: string, roomName: string, pos:[number, number], resourceType: ResourceConstant): WithdrawRequest {\r\n    const r: WithdrawRequest = {\r\n        type: 'WITHDRAW',\r\n        source: {\r\n            id: id, \r\n            'roomName': roomName,\r\n            'pos': pos,\r\n            'resourceType':resourceType\r\n        }\r\n    }\r\n    return r;\r\n}\r\n\r\n\r\n    /************** Fase1.2. OBJECT: SEND TASK REQUEST ****************/\r\n\r\nexport function sendRequest(roomName: string ,dpt: string, creepName: string) {\r\n    Memory['colony'][roomName][dpt]['request'].push(creepName);\r\n}\r\n\r\n\r\n/******************* FASE2. DEPARTMENT: SEND TASK TO OBJ_DEPARTMENT  ***********************/\r\n    /* Fase2.1:  TASK CREATION */\r\nexport function task(request: TaskRequest) {\r\n\r\n    const task: Task = {\r\n        taskID: logisticTaskName(request),\r\n        data: request\r\n    }\r\n    return task;\r\n}\r\n\r\n    /* Fase2.2:  SEND LOGISTIC TASK */\r\nexport function sendLogisticTask(roomName: string , taskName: string ,request: TaskRequest) {\r\n    \r\n    Memory['colony'][roomName]['dpt_logistic']['targetTask'][taskName] = request;\r\n    \r\n}\r\n\r\n/** Game time to resend request */\r\nexport function getTTL(request: TaskRequest) {\r\n    if (request.type == 'MOVE') return 12\r\n}\r\n\r\n/******************* FASE3. Creep: TASK REQUEST  ***********************/\r\nexport function sendTaskRequest(creepName: string, roomName: string) {\r\n    Memory['colony'][roomName]['dpt_logistic']['requestCreep'].push(creepName);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n///////////////////////////**** OPERATION RESERCH ****/////////////////////////\r\nexport function sendORBuildingTaskCompletation(roomName: string): void {\r\n    Memory['colony'][roomName]['state']['buildColony']['task']['building'] = true;\r\n}\r\n\r\nexport function sendORLevelUpTaskCompletation(roomName: string): void {\r\n    Memory['colony'][roomName]['state']['buildColony']['task']['levelUp'] = true;\r\n}\r\n\r\n/*\r\nexport function sendBuildTask(roomName: string, constructionSideID: string, type: BuildableStructureConstant, pos: [number,number]):void {\r\n    Memory['colony'][roomName]['dpt_build']['buildTask'][constructionSideID] = {\r\n        'type': type,\r\n        'pos': pos,\r\n        'roomName': roomName\r\n\r\n    }\r\n    //actualize build cost\r\n    const buildCost = Memory['colony'][roomName]['dpt_build']['buildCost'];\r\n    Memory['colony'][roomName]['dpt_build']['buildCost'] = buildCost + CONSTRUCTION_COST[type];\r\n    \r\n}\r\n*/\r\n\r\nexport function sendBuildTask(constructionSideID: string, data: BuildTask):void {\r\n    Memory['colony'][data.roomName]['dpt_build']['buildTask'][constructionSideID] = data;\r\n\r\n\r\n    //actualize build cost\r\n    const buildCost = Memory['colony'][data.roomName]['dpt_build']['buildCost'];\r\n    Memory['colony'][data.roomName]['dpt_build']['buildCost'] = buildCost + CONSTRUCTION_COST[data.type];\r\n    \r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import * as dpt_config from \"@/department/dpt_config\"\r\n\r\nexport abstract class Department {\r\n    mainRoom: string;       \r\n    type: string;       //department type, e.g. dpt_harvest\r\n    memory: {};\r\n    spawnTaskMemory: {};\r\n    \r\n    constructor(mainRoom:string, type: string) {\r\n        this.mainRoom = mainRoom;\r\n        this.type = type;\r\n        this.memory = Memory['colony'][mainRoom][type];\r\n        this.spawnTaskMemory = Memory['colony'][mainRoom]['creepSpawning'];\r\n    }\r\n\r\n\r\n    protected sendSpawnTask(creepName: string, roleType: string): void {\r\n        const creepsList = this.memory['creep'];\r\n\r\n        const spawnTask: SpawnTask = {\r\n            creepName: creepName,\r\n            role: roleType,\r\n            dpt: 'dpt_build'\r\n        }\r\n        Memory['colony'][this.mainRoom]['creepSpawning']['task'][creepName] = {'role': roleType, 'dpt': 'dpt_build'}\r\n\r\n            //Memory['colony'][this.mainRoom]['creepSpawning']['task'].push(spawnTask);\r\n    \r\n    }\r\n\r\n    protected deleteCreep(creepName: string) {\r\n        \r\n    }\r\n\r\n    //protected abstract actualizeCreepNumber();\r\n\r\n    protected sendToSpawnInitializacion(creepName: string, role: string,  data: {}, dpt: string) {\r\n        Memory['colony'][this.mainRoom]['creepSpawning']['task'][creepName] ={};\r\n        \r\n        const spawnTask = Memory['colony'][this.mainRoom]['creepSpawning']['task'][creepName];\r\n        //console.log(creepName);\r\n        \r\n        spawnTask['role'] = role;\r\n        spawnTask['roomName'] = this.mainRoom;\r\n        spawnTask['department'] = dpt;\r\n        spawnTask['data'] = data;\r\n        \r\n\r\n    }\r\n\r\n    protected uid() {\r\n        //return (performance.now().toString(36)+Math.random().toString(36)).replace(/\\./g,\"\");\r\n        return (Math.random().toString(36).substr(2,9));\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n}","//Creep Controller\r\n\r\n\r\n\r\n//Restriccion: pos no puede estar en el borde del mapa!!!\r\nexport function positionToHarvest(roomName: string, pos: [number, number]): [number, number][] {\r\n    const terrain = new Room.Terrain(roomName);\r\n    \r\n    let canStand:[number, number][] = [];\r\n    if (terrain.get(pos[0]-1, pos[1]+1) != 1) canStand.push([pos[0]-1, pos[1]+1]);  //x-1, y+1\r\n    if (terrain.get(pos[0]-1, pos[1]) != 1) canStand.push([pos[0]-1, pos[1]]);      //x-1, y\r\n    if (terrain.get(pos[0]-1, pos[1]-1) != 1) canStand.push([pos[0]-1, pos[1]-1]);  //x-1, y-1\r\n\r\n    if (terrain.get(pos[0], pos[1]+1) != 1) canStand.push([pos[0], pos[1]+1]);      //x, y+1\r\n    if (terrain.get(pos[0], pos[1]) != 1) canStand.push([pos[0], pos[1]]);          //x, y\r\n    if (terrain.get(pos[0], pos[1]-1) != 1) canStand.push([pos[0]-1, pos[1]+1]);    //x, y-1\r\n\r\n    if (terrain.get(pos[0]+1, pos[1]+1) != 1) canStand.push([pos[0]+1, pos[1]+1]);  //x+1, y+1\r\n    if (terrain.get(pos[0]+1, pos[1]) != 1) canStand.push([pos[0]+1, pos[1]]);      //x-1, y\r\n    if (terrain.get(pos[0]+1, pos[1]-1) != 1) canStand.push([pos[0]+1, pos[1]-1]);  //x-1, y-1\r\n\r\n    return canStand\r\n}\r\n\r\n\r\n\r\n\r\nexport const permmanentCreepsRoleNum = {\r\n    dpt_build: {\r\n        role: 'worker',\r\n        numConfig: [2, 2, 2, 2, 2, 2, 2, 2]\r\n    }\r\n}\r\n\r\nexport const permanentNumConfigs = {\r\n    dpt_build: [2, 2, 2, 2, 2, 2, 2, 2],\r\n    dpt_harvest:[2, 2, 2, 2, 2, 2, 2, 2]\r\n    \r\n\r\n}\r\n\r\n\r\n\r\n\r\n","import { Department } from \"../Department\";\r\nimport * as dpt_config from \"@/department/dpt_config\"\r\nimport { moveRequest, sendLogisticTask } from \"@/colony/dpt_comunication\";\r\nimport { logisticTaskName } from \"@/colony/nameManagement\";\r\nimport { getEnergyRCL, ticksToSpawn } from \"@/creep/setting\";\r\nimport { CreepSpawning } from \"@/structure/CreepSpawning\";\r\n\r\n\r\nexport default class Dpt_Harvest extends Department {\r\n    \r\n    \r\n    constructor(dptRoom: string) {\r\n        super(dptRoom, 'dpt_harvest');\r\n    }\r\n\r\n    private getSourceId1() {\r\n        return Memory['colony'][this.mainRoom]['roomPlanning']['model']['source'][0]\r\n    }\r\n    private getSourceId2() {\r\n        return Memory['colony'][this.mainRoom]['roomPlanning']['model']['source'][1]\r\n\r\n    }\r\n    actualizeCreepNumber(): void {\r\n        const rclEnergy = getEnergyRCL(Game.rooms[this.mainRoom].energyCapacityAvailable);\r\n        if (rclEnergy == 1) {\r\n            const sourceId1 = this.getSourceId1();\r\n            const sourceId2 = this.getSourceId2();\r\n\r\n            let numCreepsNeeded1 = dpt_config.positionToHarvest(this.mainRoom, sourceId1['pos']).length;\r\n            if (numCreepsNeeded1 > 3) numCreepsNeeded1 = 3;\r\n            const data1:HarvesterData = {\r\n                source: sourceId1.id,\r\n                target: null\r\n            }\r\n\r\n            const role = 'harvester';\r\n            for (let i = 0; i < numCreepsNeeded1; ++i) {\r\n                const creepName = this.uid();\r\n                \r\n                this.sendToSpawnInitializacion(creepName, role,  data1, 'dpt_harvest')\r\n            }\r\n\r\n            let numCreepsNeeded2 = dpt_config.positionToHarvest(this.mainRoom, sourceId2['pos']).length;\r\n            if (numCreepsNeeded2 > 3) numCreepsNeeded2 = 3;\r\n            const data2 = {\r\n                source: sourceId2.id,\r\n                target: null\r\n            }\r\n            for (let i = 0; i < numCreepsNeeded2; ++i) {\r\n                const creepName = this.uid();\r\n                \r\n                this.sendToSpawnInitializacion(creepName, role, data2, 'dpt_harvest')\r\n            }\r\n\r\n\r\n        }\r\n        //let dif = numCreepsNeeded - activeCreeps;\r\n        \r\n\r\n        //setting.workerSourceConfigUpdate(rclEnergy, this.mainRoom);\r\n\r\n    }\r\n\r\n    private processRequest() {\r\n        const requestList = this.memory['request'];\r\n        for (let i = 0; i < requestList.length; ++i) {\r\n            const creepName = requestList[0];\r\n            const creep = Game.creeps[creepName];\r\n            const logisticTaskRequest: MoveRequest = moveRequest(creep.id, [creep.pos.x, creep.pos.y], creep.memory['roomName'])\r\n            sendLogisticTask(creep.memory['roomName'], logisticTaskName(logisticTaskRequest), logisticTaskRequest);\r\n        }\r\n        //clear request\r\n        this.memory['request'] = [];\r\n    }\r\n\r\n    static assigHarvesterToSource(roomName: string, source: \"source1\" | \"source2\", creepName: string) {\r\n        if (source == \"source1\") {\r\n            Memory['colony'][roomName]['dpt_harvest']['source1']['creeps'].push(creepName);\r\n        }\r\n        else {\r\n            Memory['colony'][roomName]['dpt_harvest']['source2']['creeps'].push(creepName);\r\n        }\r\n    }\r\n\r\n    private getHarvesterNeeded(): number {\r\n        \r\n        const availableEnergy = Game.rooms[this.mainRoom].energyCapacityAvailable;\r\n        const energyRCL = getEnergyRCL(availableEnergy);\r\n        //console.log(availableEnergy);\r\n        \r\n        //console.log(energyRCL);\r\n        \r\n        if (energyRCL == 1 ) return 3;\r\n        else if (energyRCL == 2) {\r\n            return 2;\r\n        }\r\n        else if (energyRCL == 3) {\r\n            return 2;\r\n        }\r\n        else  {\r\n            return 1;\r\n        }\r\n\r\n\r\n    }\r\n        \r\n    private checkCreepNum():void {\r\n        const creepsSource1 = this.memory['source1']['creeps'];\r\n        const creepsSource2 = this.memory['source2']['creeps'];\r\n        if(Game.rooms[this.mainRoom].controller.level == 1) return;\r\n        const harvesterNeeded = this.getHarvesterNeeded();\r\n        //console.log(harvesterNeeded);\r\n        \r\n        let toDelete = creepsSource1.length - harvesterNeeded;\r\n        while (toDelete) {\r\n            const creepDeleted = creepsSource1[creepsSource1.length-1];\r\n            delete this.memory['ticksToSpawn'][creepDeleted];\r\n            creepsSource1.pop();\r\n            --toDelete;\r\n        }\r\n\r\n        toDelete = creepsSource2.length - harvesterNeeded;\r\n        while (toDelete) {\r\n            const creepDeleted = creepsSource2[creepsSource1.length-1];\r\n            delete this.memory['ticksToSpawn'][creepDeleted];\r\n            creepsSource2.pop();\r\n            --toDelete;\r\n        }\r\n\r\n\r\n    }\r\n\r\n    private recycleCreep() {\r\n        const creepList = this.memory['ticksToSpawn'];\r\n        for (let creepName in creepList) {\r\n\r\n            if (creepList[creepName] && creepList[creepName] <= Game.time) {\r\n                CreepSpawning.sendToSpawnInitializacion(this.mainRoom, creepName, 'harvester',  null,'dpt_harvest', null);\r\n                this.memory['ticksToSpawn'][creepName] = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    static cleanContainerWithdrawPetition(roomName: string, containerId: string) {\r\n        Memory['colony'][roomName]['dpt_harvest']['container'][containerId]['withdrawPetition'] = false;\r\n    }\r\n\r\n    private checkContainerEnergy() {\r\n        const containerList = this.memory['container'];\r\n        for (let id in containerList) {\r\n           \r\n            if (! containerList[id]['withdrawPetition']) {   //@ts-ignore\r\n                const container = Game.getObjectById(id as Id<StructureContainer>);   \r\n                const resourceList = Object.keys(container.store);\r\n                \r\n                let resourceIndex = 0;\r\n                while (resourceIndex < resourceList.length && !containerList[id]['withdrawPetition']) {\r\n                    if (container.store[resourceList[resourceIndex]] >= 900) {\r\n                        const withdrawRequest: WithdrawRequest = {\r\n                            'type': 'WITHDRAW',\r\n                            'source': {\r\n                                'id': id,     \r\n                                'resourceType': resourceList[resourceIndex] as ResourceConstant,\r\n                                'roomName': container.room.name,\r\n                                'pos': [container.pos.x, container.pos.y]\r\n                                \r\n                            }\r\n                        }\r\n                        sendLogisticTask(this.mainRoom, logisticTaskName(withdrawRequest), withdrawRequest);\r\n                        containerList[id]['withdrawPetition'] = true;\r\n                    }\r\n                    ++resourceIndex;\r\n                }\r\n                \r\n            }\r\n        }\r\n    }\r\n\r\n    public run() {\r\n        if (Game.time % 151 == 0) {\r\n            this.checkCreepNum();\r\n        }\r\n        if (Game.time % 13 == 0) {\r\n            this.recycleCreep();\r\n        }\r\n\r\n        if (Game.time % 7 == 0) {\r\n            this.checkContainerEnergy();\r\n        }\r\n\r\n    }\r\n\r\n\r\n}","/*\r\nts版本\r\n\r\ncreep对穿+跨房间寻路+寻路缓存 \r\n跑的比香港记者还快从你做起\r\n应用此模块会导致creep.moveTo可选参数中这些项失效：reusePath、serializeMemory、noPathFinding、ignore、avoid、serialize\r\n保留creep.moveTo中其他全部可选参数如visualizePathStyle、range、ignoreDestructibleStructures、ignoreCreeps、ignoreRoad等\r\n新增creep.moveTo中可选参数ignoreSwamps，会无视swamp与road的移动力损耗差异，一律与plain相同处理，用于方便pc和眼，默认false\r\n例：creep.moveTo(controller, {ignoreSwamps: true});\r\n新增creep.moveTo中可选参数bypassHostileCreeps，被creep挡路时若此项为true则绕过别人的creep，默认为true，设为false用于近战攻击\r\n例：creep.moveTo(controller, {bypassHostileCreeps: false});\r\n新增creep.moveTo中可选参数bypassRange，被creep挡路准备绕路时的绕路半径，默认为5\r\n例：creep.moveTo(controller, {bypassRange: 10});\r\n新增creep.moveTo中可选参数noPathDelay，寻得的路是不完全路径时的再次寻路延迟，默认为10\r\n例：creep.moveTo(controller, {noPathDelay: 5});\r\n新增返回值ERR_INVALID_ARGS，表示range或者bypassRange类型错误\r\n\r\n遇到己方creep自动进行对穿，遇到自己设置了不想被对穿的creep（或bypassHostileCreeps设为true时遇到他人creep）会自动绕过\r\n会将新手墙和部署中的invaderCore处理为无法通过\r\n会绕过非终点的portal，不影响creep.moveTo(portal)\r\n不使用Memory及global，不会因此干扰外部代码\r\n不会在Creep.prototype、PowerCreep.prototype上增加官方未有的键值，不会因此干扰外部代码\r\n本模块不可用于sim，在sim会因为房间名格式不对返回ERR_INVALID_TARGET\r\n模块参数见代码头部，模块接口见代码尾部\r\n版本号规则：alpha test = 0.1.x，beta test = 0.9.x，publish >= 1.0.0\r\n\r\nauthor: Scorpior\r\ndebug helpers: fangxm, czc\r\ninspired by: Yuandiaodiaodiao\r\ndate: 2020/3/30\r\nversion: 0.9.4(beta test)\r\n\r\nUsage:\r\nimport \"./超级移动优化\"\r\n\r\n\r\nchangelog:\r\n0.1.0:  maybe not runnable\r\n0.1.1： still maybe not runnable，修了一些typo，完成正向移动，修改isObstacleStructure\r\n0.1.2： maybe runnable，some bugs are fixed\r\n0.1.3:  修正工地位置寻路错误，调整打印格式\r\n0.1.4:  补充pc对穿，打印中增加cache hits统计\r\n0.9.0:  启用自动清理缓存，保留ignoreCreeps参数，调整对穿顺序+增加在storage附近检查对穿，\r\n        正确识别敌对rampart，正确查询带range路径，打印中增加对穿频率统计\r\n0.9.1:  增加正常逻辑开销统计，修改cache搜索开销统计为cache miss开销统计，绕路bugfix，跨房检测bugfix，other bugfix\r\n0.9.2:  修改缓存策略减少查找耗时增加命中率，增加核心区对穿次数统计，对穿bugfix，other bugfix\r\n0.9.3： 取消路径反向复用避免偶发的复用非最优路径的情况，改进识别被新手墙封闭的房间，增加avoidRooms设置，\r\n        增加远距离跨房寻路成功率，房间出口处对穿bug fix\r\n0.9.4:  优化路径复用避免偶发的复用非最优路径的情况，删除运行时参数中neutralCostMatrixClearDelay，\r\n        自动根据挡路建筑情况设置中立房间costMatrix过期时间，增加ob寻路（检查房间是否可走），\r\n        提供deletePathInRoom接口（使用方式见下方ps），print()中增加平均每次查找缓存时检查的路径数量统计，\r\n        findRoute遇到过道新手墙时bugfix，偏移路径bugfix\r\n0.9.5： TODO：ignoreSwamp避开路，提供deletePathFromRoom、deletePathToRoom接口，增加自动visual，betterMove\r\n\r\n\r\nps:\r\n1.默认ignoreCreeps为true，主动设置ignoreCreeps为false会在撞到creep时重新寻路\r\n2.对于不想被对穿的creep（比如没有脚的中央搬运工）, 设置memory：\r\ncreep.memory.dontPullMe = true;\r\n3.修路后希望手动更新房间内路径，可执行如下代码：\r\nrequire('超级移动优化').deletePathInRoom(roomName);\r\n4.战斗中遇到敌方pc不断产生新rampart挡路的情况，目前是撞上建筑物才重新寻路（原版moveTo撞上也继续撞），如果觉得需要手动提前激活重新寻路则联系我讨论\r\n5.在控制台输入require('超级移动优化').print()获取性能信息，鼓励发给作者用于优化\r\n*/\r\n\r\n/***************************************\r\n *  模块参数\r\n */\r\n// 初始化参数\r\nlet config = {\r\n    地图房号最大数字超过100: false,\r\n    changeMove: true,   // 【未启用】为creep.move增加对穿能力\r\n    changeMoveTo: true, // 全面优化creep.moveTo，跨房移动也可以一个moveTo解决问题\r\n    changeFindClostestByPath: true,     // 【未启用】轻度修改findClosestByPath，使得默认按照ignoreCreeps寻找最短\r\n    autoVisual: true,  // 【未启用】\r\n    enableFlee: false   // 【未启用】是否添加flee()函数，注意这会在Creep.prototype上添加官方未有键值，flee()用法见最底下module.exports处\r\n}\r\n// 运行时参数 \r\nlet pathClearDelay = 5000;  // 清理相应时间内都未被再次使用的路径，同时清理死亡creep的缓存，设为undefined表示不清除缓存\r\nlet hostileCostMatrixClearDelay = 500; // 自动清理相应时间前创建的其他玩家房间的costMatrix\r\nlet coreLayoutRange = 3; // 核心布局半径，在离storage这个范围内频繁检查对穿（减少堵路的等待\r\n// let avoidRooms = ['E18S8', 'E19S9', 'E21S9', 'E24S8', 'E35N6', 'E25S9',\r\n//     'E19N2', 'E18N3', 'E29N5', 'E29N3', 'E28N8', 'E33N9', 'E34N8',\r\n//     'E37N6', 'E41N8', 'E39N11', 'E39N12', 'E39N13', 'E17S9']      // 永不踏入这些房间\r\nlet avoidRooms = ['W46S14', 'W46S11', 'W47S9', 'W46S9', 'W45S9', 'W44S9']      // 永不踏入这些房间\r\nlet avoidExits = {\r\n    // 'E35N7': 'E35N6',\r\n    'W47S14': 'W46S14',\r\n    'fromRoom': 'toRoom'\r\n}   // 【未启用】单向屏蔽房间的一些出口，永不从fromRoom踏入toRoom\r\n/** @type {{id:string, roomName:string, taskQueue:{path:MyPath, idx:number, roomName:string}[]}[]} */\r\n// let observers = ['5e3646219c6dc78024fd7097', '5e55e9b8673548d9468a2d3d', '5e36372d00fab883d281d95e'];  // 如果想用ob寻路，把ob的id放这里\r\nlet observers = ['617ab31dd8dc485dfd4310d7'];  // 如果想用ob寻路，把ob的id放这里\r\n/***************************************\r\n *  局部缓存\r\n */\r\n/** @type {{ [time: number]:{path:MyPath, idx:number, roomName:string}[] }} */\r\nlet obTimer = {};   // 【未启用】用于登记ob调用，在相应的tick查看房间对象\r\nlet obTick = Game.time;\r\n/** @type {Paths} */\r\nlet globalPathCache = {};     // 缓存path\r\n/** @type {MoveTimer} */\r\nlet pathCacheTimer = {}; // 用于记录path被使用的时间，清理长期未被使用的path\r\n/** @type {CreepPaths} */\r\nlet creepPathCache = {};    // 缓存每个creep使用path的情况\r\nlet creepMoveCache = {};    // 缓存每个creep最后一次移动的tick\r\nlet emptyCostMatrix = new PathFinder.CostMatrix;\r\n/** @type {CMs} */\r\nlet costMatrixCache = {};    // true存ignoreDestructibleStructures==true的，false同理\r\n/** @type {{ [time: number]:{roomName:string, avoids:string[]}[] }} */\r\nlet costMatrixCacheTimer = {}; // 用于记录costMatrix的创建时间，清理过期costMatrix\r\nlet autoClearTick = Game.time;  // 用于避免重复清理缓存\r\n\r\nconst obstacles = new Set(OBSTACLE_OBJECT_TYPES);\r\nconst originMove = Creep.prototype.move;\r\nconst originMoveTo = Creep.prototype.moveTo;\r\nconst originFindClosestByPath = RoomPosition.prototype.findClosestByPath;\r\n\r\n// 统计变量\r\nlet startTime;\r\nlet endTime;\r\nlet startCacheSearch;\r\nlet analyzeCPU = { // 统计相关函数总耗时\r\n    move: { sum: 0, calls: 0 },\r\n    moveTo: { sum: 0, calls: 0 },\r\n    findClosestByPath: { sum: 0, calls: 0 }\r\n};\r\nlet pathCounter = 0;\r\nlet testCacheHits = 0;\r\nlet testCacheMiss = 0;\r\nlet testNormal = 0;\r\nlet testNearStorageCheck = 0;\r\nlet testNearStorageSwap = 0;\r\nlet testTrySwap = 0;\r\nlet testBypass = 0;\r\nlet normalLogicalCost = 0;\r\nlet cacheHitCost = 0;\r\nlet cacheMissCost = 0;\r\n\r\n/***************************************\r\n *  util functions\r\n */\r\nlet reg1 = /^([WE])([0-9]+)([NS])([0-9]+)$/;    // parse得到['E28N7','E','28','N','7']\r\n/**\r\n *  统一到大地图坐标，平均单次开销0.00005\r\n * @param {RoomPosition} pos \r\n */\r\nfunction formalize(pos) {\r\n    let splited = reg1.exec(pos.roomName);\r\n    if (splited && splited.length == 5) {\r\n        return { // 如果这里出现类型错误，那么意味着房间名字不是正确格式但通过了parse，小概率事件\r\n            x: (splited[1] === 'W' ? -splited[2] : +splited[2] + 1) * 50 + pos.x,\r\n            y: (splited[3] === 'N' ? -splited[4] : +splited[4] + 1) * 50 + pos.y\r\n        }\r\n    } // else 房间名字不是正确格式\r\n    return {}\r\n}\r\n\r\nfunction getAdjacents(pos) {\r\n    let posArray = [];\r\n    for (let i = -1; i <= 1; i++) {\r\n        for (let j = -1; j <= 1; j++) {\r\n            posArray.push({\r\n                x: pos.x + i,\r\n                y: pos.y + j\r\n            })\r\n        }\r\n    }\r\n    return posArray;\r\n}\r\n\r\n/**\r\n *  阉割版isEqualTo，提速\r\n * @param {RoomPosition} pos1 \r\n * @param {RoomPosition} pos2 \r\n */\r\nfunction isEqual(pos1, pos2) {\r\n    return pos1.x == pos2.x && pos1.y == pos2.y && pos1.roomName == pos2.roomName;\r\n}\r\n\r\n/**\r\n *  兼容房间边界\r\n *  参数具有x和y属性就行\r\n * @param {RoomPosition} pos1 \r\n * @param {RoomPosition} pos2 \r\n */\r\nfunction isNear(pos1, pos2) {\r\n    if (pos1.roomName == pos2.roomName) {    // undefined == undefined 也成立\r\n        return -1 <= pos1.x - pos2.x && pos1.x - pos2.x <= 1 && -1 <= pos1.y - pos2.y && pos1.y - pos2.y <= 1;\r\n    } else if (pos1.roomName && pos2.roomName) {    // 是完整的RoomPosition\r\n        if (pos1.x + pos2.x != 49 && pos1.y + pos2.y != 49) return false;    // 肯定不是两个边界点, 0.00003 cpu\r\n        // start\r\n        let splited1 = reg1.exec(pos1.roomName);\r\n        let splited2 = reg1.exec(pos2.roomName);\r\n        if (splited1 && splited1.length == 5 && splited2 && splited2.length == 5) {\r\n            // 统一到大地图坐标\r\n            let formalizedEW = (splited1[1] === 'W' ? -splited1[2] : +splited1[2] + 1) * 50 + pos1.x - (splited2[1] === 'W' ? -splited2[2] : +splited2[2] + 1) * 50 - pos2.x;\r\n            let formalizedNS = (splited1[3] === 'N' ? -splited1[4] : +splited1[4] + 1) * 50 + pos1.y - (splited2[3] === 'N' ? -splited2[4] : +splited2[4] + 1) * 50 - pos2.y;\r\n            return -1 <= formalizedEW && formalizedEW <= 1 && -1 <= formalizedNS && formalizedNS <= 1;\r\n        }\r\n        // end - start = 0.00077 cpu\r\n    }\r\n    return false\r\n}\r\n\r\n/** \r\n* @param {RoomPosition} pos1 \r\n* @param {RoomPosition} pos2 \r\n*/\r\nfunction inRange(pos1, pos2, range) {\r\n    if (pos1.roomName == pos2.roomName) {\r\n        return -range <= pos1.x - pos2.x && pos1.x - pos2.x <= range && -range <= pos1.y - pos2.y && pos1.y - pos2.y <= range;\r\n    } else {\r\n        pos1 = formalize(pos1);\r\n        pos2 = formalize(pos2);\r\n        return pos1.x && pos2.x && inRange(pos1, pos2);\r\n    }\r\n}\r\n\r\n/**\r\n *  fromPos和toPos是pathFinder寻出的路径上的，只可能是同房相邻点或者跨房边界点\r\n * @param {RoomPosition} fromPos \r\n * @param {RoomPosition} toPos \r\n */\r\nfunction getDirection(fromPos, toPos) {\r\n    if (fromPos.roomName == toPos.roomName) {\r\n        if (toPos.x > fromPos.x) {    // 下一步在右边\r\n            if (toPos.y > fromPos.y) {    // 下一步在下面\r\n                return BOTTOM_RIGHT;\r\n            } else if (toPos.y == fromPos.y) { // 下一步在正右\r\n                return RIGHT;\r\n            }\r\n            return TOP_RIGHT;   // 下一步在上面\r\n        } else if (toPos.x == fromPos.x) { // 横向相等\r\n            if (toPos.y > fromPos.y) {    // 下一步在下面\r\n                return BOTTOM;\r\n            } else if (toPos.y < fromPos.y) {\r\n                return TOP;\r\n            }\r\n        } else {  // 下一步在左边\r\n            if (toPos.y > fromPos.y) {    // 下一步在下面\r\n                return BOTTOM_LEFT;\r\n            } else if (toPos.y == fromPos.y) {\r\n                return LEFT;\r\n            }\r\n            return TOP_LEFT;\r\n        }\r\n    } else {  // 房间边界点\r\n        if (fromPos.x == 0 || fromPos.x == 49) {  // 左右相邻的房间，只需上下移动（左右边界会自动弹过去）\r\n            if (toPos.y > fromPos.y) {   // 下一步在下面\r\n                return BOTTOM;\r\n            } else if (toPos.y < fromPos.y) { // 下一步在上\r\n                return TOP\r\n            } // else 正左正右\r\n            return fromPos.x ? RIGHT : LEFT;\r\n        } else if (fromPos.y == 0 || fromPos.y == 49) {    // 上下相邻的房间，只需左右移动（上下边界会自动弹过去）\r\n            if (toPos.x > fromPos.x) {    // 下一步在右边\r\n                return RIGHT;\r\n            } else if (toPos.x < fromPos.x) {\r\n                return LEFT;\r\n            }// else 正上正下\r\n            return fromPos.y ? BOTTOM : TOP;\r\n        }\r\n    }\r\n}\r\n\r\nlet reg2 = /^[WE]([0-9]+)[NS]([0-9]+)$/;    // parse得到['E28N7','28','7']\r\nlet isHighWay = config.地图房号最大数字超过100 ?\r\n    (roomName) => {\r\n        let splited = reg2.exec(roomName);\r\n        return splited[1] % 10 == 0 || splited[2] % 10 == 0;\r\n    } :\r\n    (roomName) => {\r\n        // E0 || E10 || E1S0 || [E10S0|E1S10] || [E10S10] 比正则再除快\r\n        return roomName[1] == 0 || roomName[2] == 0 || roomName[3] == 0 || roomName[4] == 0 || roomName[5] == 0;\r\n    }\r\n\r\n/**\r\n *  缓存的路径和当前moveTo参数相同\r\n * @param {MyPath} path \r\n * @param {*} ops \r\n */\r\nfunction isSameOps(path, ops) {\r\n    return path.ignoreRoads == !!ops.ignoreRoads &&\r\n        path.ignoreSwamps == !!ops.ignoreSwamps &&\r\n        path.ignoreStructures == !!ops.ignoreDestructibleStructures;\r\n}\r\n\r\nfunction hasActiveBodypart(body, type) {\r\n    if (!body) {\r\n        return true;\r\n    }\r\n\r\n    for (var i = body.length - 1; i >= 0; i--) {\r\n        if (body[i].hits <= 0)\r\n            break;\r\n        if (body[i].type === type)\r\n            return true;\r\n    }\r\n\r\n    return false;\r\n\r\n}\r\n\r\nfunction isClosedRampart(structure) {\r\n    return structure.structureType == STRUCTURE_RAMPART && !structure.my && !structure.isPublic;\r\n}\r\n\r\n/**\r\n *  查看是否有挡路建筑\r\n * @param {Room} room\r\n * @param {RoomPosition} pos \r\n * @param {boolean} ignoreStructures\r\n */\r\nfunction isObstacleStructure(room, pos, ignoreStructures) {\r\n    let consSite = room.lookForAt(LOOK_CONSTRUCTION_SITES, pos);\r\n    if (0 in consSite && consSite[0].my && obstacles.has(consSite[0].structureType)) {  // 工地会挡路\r\n        return true;\r\n    }\r\n    for (let s of room.lookForAt(LOOK_STRUCTURES, pos)) {\r\n        if (!s.hits || s.ticksToDeploy) {     // 是新手墙或者无敌中的invaderCore\r\n            return true;\r\n        } else if (!ignoreStructures && (obstacles.has(s.structureType) || isClosedRampart(s))) {\r\n            return true\r\n        }\r\n    }\r\n    return false;\r\n    // let possibleStructures = room.lookForAt(LOOK_STRUCTURES, pos);  // room.lookForAt比pos.lookFor快\r\n    // 万一有人把路修在extension上，导致需要每个建筑都判断，最多重叠3个建筑（rap+road+其他）\r\n    // return obstacles.has(possibleStructures[0]) || obstacles.has(possibleStructures[1]) || obstacles.has(possibleStructures[2]);    // 条件判断平均每次0.00013cpu\r\n}\r\n\r\n/**\r\n *  登记ob需求\r\n * @param {MyPath} path \r\n * @param {number} idx \r\n */\r\nfunction addObTask(path, idx) {\r\n    let roomName = path.posArray[idx].roomName;\r\n    //console.log('准备ob ' + roomName);\r\n    for (let obData of observers) {\r\n        if (Game.map.getRoomLinearDistance(obData.roomName, roomName) <= 10) {\r\n            obData.taskQueue.push({ path: path, idx: idx, roomName: roomName });\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n *  尝试用ob检查路径\r\n */\r\nfunction doObTask() {\r\n    for (let obData of observers) { // 遍历所有ob\r\n        let queue = obData.taskQueue;\r\n        while (queue.length) {  // 没有task就pass\r\n            let task = queue[queue.length - 1];\r\n            let roomName = task.roomName;\r\n            if (roomName in costMatrixCache) {  // 有过视野不用再ob\r\n                if (!task.path.directionArray[task.idx]) {\r\n                    //console.log(roomName + ' 有视野了无需ob');\r\n                    checkRoom({ name: roomName }, task.path, task.idx - 1);\r\n                }\r\n                queue.pop();\r\n                continue;\r\n            }\r\n            /** @type {StructureObserver} */\r\n            let ob = Game.getObjectById(obData.id);\r\n            if (ob) {\r\n                //console.log('ob ' + roomName);\r\n                ob.observeRoom(roomName);\r\n                if (!(Game.time + 1 in obTimer)) {\r\n                    obTimer[Game.time + 1] = [];\r\n                }\r\n                obTimer[Game.time + 1].push({ path: task.path, idx: task.idx, roomName: roomName });    // idx位置无direction\r\n            } else {\r\n                observers.splice(observers.indexOf(obData), 1);\r\n            }\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n *  查看ob得到的房间\r\n */\r\nfunction checkObResult() {\r\n    for (let tick in obTimer) {\r\n        if (tick < Game.time) {\r\n            delete obTimer[tick];\r\n            continue;   // 后面可能还有要检查的\r\n        } else if (tick == Game.time) {\r\n            for (let result of obTimer[tick]) {\r\n                if (result.roomName in Game.rooms) {\r\n                    //console.log('ob得到 ' + result.roomName);\r\n                    checkRoom(Game.rooms[result.roomName], result.path, result.idx - 1);    // checkRoom要传有direction的idx\r\n                }\r\n            }\r\n            delete obTimer[tick];\r\n        } // else 没有要检查的\r\n        break;  // 检查完了或者没有要检查的\r\n    }\r\n}\r\n\r\n/**\r\n *  为房间保存costMatrix，ignoreDestructibleStructures这个参数的两种情况各需要一个costMatrix\r\n *  设置costMatrix缓存的过期时间\r\n * @param {Room} room \r\n * @param {RoomPosition} pos\r\n */\r\nfunction generateCostMatrix(room, pos) {\r\n    let noStructureCostMat = new PathFinder.CostMatrix; // 不考虑可破坏的建筑，但是要考虑墙上资源点和无敌的3种建筑，可能还有其他不能走的？\r\n    let structureCostMat = new PathFinder.CostMatrix;   // 在noStructrue的基础上加上所有不可行走的建筑\r\n    let totalStructures = room.find(FIND_STRUCTURES);\r\n    let 修路也没用的墙点 = [].concat(room.find(FIND_SOURCES), room.find(FIND_MINERALS), room.find(FIND_DEPOSITS));\r\n    let x, y, noviceWall, deployingCore, centralPortal;\r\n    let clearDelay = Infinity;\r\n    for (let object of 修路也没用的墙点) {\r\n        x = object.pos.x; y = object.pos.y;\r\n        noStructureCostMat.set(x, y, 255);\r\n    }\r\n    if (room.controller && (room.controller.my || room.controller.safeMode)) {  // 自己的工地不能踩\r\n        for (let consSite of room.find(FIND_CONSTRUCTION_SITES)) {\r\n            if (obstacles.has(consSite.structureType)) {\r\n                x = consSite.pos.x; y = consSite.pos.y;\r\n                noStructureCostMat.set(x, y, 255);\r\n                structureCostMat.set(x, y, 255);\r\n            }\r\n        }\r\n    }\r\n    for (let s of totalStructures) {\r\n        if (s.structureType == STRUCTURE_INVADER_CORE) {  // 第1种可能无敌的建筑\r\n            if (s.ticksToDeploy) {\r\n                deployingCore = true;\r\n                clearDelay = clearDelay > s.ticksToDeploy ? s.ticksToDeploy : clearDelay;\r\n                noStructureCostMat.set(s.pos.x, s.pos.y, 255);\r\n            }\r\n            structureCostMat.set(s.pos.x, s.pos.y, 255);\r\n        } else if (s.structureType == STRUCTURE_PORTAL) {  // 第2种无敌建筑\r\n            if (!isHighWay(room.name)) {\r\n                centralPortal = true;\r\n                clearDelay = clearDelay > s.ticksToDecay ? s.ticksToDecay : clearDelay;\r\n            }\r\n            x = s.pos.x; y = s.pos.y;\r\n            structureCostMat.set(x, y, 255);\r\n            noStructureCostMat.set(x, y, 255);\r\n        } else if (s.structureType == STRUCTURE_WALL) {    // 第3种可能无敌的建筑\r\n            if (!s.hits) {\r\n                noviceWall = true;\r\n                noStructureCostMat.set(s.pos.x, s.pos.y, 255);\r\n            }\r\n            structureCostMat.set(s.pos.x, s.pos.y, 255);\r\n        } else if (s.structureType == STRUCTURE_ROAD) {    // 路的移动力损耗是1，此处设置能寻到墙上的路\r\n            x = s.pos.x; y = s.pos.y;\r\n            if (noStructureCostMat.get(x, y) == 0) {  // 不是在3种无敌建筑或墙中资源上\r\n                noStructureCostMat.set(x, y, 1);\r\n                if (structureCostMat.get(x, y) == 0) {     // 不是在不可行走的建筑上\r\n                    structureCostMat.set(x, y, 1);\r\n                }\r\n            }\r\n        } else if (obstacles.has(s.structureType) || isClosedRampart(s)) {   // HELP：有没有遗漏其他应该设置 noStructureCostMat 的点\r\n            structureCostMat.set(s.pos.x, s.pos.y, 255);\r\n        }\r\n    }\r\n\r\n    costMatrixCache[room.name] = {\r\n        roomName: room.name,\r\n        true: noStructureCostMat,   // 对应 ignoreDestructibleStructures = true\r\n        false: structureCostMat     // 对应 ignoreDestructibleStructures = false\r\n    };\r\n\r\n    let avoids = [];\r\n    if (room.controller && room.controller.owner && !room.controller.my && hostileCostMatrixClearDelay) {  // 他人房间，删除costMat才能更新被拆的建筑位置\r\n        if (!(Game.time + hostileCostMatrixClearDelay in costMatrixCacheTimer)) {\r\n            costMatrixCacheTimer[Game.time + hostileCostMatrixClearDelay] = [];\r\n        }\r\n        costMatrixCacheTimer[Game.time + hostileCostMatrixClearDelay].push({\r\n            roomName: room.name,\r\n            avoids: avoids\r\n        });   // 记录清理时间\r\n    } else if (noviceWall || deployingCore || centralPortal) { // 如果遇到可能消失的挡路建筑，这3种情况下clearDelay才可能被赋值为非Infinity\r\n        if (noviceWall) {    // 如果看见新手墙\r\n            let neighbors = Game.map.describeExits(room.name);\r\n            for (let direction in neighbors) {\r\n                let status = Game.map.getRoomStatus(neighbors[direction]);\r\n                if (status.status == 'closed') {\r\n                    avoidRooms[neighbors[direction]] = 1;\r\n                } else if (status.status != 'normal' && status.timestamp != null) {\r\n                    let estimateTickToChange = (status.timestamp - new Date().getTime()) / 10000; // 10s per tick\r\n                    clearDelay = clearDelay > estimateTickToChange ? Math.ceil(estimateTickToChange) : clearDelay;\r\n                }\r\n            }\r\n            if (pos) {  // 如果知道自己的pos\r\n                for (let direction in neighbors) {\r\n                    if (!(neighbors[direction] in avoidRooms)) {\r\n                        let exits = room.find(+direction);\r\n                        if (PathFinder.search(pos, exits, { maxRooms: 1, roomCallback: () => noStructureCostMat }).incomplete) {    // 此路不通\r\n                            avoidRooms[neighbors[direction]] = 1;\r\n                            avoids.push(neighbors[direction]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        //console.log(room.name + ' costMat 设置清理 ' + clearDelay);\r\n        if (!(Game.time + clearDelay in costMatrixCacheTimer)) {\r\n            costMatrixCacheTimer[Game.time + clearDelay] = [];\r\n        }\r\n        costMatrixCacheTimer[Game.time + clearDelay].push({\r\n            roomName: room.name,\r\n            avoids: avoids  // 因新手墙导致的avoidRooms需要更新\r\n        });   // 记录清理时间\r\n    }\r\n    //console.log('生成costMat ' + room.name);\r\n\r\n}\r\n\r\n/**\r\n *  把路径上有视野的位置的正向移动方向拿到，只有在找新路时调用，找新路时会把有视野房间都缓存进costMatrixCache\r\n * @param {MyPath} path \r\n */\r\nfunction generateDirectionArray(path) {\r\n    let posArray = path.posArray\r\n    let directionArray = new Array(posArray.length);\r\n    let incomplete = false;\r\n    for (let idx = 1; idx in posArray; idx++) {\r\n        if (posArray[idx - 1].roomName in costMatrixCache) {    // 有costMat，是准确路径，否则需要在有视野时checkRoom()\r\n            directionArray[idx] = getDirection(posArray[idx - 1], posArray[idx]);\r\n        } else if (!incomplete) {   // 记录第一个缺失准确路径的位置\r\n            incomplete = idx;\r\n        }\r\n    }\r\n    if (observers.length && incomplete) {\r\n        addObTask(path, incomplete); // 这格没有direction\r\n    }\r\n    path.directionArray = directionArray;\r\n}\r\n\r\n/**\r\n *  第一次拿到该room视野，startIdx是新房中唯一有direction的位置\r\n * @param {Room} room \r\n * @param {MyPath} path \r\n * @param {number} startIdx \r\n */\r\nfunction checkRoom(room, path, startIdx) {\r\n    if (!(room.name in costMatrixCache)) {\r\n        generateCostMatrix(room, path.posArray[startIdx]);\r\n    }\r\n    let thisRoomName = room.name\r\n    /** @type {CostMatrix} */\r\n    let costMat = costMatrixCache[thisRoomName][path.ignoreStructures];\r\n    let posArray = path.posArray;\r\n    let directionArray = path.directionArray;\r\n    let i;\r\n    for (i = startIdx; i + 1 in posArray && posArray[i].roomName == thisRoomName; i++) {\r\n        if (costMat.get(posArray[i].x, posArray[i].y) == 255) {   // 路上有东西挡路\r\n            return false;\r\n        }\r\n        directionArray[i + 1] = getDirection(posArray[i], posArray[i + 1]);\r\n    }\r\n    if (observers.length && i + 1 in posArray) {\r\n        while (i + 1 in posArray) {\r\n            if (!directionArray[i + 1]) {\r\n                addObTask(path, i + 1);     // 这格没有direction\r\n                break;\r\n            }\r\n            i += 1;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\n/**\r\n *  尝试对穿，有2种不可穿情况\r\n * @param {Creep} creep \r\n * @param {RoomPosition} pos  \r\n * @param {boolean} bypassHostileCreeps\r\n */\r\nfunction trySwap(creep, pos, bypassHostileCreeps, ignoreCreeps) {     // ERR_NOT_FOUND开销0.00063，否则开销0.0066\r\n    let obstacleCreeps = creep.room.lookForAt(LOOK_CREEPS, pos).concat(creep.room.lookForAt(LOOK_POWER_CREEPS, pos));\r\n    if (obstacleCreeps.length) {\r\n        if (!ignoreCreeps) {\r\n            return ERR_INVALID_TARGET;\r\n        }\r\n        for (let c of obstacleCreeps) {\r\n            if (c.my) {\r\n                if (c.memory.dontPullMe) {    // 第1种不可穿情况：挡路的creep设置了不对穿\r\n                    return ERR_INVALID_TARGET;\r\n                }\r\n                if (creepMoveCache[c.name] != Game.time && originMove.call(c, getDirection(pos, creep.pos)) == ERR_NO_BODYPART && creep.pull) {\r\n                    creep.pull(c);\r\n                    originMove.call(c, creep);\r\n                }\r\n            } else if (bypassHostileCreeps && (!c.room.controller || !c.room.controller.my || !c.room.controller.safeMode)) {  // 第二种不可穿情况：希望绕过敌对creep\r\n                return ERR_INVALID_TARGET;\r\n            }\r\n        }\r\n        testTrySwap++;\r\n        return OK;    // 或者全部操作成功\r\n    }\r\n    return ERR_NOT_FOUND // 没有creep\r\n}\r\n\r\nlet temporalAvoidFrom, temporalAvoidTo;\r\nfunction routeCallback(nextRoomName, fromRoomName) {    // 避开avoidRooms设置了的\r\n    if (nextRoomName in avoidRooms) {\r\n        //console.log('Infinity at ' + nextRoomName);\r\n        return Infinity;\r\n    }\r\n    return isHighWay(nextRoomName) ? 1 : 1.15;\r\n}\r\nfunction bypassRouteCallback(nextRoomName, fromRoomName) {\r\n    if (fromRoomName == temporalAvoidFrom && nextRoomName == temporalAvoidTo) {\r\n        //console.log(`Infinity from ${fromRoomName} to ${nextRoomName}`);\r\n        return Infinity;\r\n    }\r\n    return routeCallback(nextRoomName, fromRoomName);\r\n}\r\n/**\r\n *  遇到跨房寻路，先以房间为单位寻route，再寻精细的path\r\n * @param {string} fromRoomName \r\n * @param {string} toRoomName \r\n * @param {boolean} bypass\r\n */\r\nfunction findRoute(fromRoomName, toRoomName, bypass) {  // TODO 以后跨shard寻路也放在这个函数里\r\n    //console.log('findRoute', fromRoomName, toRoomName, bypass);\r\n    return Game.map.findRoute(fromRoomName, toRoomName, { routeCallback: bypass ? bypassRouteCallback : routeCallback });\r\n}\r\n\r\n/**\r\n * @param {RoomPosition} pos\r\n * @param {Room} room \r\n * @param {CostMatrix} costMat \r\n */\r\nfunction checkTemporalAvoidExit(pos, room, costMat) {    // 用于记录因creep堵路导致的房间出口临时封闭\r\n    let neighbors = Game.map.describeExits(room.name);\r\n    temporalAvoidFrom = temporalAvoidTo = '';   // 清空旧数据\r\n    for (let direction in neighbors) {\r\n        if (!(neighbors[direction] in avoidRooms)) {\r\n            for (let direction in neighbors) {\r\n                let exits = room.find(+direction);\r\n                if (PathFinder.search(pos, exits, {\r\n                    maxRooms: 1,\r\n                    roomCallback: () => costMat\r\n                }).incomplete) {    // 此路不通\r\n                    temporalAvoidFrom = room.name;\r\n                    temporalAvoidTo = neighbors[direction];\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction routeReduce(temp, item) {\r\n    temp[item.room] = 1;\r\n    return temp;\r\n}\r\nfunction bypassHostile(creep) {\r\n    return !creep.my || creep.memory.dontPullMe;\r\n}\r\nfunction bypassMy(creep) {\r\n    return creep.my && creep.memory.dontPullMe;\r\n}\r\nlet bypassRoomName, bypassCostMat, bypassIgnoreCondition, userCostCallback, costMat, route;\r\nfunction bypassRoomCallback(roomName) {\r\n    if (roomName in avoidRooms) {\r\n        return false;\r\n    }\r\n    if (roomName == bypassRoomName) {     // 在findTemporalRoute函数里刚刚建立了costMatrix\r\n        costMat = bypassCostMat;\r\n    } else {\r\n        costMat = roomName in costMatrixCache ? costMatrixCache[roomName][findPathIgnoreCondition] : emptyCostMatrix;\r\n    }\r\n\r\n    if (userCostCallback) {\r\n        let resultCostMat = userCostCallback(roomName, roomName in costMatrixCache ? costMat.clone() : new PathFinder.CostMatrix);\r\n        if (resultCostMat instanceof PathFinder.CostMatrix) {\r\n            costMat = resultCostMat;\r\n        }\r\n    }\r\n    return costMat;\r\n}\r\nfunction bypassRoomCallbackWithRoute(roomName) {\r\n    if (roomName in route) {\r\n        if (roomName == bypassRoomName) {     // 在findTemporalRoute函数里刚刚建立了costMatrix\r\n            costMat = bypassCostMat;\r\n        } else {\r\n            costMat = roomName in costMatrixCache ? costMatrixCache[roomName][findPathIgnoreCondition] : emptyCostMatrix;\r\n        }\r\n\r\n        if (userCostCallback) {\r\n            let resultCostMat = userCostCallback(roomName, roomName in costMatrixCache ? costMat.clone() : new PathFinder.CostMatrix);\r\n            if (resultCostMat instanceof PathFinder.CostMatrix) {\r\n                costMat = resultCostMat;\r\n            }\r\n        }\r\n        return costMat;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n *  影响参数：bypassHostileCreeps, ignoreRoads, ignoreDestructibleStructures, ignoreSwamps, costCallback, range, bypassRange\r\n *  及所有PathFinder参数：plainCost, SwampCost, masOps, maxRooms, maxCost, heuristicWeight\r\n * @param {Creep} creep \r\n * @param {RoomPosition} toPos \r\n * @param {MoveToOpts} ops \r\n */\r\nfunction findTemporalPath(creep, toPos, ops) {\r\n    let nearbyCreeps;\r\n    if (ops.ignoreCreeps) { // 有ignoreCreep，只绕过无法对穿的creep\r\n        nearbyCreeps = creep.pos.findInRange(FIND_CREEPS, ops.bypassRange, {\r\n            filter: ops.bypassHostileCreeps ? bypassHostile : bypassMy\r\n        }).concat(creep.pos.findInRange(FIND_POWER_CREEPS, ops.bypassRange, {\r\n            filter: ops.bypassHostileCreeps ? bypassHostile : bypassMy\r\n        }));\r\n    } else {    // 绕过所有creep\r\n        nearbyCreeps = creep.pos.findInRange(FIND_CREEPS, ops.bypassRange).concat(\r\n            creep.pos.findInRange(FIND_POWER_CREEPS, ops.bypassRange)\r\n        )\r\n    }\r\n    if (!(creep.room.name in costMatrixCache)) { // 这个房间的costMatrix已经被删了\r\n        generateCostMatrix(creep.room, creep.pos);\r\n    }\r\n    bypassIgnoreCondition = !!ops.ignoreDestructibleStructures;\r\n    /** @type {CostMatrix} */\r\n    bypassCostMat = costMatrixCache[creep.room.name][bypassIgnoreCondition].clone();\r\n    for (let c of nearbyCreeps) {\r\n        bypassCostMat.set(c.pos.x, c.pos.y, 255);\r\n    }\r\n    bypassRoomName = creep.room.name;\r\n    userCostCallback = typeof ops.costCallback == 'function' ? ops.costCallback : undefined;\r\n\r\n    /**@type {PathFinderOpts} */\r\n    let PathFinderOpts = {\r\n        maxRooms: ops.maxRooms,\r\n        maxCost: ops.maxCost,\r\n        heuristicWeight: ops.heuristicWeight || 1.2\r\n    }\r\n    if (ops.ignoreSwamps) {   // HELP 这里有没有什么不增加计算量的简短写法\r\n        PathFinderOpts.plainCost = ops.plainCost;\r\n        PathFinderOpts.swampCost = ops.swampCost || 1;\r\n    } else if (ops.ignoreRoads) {\r\n        PathFinderOpts.plainCost = ops.plainCost;\r\n        PathFinderOpts.swampCost = ops.swampCost || 5;\r\n    } else {\r\n        PathFinderOpts.plainCost = ops.plainCost || 2;\r\n        PathFinderOpts.swampCost = ops.swampCost || 10;\r\n    }\r\n\r\n    if (creep.pos.roomName != toPos.roomName) { // findRoute会导致非最优path的问题\r\n        checkTemporalAvoidExit(creep.pos, creep.room, bypassCostMat);   // 因为creep挡路导致的无法通行的出口\r\n        route = findRoute(creep.pos.roomName, toPos.roomName, true);\r\n        if (route == ERR_NO_PATH) {\r\n            return false;\r\n        }\r\n        PathFinderOpts.maxRooms = PathFinderOpts.maxRooms || route.length + 1;\r\n        PathFinderOpts.maxOps = ops.maxOps || 2000 + route.length ** 2 * 100;  // 跨10room则有2000+10*10*100=12000\r\n        route = route.reduce(routeReduce, { [creep.pos.roomName]: 1 });     // 因为 key in Object 比 Array.includes(value) 快，但不知道值不值得reduce\r\n        PathFinderOpts.roomCallback = bypassRoomCallbackWithRoute;\r\n    } else {\r\n        PathFinderOpts.maxOps = ops.maxOps;\r\n        PathFinderOpts.roomCallback = bypassRoomCallback;\r\n    }\r\n\r\n    let result = PathFinder.search(creep.pos, { pos: toPos, range: ops.range }, PathFinderOpts).path;\r\n    if (result.length) {\r\n        let creepCache = creepPathCache[creep.name];\r\n        creepCache.path = {     // 弄个新的自己走，不修改公用的缓存路，只会用于正向走所以也不需要start属性，idx属性会在startRoute中设置\r\n            end: formalize(result[result.length - 1]),\r\n            posArray: result,\r\n            ignoreStructures: !!ops.ignoreDestructibleStructures\r\n        }\r\n        generateDirectionArray(creepCache.path);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nlet findPathIgnoreCondition;\r\n/**\r\n * @param {{[roomName:string]:1}} temp \r\n * @param {{room:string}} item \r\n * @returns {{[roomName:string]:1}}\r\n */\r\nfunction roomCallback(roomName) {\r\n    if (roomName in avoidRooms) {\r\n        return false;\r\n    }\r\n\r\n    costMat = roomName in costMatrixCache ? costMatrixCache[roomName][findPathIgnoreCondition] : emptyCostMatrix;\r\n    if (userCostCallback) {\r\n        let resultCostMat = userCostCallback(roomName, roomName in costMatrixCache ? costMat.clone() : new PathFinder.CostMatrix);\r\n        if (resultCostMat instanceof PathFinder.CostMatrix) {\r\n            costMat = resultCostMat;\r\n        }\r\n    }\r\n    return costMat;\r\n}\r\nfunction roomCallbackWithRoute(roomName) {\r\n    if (roomName in route) {\r\n        costMat = roomName in costMatrixCache ? costMatrixCache[roomName][findPathIgnoreCondition] : emptyCostMatrix;\r\n        //console.log('in route ' + roomName);\r\n        if (userCostCallback) {\r\n            let resultCostMat = userCostCallback(roomName, roomName in costMatrixCache ? costMat.clone() : new PathFinder.CostMatrix);\r\n            if (resultCostMat instanceof PathFinder.CostMatrix) {\r\n                costMat = resultCostMat;\r\n            }\r\n        }\r\n        return costMat;\r\n    }\r\n    //console.log('out route ' + roomName);\r\n    return false;   // 不在route上的不搜索\r\n}\r\n/**\r\n *  影响参数：ignoreRoads, ignoreDestructibleStructures, ignoreSwamps, costCallback, range\r\n *  及所有PathFinder参数：plainCost, SwampCost, masOps, maxRooms, maxCost, heuristicWeight\r\n * @param {RoomPosition} fromPos \r\n * @param {RoomPosition} toPos \r\n * @param {MoveToOpts} ops \r\n */\r\nfunction findPath(fromPos, toPos, ops) {\r\n\r\n    if (!(fromPos.roomName in costMatrixCache) && fromPos.roomName in Game.rooms) {   // 有视野没costMatrix\r\n        generateCostMatrix(Game.rooms[fromPos.roomName], fromPos);\r\n    }\r\n\r\n    findPathIgnoreCondition = !!ops.ignoreDestructibleStructures;\r\n    userCostCallback = typeof ops.costCallback == 'function' ? ops.costCallback : undefined;\r\n\r\n    /**@type {PathFinderOpts} */\r\n    let PathFinderOpts = {\r\n        maxRooms: ops.maxRooms,\r\n        maxCost: ops.maxCost,\r\n        heuristicWeight: ops.heuristicWeight || 1.2\r\n    }\r\n    if (ops.ignoreSwamps) {   // HELP 这里有没有什么不增加计算量的简短写法\r\n        PathFinderOpts.plainCost = ops.plainCost;\r\n        PathFinderOpts.swampCost = ops.swampCost || 1;\r\n    } else if (ops.ignoreRoads) {\r\n        PathFinderOpts.plainCost = ops.plainCost;\r\n        PathFinderOpts.swampCost = ops.swampCost || 5;\r\n    } else {\r\n        PathFinderOpts.plainCost = ops.plainCost || 2;\r\n        PathFinderOpts.swampCost = ops.swampCost || 10;\r\n    }\r\n\r\n    if (fromPos.roomName != toPos.roomName) {   // findRoute会导致非最优path的问题\r\n        route = findRoute(fromPos.roomName, toPos.roomName);\r\n        if (route == ERR_NO_PATH) {\r\n            return { path: [] };\r\n        }\r\n        PathFinderOpts.maxOps = ops.maxOps || 2000 + route.length ** 2 * 100;  // 跨10room则有2000+10*10*50=7000\r\n        PathFinderOpts.maxRooms = PathFinderOpts.maxRooms || route.length + 1;\r\n        route = route.reduce(routeReduce, { [fromPos.roomName]: 1 });   // 因为 key in Object 比 Array.includes(value) 快，但不知道值不值得reduce\r\n        //console.log(fromPos + ' using route ' + JSON.stringify(route));\r\n        PathFinderOpts.roomCallback = roomCallbackWithRoute;\r\n    } else {\r\n        PathFinderOpts.maxOps = ops.maxOps;\r\n        PathFinderOpts.roomCallback = roomCallback;\r\n    }\r\n\r\n    return PathFinder.search(fromPos, { pos: toPos, range: ops.range }, PathFinderOpts);\r\n}\r\n\r\nlet combinedX, combinedY;\r\n/**\r\n * @param {MyPath} newPath \r\n */\r\nfunction addPathIntoCache(newPath) {\r\n    combinedX = newPath.start.x + newPath.start.y;\r\n    combinedY = newPath.end.x + newPath.end.y;\r\n    if (!(combinedX in globalPathCache)) {\r\n        globalPathCache[combinedX] = {\r\n            [combinedY]: []  // 数组里放不同ops的及其他start、end与此对称的\r\n        };\r\n    } else if (!(combinedY in globalPathCache[combinedX])) {\r\n        globalPathCache[combinedX][combinedY] = []      // 数组里放不同ops的及其他start、end与此对称的\r\n    }\r\n    globalPathCache[combinedX][combinedY].push(newPath);\r\n}\r\n\r\nfunction invalidate() {\r\n    return 0;\r\n}\r\n/**\r\n * @param {MyPath} path \r\n */\r\nfunction deletePath(path) {\r\n    if (path.start) {     // 有start属性的不是临时路\r\n        let pathArray = globalPathCache[path.start.x + path.start.y][path.end.x + path.end.y];\r\n        pathArray.splice(pathArray.indexOf(path), 1);\r\n        path.posArray = path.posArray.map(invalidate);\r\n    }\r\n}\r\n\r\nlet minX, maxX, minY, maxY;\r\n/**\r\n *  寻找房内缓存路径，起始位置两步限制避免复用非最优路径\r\n * @param {RoomPosition} formalFromPos \r\n * @param {RoomPosition} formalToPos\r\n * @param {RoomPosition} fromPos\r\n * @param {CreepPaths} creepCache \r\n * @param {MoveToOpts} ops \r\n */\r\nfunction findShortPathInCache(formalFromPos, formalToPos, fromPos, creepCache, ops) {     // ops.range设置越大找的越慢\r\n    startCacheSearch = Game.cpu.getUsed();\r\n    minX = formalFromPos.x + formalFromPos.y - 2;\r\n    maxX = formalFromPos.x + formalFromPos.y + 2;\r\n    minY = formalToPos.x + formalToPos.y - 1 - ops.range;\r\n    maxY = formalToPos.x + formalToPos.y + 1 + ops.range;\r\n    for (combinedX = minX; combinedX <= maxX; combinedX++) {\r\n        if (combinedX in globalPathCache) {\r\n            for (combinedY = minY; combinedY <= maxY; combinedY++) {\r\n                if (combinedY in globalPathCache[combinedX]) {\r\n                    for (let path of globalPathCache[combinedX][combinedY]) {     // 这个数组应该会很短\r\n                        pathCounter++;\r\n                        if (isNear(path.start, formalFromPos) && isNear(fromPos, path.posArray[1]) && inRange(path.end, formalToPos, ops.range) && isSameOps(path, ops)) {     // 找到路了\r\n                            creepCache.path = path;\r\n                            return true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n *  寻找跨房缓存路径，允许起始位置少量的误差\r\n * @param {RoomPosition} formalFromPos\r\n * @param {RoomPosition} formalToPos\r\n * @param {CreepPaths} creepCache\r\n * @param {MoveToOpts} ops\r\n */\r\nfunction findLongPathInCache(formalFromPos, formalToPos, creepCache, ops) {     // ops.range设置越大找的越慢\r\n    startCacheSearch = Game.cpu.getUsed();\r\n    minX = formalFromPos.x + formalFromPos.y - 2;\r\n    maxX = formalFromPos.x + formalFromPos.y + 2;\r\n    minY = formalToPos.x + formalToPos.y - 1 - ops.range;\r\n    maxY = formalToPos.x + formalToPos.y + 1 + ops.range;\r\n    for (combinedX = minX; combinedX <= maxX; combinedX++) {\r\n        if (combinedX in globalPathCache) {\r\n            for (combinedY = minY; combinedY <= maxY; combinedY++) {\r\n                if (combinedY in globalPathCache[combinedX]) {\r\n                    for (let path of globalPathCache[combinedX][combinedY]) {     // 这个数组应该会很短\r\n                        pathCounter++;\r\n                        if (isNear(path.start, formalFromPos) && inRange(path.end, formalToPos, ops.range) && isSameOps(path, ops)) {     // 找到路了\r\n                            creepCache.path = path;\r\n                            return true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nlet startRoomName, endRoomName;\r\n/**\r\n *  起止点都在自己房间的路不清理\r\n * @param {CreepPaths['name']} creepCache \r\n */\r\nfunction setPathTimer(creepCache) {\r\n    if (pathClearDelay) {\r\n        let posArray = creepCache.path.posArray;\r\n        startRoomName = posArray[0].roomName;\r\n        endRoomName = posArray[posArray.length - 1].roomName;\r\n        if (startRoomName != endRoomName || (startRoomName in Game.rooms && Game.rooms[startRoomName].controller && !Game.rooms[startRoomName].controller.my)) {    // 跨房路或者敌方房间路\r\n            if (!(Game.time + pathClearDelay in pathCacheTimer)) {\r\n                pathCacheTimer[Game.time + pathClearDelay] = [];\r\n            }\r\n            pathCacheTimer[Game.time + pathClearDelay].push(creepCache.path);\r\n            creepCache.path.lastTime = Game.time;\r\n        }\r\n    }\r\n}\r\n\r\n/**@type {RoomPosition[]} */\r\nlet tempArray = [];\r\n/**\r\n *  \r\n * @param {Creep} creep \r\n * @param {RoomPosition} toPos \r\n * @param {RoomPosition[]} posArray \r\n * @param {number} startIdx \r\n * @param {number} idxStep \r\n * @param {PolyStyle} visualStyle \r\n */\r\nfunction showVisual(creep, toPos, posArray, startIdx, idxStep, visualStyle) {\r\n    tempArray.length = 0;\r\n    tempArray.push(creep.pos);\r\n    let thisRoomName = creep.room.name;\r\n    _.defaults(visualStyle, defaultVisualizePathStyle);\r\n    for (let i = startIdx; i in posArray && posArray[i].roomName == thisRoomName; i += idxStep) {\r\n        tempArray.push(posArray[i]);\r\n    }\r\n    if (toPos.roomName == thisRoomName) {\r\n        tempArray.push(toPos);\r\n    }\r\n    creep.room.visual.poly(tempArray, visualStyle);\r\n}\r\n\r\n/**\r\n *  按缓存路径移动\r\n * @param {Creep} creep \r\n * @param {PolyStyle} visualStyle \r\n * @param {RoomPosition} toPos \r\n */\r\nfunction moveOneStep(creep, visualStyle, toPos) {\r\n    let creepCache = creepPathCache[creep.name];\r\n    if (visualStyle) {\r\n        showVisual(creep, toPos, creepCache.path.posArray, creepCache.idx, 1, visualStyle);\r\n    }\r\n    if (creep.fatigue) {\r\n        return ERR_TIRED;\r\n    }\r\n    creepCache.idx++;\r\n    creepMoveCache[creep.name] = Game.time;\r\n    testNormal++;\r\n    let t = Game.cpu.getUsed() - startTime;\r\n    if (t > 0.2) {  // 对穿导致的另一个creep的0.2不计在内\r\n        normalLogicalCost += t - 0.2;\r\n    } else {\r\n        normalLogicalCost += t;\r\n    }\r\n    //creep.room.visual.circle(creepCache.path.posArray[creepCache.idx]);\r\n    return originMove.call(creep, creepCache.path.directionArray[creepCache.idx]);\r\n}\r\n\r\n/**\r\n *  按缓存路径移动\r\n * @param {Creep} creep \r\n * @param {PolyStyle} visualStyle \r\n * @param {RoomPosition} toPos \r\n */\r\nfunction moveOneStepReverse(creep, visualStyle, toPos) {    // deprecated\r\n    let creepCache = creepPathCache[creep.name];\r\n    if (visualStyle) {\r\n        showVisual(creep, toPos, creepCache.path.posArray, creepCache.idx, -1, visualStyle);\r\n    }\r\n    if (creep.fatigue) {\r\n        return ERR_TIRED;\r\n    }\r\n    creepMoveCache[creep.name] = Game.time;\r\n    //creep.room.visual.circle(creepCache.path.posArray[creepCache.idx]);\r\n    return originMove.call(creep, (creepCache.path.directionArray[creepCache.idx--] + 3) % 8 + 1);\r\n}\r\n\r\n/**\r\n * \r\n * @param {Creep} creep \r\n * @param {{\r\n        path: MyPath,\r\n        dst: RoomPosition,\r\n        idx: number\r\n    }} pathCache \r\n * @param {PolyStyle} visualStyle \r\n * @param {RoomPosition} toPos \r\n * @param {boolean} ignoreCreeps\r\n */\r\nfunction startRoute(creep, pathCache, visualStyle, toPos, ignoreCreeps) {\r\n    let posArray = pathCache.path.posArray;\r\n\r\n    let idx = 0;\r\n    while (idx in posArray && isNear(creep.pos, posArray[idx])) {\r\n        idx += 1;\r\n    }\r\n    idx -= 1;\r\n    pathCache.idx = idx;\r\n\r\n    if (visualStyle) {\r\n        showVisual(creep, toPos, posArray, idx, 1, visualStyle);\r\n    }\r\n    creepMoveCache[creep.name] = Game.time;\r\n\r\n    let nextStep = posArray[idx];\r\n    if (ignoreCreeps) {\r\n        trySwap(creep, nextStep, false, true);\r\n    }\r\n    return originMove.call(creep, getDirection(creep.pos, posArray[idx]));\r\n}\r\n\r\n/**\r\n *  将用在Creep.prototype.move中\r\n * @param {RoomPosition} pos \r\n * @param {DirectionConstant} target \r\n */\r\nfunction direction2Pos(pos, target) {\r\n    if (typeof target != \"number\") {\r\n        // target 不是方向常数\r\n        return undefined;\r\n    }\r\n\r\n    const direction = +target;  // 如果是string则由此运算转换成number\r\n    let tarpos = {\r\n        x: pos.x,\r\n        y: pos.y,\r\n    }\r\n    if (direction !== 7 && direction !== 3) {\r\n        if (direction > 7 || direction < 3) {\r\n            --tarpos.y\r\n        } else {\r\n            ++tarpos.y\r\n        }\r\n    }\r\n    if (direction !== 1 && direction !== 5) {\r\n        if (direction < 5) {\r\n            ++tarpos.x\r\n        } else {\r\n            --tarpos.x\r\n        }\r\n    }\r\n    if (tarpos.x < 0 || tarpos.y > 49 || tarpos.x > 49 || tarpos.y < 0) {\r\n        return undefined;\r\n    } else {\r\n        return new RoomPosition(tarpos.x, tarpos.y, pos.roomName);\r\n    }\r\n}\r\n\r\n/**\r\n * @param {Function} fn \r\n */\r\nfunction wrapFn(fn, name) {\r\n    return function () {\r\n        startTime = Game.cpu.getUsed();     // 0.0015cpu\r\n        if (obTick < Game.time) {\r\n            obTick = Game.time;\r\n            checkObResult();\r\n            doObTask();\r\n        }\r\n        let code = fn.apply(this, arguments);\r\n        endTime = Game.cpu.getUsed();\r\n        if (endTime - startTime >= 0.2) {\r\n            analyzeCPU[name].sum += endTime - startTime;\r\n            analyzeCPU[name].calls++;\r\n        }\r\n        return code;\r\n    }\r\n}\r\n\r\nfunction clearUnused() {\r\n    if (Game.time % pathClearDelay == 0) { // 随机清一次已死亡creep\r\n        for (let name in creepPathCache) {\r\n            if (!(name in Game.creeps)) {\r\n                delete creepPathCache[name];\r\n            }\r\n        }\r\n    }\r\n    for (let time in pathCacheTimer) {\r\n        if (time > Game.time) {\r\n            break;\r\n        }\r\n        //console.log('clear path');\r\n        for (let path of pathCacheTimer[time]) {\r\n            if (path.lastTime == time - pathClearDelay) {\r\n                deletePath(path);\r\n            }\r\n        }\r\n        delete pathCacheTimer[time];\r\n    }\r\n    for (let time in costMatrixCacheTimer) {\r\n        if (time > Game.time) {\r\n            break;\r\n        }\r\n        //console.log('clear costMat');\r\n        for (let data of costMatrixCacheTimer[time]) {\r\n            delete costMatrixCache[data.roomName];\r\n            for (let avoidRoomName of data.avoids) {\r\n                delete avoidRooms[avoidRoomName];\r\n            }\r\n        }\r\n        delete costMatrixCacheTimer[time];\r\n    }\r\n}\r\n\r\n/***************************************\r\n *  功能实现\r\n */\r\n\r\nconst defaultVisualizePathStyle = { fill: 'transparent', stroke: '#fff', lineStyle: 'dashed', strokeWidth: .15, opacity: .1 };\r\n/**@type {[MoveToOpts, RoomPosition, CreepPaths['1'], MyPath, number, RoomPosition[], boolean]}\r\n*/\r\nlet [ops, toPos, creepCache, path, idx, posArray, found] = [];\r\n/**\r\n *  把moveTo重写一遍\r\n * @param {Creep} this\r\n * @param {number | RoomObject} firstArg \r\n * @param {number | MoveToOpts} secondArg \r\n * @param {MoveToOpts} opts \r\n */\r\nfunction betterMoveTo(firstArg, secondArg, opts) {\r\n    if (!this.my) {\r\n        return ERR_NOT_OWNER;\r\n    }\r\n\r\n    if (this.spawning) {\r\n        return ERR_BUSY;\r\n    }\r\n\r\n    if (typeof firstArg == 'object') {\r\n        toPos = firstArg.pos || firstArg;\r\n        ops = secondArg || {};\r\n    } else {\r\n        toPos = { x: firstArg, y: secondArg, roomName: this.room.name };\r\n        ops = opts || {};\r\n    }\r\n    ops.bypassHostileCreeps = ops.bypassHostileCreeps === undefined || ops.bypassHostileCreeps;    // 设置默认值为true\r\n    ops.ignoreCreeps = ops.ignoreCreeps === undefined || ops.ignoreCreeps;\r\n\r\n    if (typeof toPos.x != \"number\" || typeof toPos.y != \"number\") {   // 房名无效或目的坐标不是数字，不合法\r\n        //this.say('no tar');\r\n        return ERR_INVALID_TARGET;\r\n    } else if (inRange(this.pos, toPos, ops.range || 1)) {   // 已到达\r\n        if (isEqual(toPos, this.pos) || ops.range) {  // 已到达\r\n            return OK;\r\n        } // else 走一步\r\n        if (this.pos.roomName == toPos.roomName && ops.ignoreCreeps) {    // 同房间考虑一下对穿\r\n            trySwap(this, toPos, false, true);\r\n        }\r\n        creepMoveCache[this.name] = Game.time;      // 用于防止自己移动后被误对穿\r\n        testNormal++;\r\n        let t = Game.cpu.getUsed() - startTime;\r\n        normalLogicalCost += t > 0.2 ? t - 0.2 : t;\r\n        return originMove.call(this, getDirection(this.pos, toPos));\r\n    }\r\n    ops.range = ops.range || 1;\r\n\r\n    if (!hasActiveBodypart(this.body, MOVE)) {\r\n        return ERR_NO_BODYPART;\r\n    }\r\n\r\n    if (this.fatigue) {\r\n        if (!ops.visualizePathStyle) {    // 不用画路又走不动，直接return\r\n            return ERR_TIRED;\r\n        } // else 要画路，画完再return\r\n    }\r\n\r\n    // HELP：感兴趣的帮我检查这里的核心逻辑orz\r\n    creepCache = creepPathCache[this.name];\r\n    if (creepCache) {  // 有缓存\r\n        path = creepCache.path;\r\n        idx = creepCache.idx;\r\n        if (path && idx in path.posArray && path.ignoreStructures == !!ops.ignoreDestructibleStructures) {  // 缓存路条件相同\r\n            posArray = path.posArray;\r\n            if (isEqual(toPos, creepCache.dst) || inRange(posArray[posArray.length - 1], toPos, ops.range)) {   // 正向走，目的地没变\r\n                if (isEqual(this.pos, posArray[idx])) {    // 正常\r\n                    if ('storage' in this.room && inRange(this.room.storage.pos, this.pos, coreLayoutRange) && ops.ignoreCreeps) {\r\n                        testNearStorageCheck++;\r\n                        if (trySwap(this, posArray[idx + 1], false, true) == OK) {\r\n                            testNearStorageSwap++;\r\n                        }\r\n                    }\r\n                    //this.say('正常');\r\n                    return moveOneStep(this, ops.visualizePathStyle, toPos);\r\n                } else if (idx + 1 in posArray && idx + 2 in posArray && isEqual(this.pos, posArray[idx + 1])) {  // 跨房了\r\n                    creepCache.idx++;\r\n                    if (!path.directionArray[idx + 2]) {  // 第一次见到该房则检查房间\r\n                        if (checkRoom(this.room, path, creepCache.idx)) {   // 传creep所在位置的idx\r\n                            //this.say('新房 可走');\r\n                            //console.log(`${Game.time}: ${this.name} check room ${this.pos.roomName} OK`);\r\n                            return moveOneStep(this, ops.visualizePathStyle, toPos);  // 路径正确，继续走\r\n                        }   // else 检查中发现房间里有建筑挡路，重新寻路\r\n                        //console.log(`${Game.time}: ${this.name} check room ${this.pos.roomName} failed`);\r\n                        deletePath(path);\r\n                    } else {\r\n                        //this.say('这个房间见过了');\r\n                        return moveOneStep(this, ops.visualizePathStyle, toPos);  // 路径正确，继续走\r\n                    }\r\n                } else if (isNear(this.pos, posArray[idx])) {  // 堵路了\r\n                    let code = trySwap(this, posArray[idx], ops.bypassHostileCreeps, ops.ignoreCreeps);  // 检查挡路creep\r\n                    if (code == OK) {\r\n                        let posString = posArray[idx].roomName + '-' + posArray[idx].x + '-' + posArray[idx].y;\r\n                        if (creepCache.jamPos[0] == posString) {\r\n                            creepCache.jamPos[1]++;\r\n                            if (creepCache.jamPos[1] > 3) { // 异常堵路，一律绕行\r\n                                testBypass++;\r\n                                ops.bypassRange = ops.bypassRange || 5; // 默认值\r\n                                ops.ignoreCreeps = false;   // 强制绕路\r\n                                if (typeof ops.bypassRange != \"number\" || typeof ops.range != 'number') {\r\n                                    return ERR_INVALID_ARGS;\r\n                                }\r\n                                if (findTemporalPath(this, toPos, ops)) { // 有路，creepCache的内容会被这个函数更新\r\n                                    this.say('强制绕路');\r\n                                    return startRoute(this, creepCache, ops.visualizePathStyle, toPos, ops.ignoreCreeps);\r\n                                } else {  // 没路\r\n                                    //this.say('没路啦');\r\n                                    return ERR_NO_PATH;\r\n                                }\r\n                            }\r\n                        } else {\r\n                            creepCache.jamPos = [posString, 1];\r\n                        }\r\n                        // 让这个逻辑掉下去，正常对穿\r\n                    } else if (code == ERR_INVALID_TARGET) {   // 是被设置了不可对穿的creep或者敌对creep挡路，临时绕路\r\n                        testBypass++;\r\n                        ops.bypassRange = ops.bypassRange || 5; // 默认值\r\n                        if (typeof ops.bypassRange != \"number\" || typeof ops.range != 'number') {\r\n                            return ERR_INVALID_ARGS;\r\n                        }\r\n                        if (findTemporalPath(this, toPos, ops)) { // 有路，creepCache的内容会被这个函数更新\r\n                            //this.say('开始绕路');\r\n                            return startRoute(this, creepCache, ops.visualizePathStyle, toPos, ops.ignoreCreeps);\r\n                        } else {  // 没路\r\n                            //this.say('没路啦');\r\n                            return ERR_NO_PATH;\r\n                        }\r\n                    } else if (code == ERR_NOT_FOUND && isObstacleStructure(this.room, posArray[idx], ops.ignoreDestructibleStructures)) {   // 发现出现新建筑物挡路，删除costMatrix和path缓存，重新寻路\r\n                        //console.log(`${Game.time}: ${this.name} find obstacles at ${this.pos}`);\r\n                        delete costMatrixCache[this.pos.roomName];\r\n                        deletePath(path);\r\n                    } // else 上tick移动失败但也不是建筑物和creep/pc挡路。有2个情况：1.下一格路本来是穿墙路并碰巧消失了；2.下一格是房间出口，有另一个creep抢路了然后它被传送到隔壁了。不处理第1个情况，按第2个情况对待。\r\n                    //this.say('对穿' + getDirection(this.pos, posArray[idx]) + '-' + originMove.call(this, getDirection(this.pos, posArray[idx])));\r\n                    if (ops.visualizePathStyle) {\r\n                        showVisual(this, toPos, posArray, idx, 1, ops.visualizePathStyle);\r\n                    }\r\n                    creepMoveCache[this.name] = Game.time;\r\n                    return originMove.call(this, getDirection(this.pos, posArray[idx]));  // 有可能是第一步就没走上路or通过略过moveTo的move操作偏离路线，直接call可兼容\r\n                } else if (idx - 1 >= 0 && isNear(this.pos, posArray[idx - 1])) {  // 因为堵路而被自动传送反向跨房了\r\n                    //this.say('偏离一格');\r\n                    if (this.pos.roomName == posArray[idx - 1].roomName && ops.ignoreCreeps) {    // 不是跨房而是偏离，检查对穿\r\n                        trySwap(this, posArray[idx - 1], false, true);\r\n                    }\r\n                    if (ops.visualizePathStyle) {\r\n                        showVisual(this, toPos, posArray, idx, 1, ops.visualizePathStyle);\r\n                    }\r\n                    creepMoveCache[this.name] = Game.time;\r\n                    return originMove.call(this, getDirection(this.pos, posArray[idx - 1]));    // 同理兼容略过moveTo的move\r\n                } // else 彻底偏离，重新寻路\r\n            } // else 目的地变了\r\n        } // else 缓存中没路或者条件变了\r\n    } // else 需要重新寻路，先找缓存路，找不到就寻路\r\n\r\n    if (!creepCache) {    // 初始化cache\r\n        creepCache = {\r\n            dst: { x: NaN, y: NaN },\r\n            path: undefined,\r\n            idx: 0,\r\n            jamPos: []\r\n        };\r\n        creepPathCache[this.name] = creepCache;\r\n    } else {\r\n        creepCache.path = undefined;\r\n    }\r\n\r\n    if (typeof ops.range != 'number') {\r\n        return ERR_INVALID_ARGS\r\n    }\r\n\r\n    found = this.pos.roomName == toPos.roomName ? findShortPathInCache(formalize(this.pos), formalize(toPos), this.pos, creepCache, ops) : findLongPathInCache(formalize(this.pos), formalize(toPos), creepCache, ops);\r\n    if (found) {\r\n        //this.say('cached');\r\n        //console.log(this, this.pos, 'hit');\r\n        testCacheHits++;\r\n    } else {  // 没找到缓存路\r\n        testCacheMiss++;\r\n\r\n        if (autoClearTick < Game.time) {  // 自动清理\r\n            autoClearTick = Game.time;\r\n            clearUnused();\r\n        }\r\n\r\n        let result = findPath(this.pos, toPos, ops);\r\n        if (!result.path.length || (result.incomplete && result.path.length == 1)) {     // 一步也动不了了\r\n            //this.say('no path')\r\n            return ERR_NO_PATH;\r\n        }\r\n        result = result.path;\r\n        result.unshift(this.pos);\r\n\r\n        //this.say('start new');\r\n        let newPath = {\r\n            start: formalize(result[0]),\r\n            end: formalize(result[result.length - 1]),\r\n            posArray: result,\r\n            ignoreRoads: !!ops.ignoreRoads,\r\n            ignoreStructures: !!ops.ignoreDestructibleStructures,\r\n            ignoreSwamps: !!ops.ignoreSwamps\r\n        }\r\n        generateDirectionArray(newPath);\r\n        addPathIntoCache(newPath);\r\n        //console.log(this, this.pos, 'miss');\r\n        creepCache.path = newPath;\r\n    }\r\n\r\n    creepCache.dst = toPos;\r\n    setPathTimer(creepCache);\r\n\r\n    found ? cacheHitCost += Game.cpu.getUsed() - startCacheSearch : cacheMissCost += Game.cpu.getUsed() - startCacheSearch;\r\n\r\n    return startRoute(this, creepCache, ops.visualizePathStyle, toPos, ops.ignoreCreeps);\r\n}\r\n\r\n/**\r\n * \r\n * @param {Creep} this 写好后删这个参数\r\n * @param {DirectionConstant | Creep} target \r\n */\r\nfunction betterMove(target) {\r\n\r\n}\r\n\r\n/**\r\n * @param {RoomPosition} this 写好后删这个参数\r\n * @param {FindConstant} type \r\n * @param {FindPathOpts & FilterOptions<FIND_STRUCTURES> & { algorithm?: string }} opts \r\n */\r\nfunction betterFindClosestByPath(type, opts) {\r\n\r\n}\r\n\r\n/**\r\n *  opts: memberPos:relativePos[], avoidTowersHigherThan:number, avoidObstaclesHigherThan:number\r\n * @param {RoomPosition} this 写好后删这个参数\r\n * @param {RoomPosition} toPos \r\n * @param {*} opts \r\n */\r\nfunction findSquadPathTo(toPos, opts) {\r\n\r\n}\r\n\r\n/***************************************\r\n *  初始化\r\n *  Creep.prototype.move()将在v0.9.x版本加入\r\n *  ob寻路、自动visual将在v0.9.x或v1.0.x版本加入\r\n *  RoomPosition.prototype.findClosestByPath()将在v1.1加入\r\n *  Creep.prototype.flee()、RoomPosition.prototype.findSquadPathTo()函数将在v1.1或v1.2加入\r\n *  checkSquadPath()有小概率会写\r\n */\r\navoidRooms = avoidRooms.reduce((temp, roomName) => {\r\n    temp[roomName] = 1;\r\n    return temp;\r\n}, {});\r\n\r\nobservers = observers.reduce((temp, id) => {\r\n    let ob = Game.getObjectById(id);\r\n    if (ob && ob.observeRoom && ob.my) {\r\n        temp.push({ id, roomName: ob.room.name, taskQueue: [] });\r\n    }\r\n    return temp;\r\n}, []);\r\n\r\n// Creep.prototype.move = wrapFn(config.changeMove? betterMove : originMove, 'move');\r\nCreep.prototype.moveTo = wrapFn(config.changeMoveTo ? betterMoveTo : originMoveTo, 'moveTo');\r\n// RoomPosition.prototype.findClosestByPath = wrapFn(config.changeFindClostestByPath? betterFindClosestByPath : originFindClosestByPath, 'findClosestByPath');\r\n// Creep.prototype.flee()和RoomPosition.prototype.findClosestByPath()将在v0.9或v1.0版本加入\r\n\r\nlet pro = {\r\n    setChangeMove: function (bool) {\r\n        //Creep.prototype.move = wrapFn(bool? betterMove : originMove, 'move');\r\n        analyzeCPU.move = { sum: 0, calls: 0 };\r\n        return OK;\r\n    },\r\n    setChangeMoveTo: function (bool) {\r\n        Creep.prototype.moveTo = wrapFn(bool ? betterMoveTo : originMoveTo, 'moveTo');\r\n        analyzeCPU.moveTo = { sum: 0, calls: 0 };\r\n        testCacheHits = 0;\r\n        testCacheMiss = 0;\r\n        testNormal = 0;\r\n        testNearStorageCheck = 0;\r\n        testNearStorageSwap = 0;\r\n        testTrySwap = 0;\r\n        testBypass = 0;\r\n        normalLogicalCost = 0;\r\n        cacheHitCost = 0;\r\n        cacheMissCost = 0;\r\n        return OK;\r\n    },\r\n    setChangeFindClostestByPath: function (bool) {\r\n        // RoomPosition.prototype.findClosestByPath = wrapFn(bool? betterFindClosestByPath : originFindClosestByPath, 'findClosestByPath');\r\n        analyzeCPU.findClosestByPath = { sum: 0, calls: 0 };\r\n        return OK;\r\n    },\r\n    setPathClearDelay: function (number) {\r\n        if (typeof number == \"number\" && number > 0) {\r\n            pathClearDelay = Math.ceil(number);\r\n            return OK;\r\n        } else if (number === undefined) {\r\n            pathClearDelay = undefined;\r\n        }\r\n        return ERR_INVALID_ARGS;\r\n    },\r\n    setHostileCostMatrixClearDelay: function (number) {\r\n        if (typeof number == \"number\" && number > 0) {\r\n            hostileCostMatrixClearDelay = Math.ceil(number);\r\n            return OK;\r\n        } else if (number === undefined) {\r\n            hostileCostMatrixClearDelay = undefined;\r\n            return OK;\r\n        }\r\n        return ERR_INVALID_ARGS;\r\n    },\r\n    deleteCostMatrix: function (roomName) {\r\n        delete costMatrixCache[roomName];\r\n        return OK;\r\n    },\r\n    deltePath: function (fromPos, toPos, opts) {   // TODO\r\n        //if(!(fromPos instanceof RoomPosition))\r\n        return 'not implemented'\r\n    },\r\n    addAvoidRooms: function (roomName) {\r\n        let splited = reg1.exec(roomName);\r\n        if (splited && splited.length == 5) {\r\n            avoidRooms[roomName] = 1;\r\n            return OK;\r\n        } else {\r\n            return ERR_INVALID_ARGS;\r\n        }\r\n    },\r\n    deleteAvoidRooms: function (roomName) {\r\n        let splited = reg1.exec(roomName);\r\n        if (splited && splited.length == 5) {\r\n            delete avoidRooms[roomName];\r\n            return OK;\r\n        } else {\r\n            return ERR_INVALID_ARGS;\r\n        }\r\n    },\r\n    deletePathInRoom: function (roomName) {\r\n        let splited = reg1.exec(roomName);\r\n        if (splited && splited.length == 5) {\r\n            this.deleteCostMatrix(roomName);\r\n            let fromalCentralPos = formalize({ x: 25, y: 25, roomName: roomName });\r\n            minX = fromalCentralPos.x + fromalCentralPos.y - 48;\r\n            maxX = fromalCentralPos.x + fromalCentralPos.y + 48;\r\n            minY = minX;\r\n            maxY = maxX;\r\n            for (combinedX = minX; combinedX <= maxX; combinedX++) {\r\n                if (combinedX in globalPathCache) {\r\n                    for (combinedY = minY; combinedY <= maxY; combinedY++) {\r\n                        if (combinedY in globalPathCache[combinedX]) {\r\n                            for (let path of globalPathCache[combinedX][combinedY]) {     // 这个数组应该会很短\r\n                                let posArray = path.posArray;\r\n                                if (posArray[0].roomName == roomName && posArray[posArray.length - 1].roomName == roomName) {     // 是这个房间的路\r\n                                    deletePath(path);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return OK;\r\n        } else {\r\n            return ERR_INVALID_ARGS;\r\n        }\r\n    },\r\n    addAvoidExits: function (fromRoomName, toRoomName) {    // 【未启用】\r\n        let splited1 = reg1.exec(fromRoomName);\r\n        let splited2 = reg1.exec(toRoomName);\r\n        if (splited1 && splited1.length == 5 && splited2 && splited2.length == 5) {\r\n            avoidExits[fromRoomName] ? avoidExits[fromRoomName][toRoomName] = 1 : avoidExits[fromRoomName] = { [toRoomName]: 1 };\r\n            return OK;\r\n        } else {\r\n            return ERR_INVALID_ARGS;\r\n        }\r\n    },\r\n    deleteAvoidExits: function (fromRoomName, toRoomName) { // 【未启用】\r\n        let splited1 = reg1.exec(fromRoomName);\r\n        let splited2 = reg1.exec(toRoomName);\r\n        if (splited1 && splited1.length == 5 && splited2 && splited2.length == 5) {\r\n            if (fromRoomName in avoidExits && toRoomName in avoidExits[fromRoomName]) {\r\n                delete avoidExits[fromRoomName][toRoomName];\r\n            }\r\n            return OK;\r\n        } else {\r\n            return ERR_INVALID_ARGS;\r\n        }\r\n    },\r\n    print: function () {\r\n        let text = '\\navarageTime\\tcalls\\tFunctionName';\r\n        for (let fn in analyzeCPU) {\r\n            text += `\\n${(analyzeCPU[fn].sum / analyzeCPU[fn].calls).toFixed(5)}\\t\\t${analyzeCPU[fn].calls}\\t\\t${fn}`;\r\n        }\r\n        let hitCost = cacheHitCost / testCacheHits;\r\n        let missCost = cacheMissCost / testCacheMiss;\r\n        let missRate = testCacheMiss / (testCacheMiss + testCacheHits);\r\n        text += `\\nnormal logical cost: ${(normalLogicalCost / testNormal).toFixed(5)}, total cross rate: ${(testTrySwap / analyzeCPU.moveTo.calls).toFixed(4)}, total bypass rate:  ${(testBypass / analyzeCPU.moveTo.calls).toFixed(4)}`\r\n        text += `\\nnear storage check rate: ${(testNearStorageCheck / analyzeCPU.moveTo.calls).toFixed(4)}, near storage cross rate: ${(testNearStorageSwap / testNearStorageCheck).toFixed(4)}`\r\n        text += `\\ncache search rate: ${((testCacheMiss + testCacheHits) / analyzeCPU.moveTo.calls).toFixed(4)}, total hit rate: ${(1 - missRate).toFixed(4)}, avg check paths: ${(pathCounter / (testCacheMiss + testCacheHits)).toFixed(3)}`;\r\n        text += `\\ncache hit avg cost: ${(hitCost).toFixed(5)}, cache miss avg cost: ${(missCost).toFixed(5)}, total avg cost: ${(hitCost * (1 - missRate) + missCost * missRate).toFixed(5)}`;\r\n        return text;\r\n    },\r\n    clear: () => { }\r\n    // clear: clearUnused\r\n}\r\n\r\nexport let options = pro;\r\n\r\nmodule.exports = {\r\n    setChangeMove: function (bool) {\r\n        //Creep.prototype.move = wrapFn(bool? betterMove : originMove, 'move');\r\n        analyzeCPU.move = { sum: 0, calls: 0 };\r\n        return OK;\r\n    },\r\n    setChangeMoveTo: function (bool) {\r\n        Creep.prototype.moveTo = wrapFn(bool ? betterMoveTo : originMoveTo, 'moveTo');\r\n        analyzeCPU.moveTo = { sum: 0, calls: 0 };\r\n        testCacheHits = 0;\r\n        testCacheMiss = 0;\r\n        testNormal = 0;\r\n        testNearStorageCheck = 0;\r\n        testNearStorageSwap = 0;\r\n        testTrySwap = 0;\r\n        testBypass = 0;\r\n        normalLogicalCost = 0;\r\n        cacheHitCost = 0;\r\n        cacheMissCost = 0;\r\n        return OK;\r\n    },\r\n    setChangeFindClostestByPath: function (bool) {\r\n        // RoomPosition.prototype.findClosestByPath = wrapFn(bool? betterFindClosestByPath : originFindClosestByPath, 'findClosestByPath');\r\n        analyzeCPU.findClosestByPath = { sum: 0, calls: 0 };\r\n        return OK;\r\n    },\r\n    setPathClearDelay: function (number) {\r\n        if (typeof number == \"number\" && number > 0) {\r\n            pathClearDelay = Math.ceil(number);\r\n            return OK;\r\n        } else if (number === undefined) {\r\n            pathClearDelay = undefined;\r\n        }\r\n        return ERR_INVALID_ARGS;\r\n    },\r\n    setHostileCostMatrixClearDelay: function (number) {\r\n        if (typeof number == \"number\" && number > 0) {\r\n            hostileCostMatrixClearDelay = Math.ceil(number);\r\n            return OK;\r\n        } else if (number === undefined) {\r\n            hostileCostMatrixClearDelay = undefined;\r\n            return OK;\r\n        }\r\n        return ERR_INVALID_ARGS;\r\n    },\r\n    deleteCostMatrix: function (roomName) {\r\n        delete costMatrixCache[roomName];\r\n        return OK;\r\n    },\r\n    deltePath: function (fromPos, toPos, opts) {   // TODO\r\n        //if(!(fromPos instanceof RoomPosition))\r\n        return 'not implemented'\r\n    },\r\n    addAvoidRooms: function (roomName) {\r\n        let splited = reg1.exec(roomName);\r\n        if (splited && splited.length == 5) {\r\n            avoidRooms[roomName] = 1;\r\n            return OK;\r\n        } else {\r\n            return ERR_INVALID_ARGS;\r\n        }\r\n    },\r\n    deleteAvoidRooms: function (roomName) {\r\n        let splited = reg1.exec(roomName);\r\n        if (splited && splited.length == 5) {\r\n            delete avoidRooms[roomName];\r\n            return OK;\r\n        } else {\r\n            return ERR_INVALID_ARGS;\r\n        }\r\n    },\r\n    deletePathInRoom: function (roomName) {\r\n        let splited = reg1.exec(roomName);\r\n        if (splited && splited.length == 5) {\r\n            this.deleteCostMatrix(roomName);\r\n            let fromalCentralPos = formalize({ x: 25, y: 25, roomName: roomName });\r\n            minX = fromalCentralPos.x + fromalCentralPos.y - 48;\r\n            maxX = fromalCentralPos.x + fromalCentralPos.y + 48;\r\n            minY = minX;\r\n            maxY = maxX;\r\n            for (combinedX = minX; combinedX <= maxX; combinedX++) {\r\n                if (combinedX in globalPathCache) {\r\n                    for (combinedY = minY; combinedY <= maxY; combinedY++) {\r\n                        if (combinedY in globalPathCache[combinedX]) {\r\n                            for (let path of globalPathCache[combinedX][combinedY]) {     // 这个数组应该会很短\r\n                                let posArray = path.posArray;\r\n                                if (posArray[0].roomName == roomName && posArray[posArray.length - 1].roomName == roomName) {     // 是这个房间的路\r\n                                    deletePath(path);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return OK;\r\n        } else {\r\n            return ERR_INVALID_ARGS;\r\n        }\r\n    },\r\n    addAvoidExits: function (fromRoomName, toRoomName) {    // 【未启用】\r\n        let splited1 = reg1.exec(fromRoomName);\r\n        let splited2 = reg1.exec(toRoomName);\r\n        if (splited1 && splited1.length == 5 && splited2 && splited2.length == 5) {\r\n            avoidExits[fromRoomName] ? avoidExits[fromRoomName][toRoomName] = 1 : avoidExits[fromRoomName] = { [toRoomName]: 1 };\r\n            return OK;\r\n        } else {\r\n            return ERR_INVALID_ARGS;\r\n        }\r\n    },\r\n    deleteAvoidExits: function (fromRoomName, toRoomName) { // 【未启用】\r\n        let splited1 = reg1.exec(fromRoomName);\r\n        let splited2 = reg1.exec(toRoomName);\r\n        if (splited1 && splited1.length == 5 && splited2 && splited2.length == 5) {\r\n            if (fromRoomName in avoidExits && toRoomName in avoidExits[fromRoomName]) {\r\n                delete avoidExits[fromRoomName][toRoomName];\r\n            }\r\n            return OK;\r\n        } else {\r\n            return ERR_INVALID_ARGS;\r\n        }\r\n    },\r\n    print: function () {\r\n        let text = '\\navarageTime\\tcalls\\tFunctionName';\r\n        for (let fn in analyzeCPU) {\r\n            text += `\\n${(analyzeCPU[fn].sum / analyzeCPU[fn].calls).toFixed(5)}\\t\\t${analyzeCPU[fn].calls}\\t\\t${fn}`;\r\n        }\r\n        let hitCost = cacheHitCost / testCacheHits;\r\n        let missCost = cacheMissCost / testCacheMiss;\r\n        let missRate = testCacheMiss / (testCacheMiss + testCacheHits);\r\n        text += `\\nnormal logical cost: ${(normalLogicalCost / testNormal).toFixed(5)}, total cross rate: ${(testTrySwap / analyzeCPU.moveTo.calls).toFixed(4)}, total bypass rate:  ${(testBypass / analyzeCPU.moveTo.calls).toFixed(4)}`\r\n        text += `\\nnear storage check rate: ${(testNearStorageCheck / analyzeCPU.moveTo.calls).toFixed(4)}, near storage cross rate: ${(testNearStorageSwap / testNearStorageCheck).toFixed(4)}`\r\n        text += `\\ncache search rate: ${((testCacheMiss + testCacheHits) / analyzeCPU.moveTo.calls).toFixed(4)}, total hit rate: ${(1 - missRate).toFixed(4)}, avg check paths: ${(pathCounter / (testCacheMiss + testCacheHits)).toFixed(3)}`;\r\n        text += `\\ncache hit avg cost: ${(hitCost).toFixed(5)}, cache miss avg cost: ${(missCost).toFixed(5)}, total avg cost: ${(hitCost * (1 - missRate) + missCost * missRate).toFixed(5)}`;\r\n        return text;\r\n    },\r\n    clear: () => { }\r\n    // clear: clearUnused\r\n}","import { sendLogisticTask } from \"@/colony/dpt_comunication\";\r\nimport { logisticTaskName, towerTask } from \"@/colony/nameManagement\";\r\n\r\nexport class Tower {\r\n    mainRoom: string;       \r\n    memory: {};\r\n\r\n    constructor(mainRoom: string) {\r\n        this.mainRoom = mainRoom;\r\n        this.memory = Memory['colony'][mainRoom]['tower'];\r\n    }\r\n    /*\r\n        id {\r\n            energyPetition: boolean,\r\n            task,\r\n        }\r\n\r\n    */\r\n\r\n    /*\r\n        Una torreta cada 7 tick revisa su energia, si es inferiol a un valor dado,\r\n        hace una peticion de transferencia a Dpt_logistic.\r\n        Mientras no le llegue toda la energia que ha pedido, no lanza ninguna \r\n        peticion de energia. \r\n        \r\n    */\r\n    \r\n    \r\n    private checkTowerEnergy() {\r\n        const towerMem = this.memory['data'];\r\n        for (let id in towerMem) {\r\n            \r\n            if (!towerMem[id]['energyPetition']) { \r\n                const tower = Game.getObjectById(id as Id<StructureTower>);   \r\n                \r\n                if (tower.store['energy'] <= 700) {\r\n                    //SEND TASKFER REQUEST\r\n                    const transferTask: TransferRequest = {\r\n                        'type': 'TRANSFER',\r\n                        'target': {\r\n                            'id': id,\r\n                            'resourceType': 'energy',           //@ts-ignore\r\n                            'amount': tower.store.getFreeCapacity(RESOURCE_ENERGY)\r\n                        }\r\n                        \r\n                        \r\n                    }\r\n                    sendLogisticTask(this.mainRoom, logisticTaskName(transferTask), transferTask);\r\n                    towerMem[id]['energyPetition'] = true;\r\n\r\n                }\r\n            }\r\n            \r\n            \r\n        }\r\n    }\r\n\r\n    private towerAttack(): boolean {\r\n        const towersData = this.memory['data'];\r\n        const attackTarget = this.memory['attackTask'];\r\n\r\n        let missingCreepsId = [];\r\n        let attacked = false;\r\n        for (let taskName in attackTarget) {\r\n            const hostileCreep = Game.getObjectById(attackTarget[taskName] as Id<Creep>)\r\n            if (hostileCreep) {\r\n                for (let towerId in towersData) {\r\n                    const tower = Game.getObjectById(towerId as Id<StructureTower>)\r\n                    tower.attack(hostileCreep);\r\n                }\r\n                attacked = true;\r\n            }\r\n            else {\r\n                missingCreepsId.push(taskName);\r\n            }\r\n            \r\n        }\r\n\r\n        for (let i = 0; i < missingCreepsId.length; ++i) {\r\n            delete this.memory['attackTask'][missingCreepsId[i]];\r\n        }\r\n\r\n        return attacked;\r\n        \r\n    }\r\n\r\n    static sendRoadRepairTask(roomName: string, roadId: string) {\r\n        const taskname = towerTask();\r\n        Memory['colony'][roomName]['tower']['repairRoad'][taskname] = roadId;\r\n    }\r\n\r\n    static cleanTowerEnergyPetition(roomName: string, towerId: string) {\r\n        Memory['colony'][roomName]['tower']['data'][towerId]['energyPetition'] = false;\r\n\r\n    }\r\n\r\n    static sendRampartRepairTask(roomName: string, rampartTask: towerRepairTask) {\r\n        const taskname = towerTask();\r\n        Memory['colony'][roomName]['tower']['repairRampart'][taskname] = rampartTask;\r\n\r\n    }    \r\n\r\n    static sendAttackTask(roomName: string, creepId: string) {\r\n        const taskName = towerTask();\r\n        Memory['colony'][roomName]['tower']['attackTask'][taskName] = creepId;\r\n    }\r\n\r\n    private towerRepairRampart(towerIndex: number): number {\r\n        \r\n        let i = towerIndex;\r\n        const rampartList = this.memory['repairRampart'];\r\n        const towersData = this.memory['data'];\r\n        const towersId = Object.keys(towersData);\r\n\r\n        let deleteRepairTask = [];\r\n        for (let taskName in rampartList) {\r\n            if (i < towersId.length) break;\r\n\r\n            const rampart = Game.getObjectById<StructureContainer|StructureRoad>(rampartList[taskName]);\r\n            const rampartNeedHits = 50000;\r\n\r\n            while(i < towersId.length && rampart.hits < rampartNeedHits) {\r\n                const tower = Game.getObjectById(towersId[i] as Id<StructureTower>);\r\n                tower.repair(rampart);\r\n                ++i;\r\n            }\r\n            if (rampart.hits > rampartNeedHits) {\r\n                deleteRepairTask.push(this.memory['repairRampart'][taskName]);\r\n            }\r\n\r\n        }\r\n\r\n        //delete road or container tasks\r\n        for (let j = 0; j < deleteRepairTask.length; ++j) {\r\n            delete rampartList[deleteRepairTask[j]];\r\n        }\r\n        \r\n\r\n        return i;\r\n \r\n    }\r\n\r\n    private towerRepairRoad(towerIndex: number): number {\r\n        \r\n        let i = towerIndex;\r\n       \r\n        \r\n        const repairRoad = this.memory['repairRoad'];\r\n        const towersData = this.memory['data'];\r\n        const towersId = Object.keys(towersData);\r\n        \r\n        \r\n        let deleteRepairTask = [];\r\n        for (let taskName in repairRoad) {\r\n            \r\n            if (i >= towersId.length) break;\r\n            \r\n            \r\n            const road = Game.getObjectById<StructureContainer|StructureRoad>(repairRoad[taskName]);\r\n            let repairTime = ~~((road.hitsMax - road.hits)/800);\r\n            \r\n            while(i < towersId.length && repairTime) {\r\n                const tower = Game.getObjectById(towersId[i] as Id<StructureTower>);\r\n                tower.repair(road);\r\n                --repairTime;\r\n                ++i;\r\n            }\r\n            if (!repairTime) {\r\n                deleteRepairTask.push(taskName);\r\n            }\r\n\r\n        }\r\n\r\n        //delete road or container tasks\r\n        for (let j = 0; j < deleteRepairTask.length; ++j) {\r\n            delete this.memory['repairRoad'][deleteRepairTask[j]];\r\n        }\r\n        \r\n        \r\n\r\n        return i;\r\n    }\r\n\r\n    private towerRepair() {\r\n\r\n        let i = 0;\r\n        i = this.towerRepairRampart(i);\r\n        \r\n        i = this.towerRepairRoad(i);\r\n\r\n        //repair rampart task\r\n        \r\n    }\r\n\r\n    private towerTaskExecution() {\r\n        if (!this.towerAttack()) {\r\n\r\n            \r\n            this.towerRepair();\r\n        }\r\n    }\r\n    \r\n    public run() {\r\n        if (Game.time % 7 == 0) this.checkTowerEnergy();\r\n        //this.towerAssignRepairTask();\r\n        this.towerTaskExecution();\r\n    }\r\n\r\n\r\n\r\n}","import * as planningUtils from \"./planningUtils\";\r\nimport * as roomUtils from \"../colony/planningUtils\"\r\nimport * as names from \"../colony/nameManagement\"\r\nimport { sendBuildTask } from \"@/colony/dpt_comunication\";\r\nimport { CreepSpawning } from \"@/structure/CreepSpawning\";\r\nimport Dpt_Harvest from \"@/department/dpt_harvest/Dpt_Harvest\";\r\nimport { distanceTwoPoints, nearPoint } from \"@/roomPlanning/planningUtils\";\r\nimport * as SuperMove from \"../SuperMove\"\r\nimport { Mem } from \"@/colony/Memory\";\r\nimport { Tower } from \"@/structure/Tower\";\r\n\r\n/** CONTROL ALL DEPARTMENT */\r\nexport class OperationReserch {\r\n\r\n    mainRoom: string;\r\n    memory: {};\r\n\r\n    constructor(mainRoom: string) {\r\n        this.mainRoom = mainRoom;\r\n        this.memory = Memory['colony'][mainRoom]['state'];\r\n    }    \r\n\r\n    /** Funtion to control creep numbers, only used for OR */\r\n    private sendToSpawnInitializacion(creepName: string, role: string,  task: {}, dpt: string, pull: boolean) {\r\n        Memory['colony'][this.mainRoom]['creepSpawning']['task'][creepName] ={};\r\n        \r\n        const spawnTask = Memory['colony'][this.mainRoom]['creepSpawning']['task'][creepName];\r\n        //console.log(creepName);\r\n        \r\n        spawnTask['role'] = role;\r\n        spawnTask['roomName'] = this.mainRoom;\r\n        spawnTask['department'] = dpt;\r\n        spawnTask['task'] = task;\r\n        spawnTask['dontPullMe'] = pull;\r\n\r\n    }\r\n\r\n/************************** buildRCL 1 *********************************/\r\n    /** fase 0 */\r\n    private putSourceUpgraderContainers() {\r\n        const sourceContainer1Pos = planningUtils.getContainerPos(this.mainRoom, \"container_source1\");\r\n        Game.rooms[this.mainRoom].createConstructionSite(sourceContainer1Pos[0], sourceContainer1Pos[1], 'container');\r\n\r\n        const sourceContainer2Pos = planningUtils.getContainerPos(this.mainRoom, \"container_source2\");\r\n        Game.rooms[this.mainRoom].createConstructionSite(sourceContainer2Pos[0], sourceContainer2Pos[1], 'container');\r\n\r\n        const controllerContainerPos = planningUtils.getContainerPos(this.mainRoom, 'container_controller');\r\n        Game.rooms[this.mainRoom].createConstructionSite(controllerContainerPos[0], controllerContainerPos[1], 'container');\r\n\r\n        this.memory['buildColony']['fase'] = 1;\r\n        this.memory['buildColony']['working'] = false;\r\n        \r\n    }\r\n\r\n    /** fase 1 */\r\n    private buildSourceContainers() {\r\n\r\n        const sourceContainer1Pos = planningUtils.getContainerPos(this.mainRoom, \"container_source1\");\r\n        const constructionSideID1 = planningUtils.getConstructionSideID(this.mainRoom, sourceContainer1Pos);\r\n        let numCreepsNeeded1 = planningUtils.positionToHarvest(this.mainRoom, planningUtils.getSourceEnery1Pos(this.mainRoom)).length;\r\n\r\n        if (numCreepsNeeded1 > 3) numCreepsNeeded1 = 3;\r\n        const data1:InitializerData = {\r\n            source: planningUtils.getSourceEnery1ID(this.mainRoom),\r\n            target: {\r\n                id: constructionSideID1,\r\n                pos: [sourceContainer1Pos[0], sourceContainer1Pos[1]]\r\n            }\r\n        }\r\n\r\n        const sourceContainer2Pos = planningUtils.getContainerPos(this.mainRoom, \"container_source2\");\r\n        //Game.rooms[this.mainRoom].createConstructionSite(sourceContainer2Pos[0], sourceContainer2Pos[1], 'container');\r\n        const constructionSideID2 = planningUtils.getConstructionSideID(this.mainRoom, sourceContainer2Pos);\r\n\r\n        let numCreepsNeeded2 = planningUtils.positionToHarvest(this.mainRoom, planningUtils.getSourceEnery2Pos(this.mainRoom)).length;\r\n        if (numCreepsNeeded2 > 3) numCreepsNeeded2 = 3;\r\n        const data2:InitializerData = {\r\n            source: planningUtils.getSourceEnery2ID(this.mainRoom),\r\n            target: {\r\n                id: constructionSideID2,\r\n                pos: [sourceContainer2Pos[0], sourceContainer2Pos[1]]\r\n            }\r\n        }\r\n\r\n        //send spawn task\r\n        const totalNum = numCreepsNeeded1 + numCreepsNeeded2;\r\n        let par = true;\r\n        for (let i = 0; i < totalNum; ++i) {\r\n            const creepName = names.creepName();\r\n            if (par) {\r\n                //this.sendToSpawnInitializacion(creepName, 'initializer',  data1, 'dpt_harvest')\r\n                CreepSpawning.sendToSpawnInitializacion(this.mainRoom, creepName, 'initializer',  data1, 'dpt_harvest', true);\r\n                Dpt_Harvest.assigHarvesterToSource(this.mainRoom, \"source1\", creepName);\r\n                par = false;\r\n\r\n                //save creep name to check task completation\r\n                this.memory['buildColony']['task']['building'] = false;     \r\n\r\n            }\r\n            else  {\r\n                CreepSpawning.sendToSpawnInitializacion(this.mainRoom, creepName, 'initializer',  data2, 'dpt_harvest', true);\r\n                Dpt_Harvest.assigHarvesterToSource(this.mainRoom, \"source2\", creepName);\r\n\r\n                //this.sendToSpawnInitializacion(creepName, 'initializer',  data2, 'dpt_harvest');\r\n                par = true;\r\n            }\r\n            \r\n        }\r\n\r\n    }\r\n    private setCreepActualization() {\r\n        const colonyMem = Memory['colony'][this.mainRoom];\r\n        colonyMem['dpt_build']['actualize'] = true;\r\n\r\n    }\r\n\r\n    private posInControllerRange(targetPos: RoomPosition) {\r\n        const controllerPos = Game.rooms[this.mainRoom].controller.pos;\r\n        if (targetPos.getRangeTo(controllerPos) <= 4) return true;\r\n        return false;\r\n    }\r\n\r\n    /** fase 2 */\r\n    private buildUpgraderContainer() {\r\n        console.log('FASE 2: BUILD UPGRADER CONTAINER');\r\n        \r\n        this.setCreepActualization();\r\n        /*\r\n        //5 transporter and 3 builders (including the queen)\r\n        for (let i = 0; i < 6; ++i) {\r\n            if ( i == 0  || i == 2 || i == 5)  {\r\n                //create builder\r\n                const creepName = names.creepName();\r\n                const data: BuilderData = {\r\n                    source: null,\r\n                    target: {\r\n                        id: null,\r\n                        pos: null,\r\n                        roomName: null\r\n                    },\r\n   \r\n                }\r\n                CreepSpawning.sendToSpawnInitializacion(this.mainRoom, creepName, 'builder', data, 'dpt_build', false);\r\n\r\n                //this.sendToSpawnInitializacion(creepName, 'builder', data, 'dpt_build');\r\n            }\r\n            else {\r\n                const creepName = names.creepName();\r\n                const data: LogisticData = {\r\n                    source: {\r\n                        id: null,\r\n                        roomName: this.mainRoom,\r\n                        pos: null\r\n                    }, \r\n                    target: null\r\n                };\r\n                CreepSpawning.sendToSpawnInitializacion(this.mainRoom, creepName,  'transporter', data, 'dpt_logistic', false);\r\n\r\n                //this.sendToSpawnInitializacion(creepName, 'transporter', data, 'dpt_logistic');\r\n            }\r\n        }\r\n        */\r\n        \r\n        //set logistic storage storage\r\n        /*\r\n        const sourceContainer1ID = planningUtils.getContainerID(this.mainRoom, 'container_source1');\r\n        const sourceContainer2ID = planningUtils.getContainerID(this.mainRoom, 'container_source2');\r\n        Memory['colony'][this.mainRoom]['dpt_logistic']['storage'].push(sourceContainer1ID);\r\n        Memory['colony'][this.mainRoom]['dpt_logistic']['storage'].push(sourceContainer2ID);\r\n        */\r\n        //send upgraderContainer build task to dpt_builder\r\n        const upgraderContainerList = Game.rooms[this.mainRoom].find(FIND_CONSTRUCTION_SITES);\r\n\r\n        //sendBuildTask(this.mainRoom, upgraderContainerList[0].id, upgraderContainerList[0].structureType,  [upgraderContainerList[0].pos.x, upgraderContainerList[0].pos.y]);\r\n        const buildData: BuildTask = {\r\n            'type': upgraderContainerList[0].structureType,\r\n            'roomName': this.mainRoom,\r\n            'pos': [upgraderContainerList[0].pos.x, upgraderContainerList[0].pos.y],\r\n            'modelReference': planningUtils.getContainerReference(this.mainRoom, 'container_controller')\r\n        }\r\n        sendBuildTask(upgraderContainerList[0].id, buildData);\r\n    }\r\n\r\n    private buildReference(structureType: string, ref: number) {\r\n        const refData = Memory['colony'][this.mainRoom]['roomPlanning']['model'][structureType][ref];\r\n        const refPos = new RoomPosition(refData['pos'][0], refData['pos'][1], this.mainRoom); //@ts-ignore\r\n        const rcode = refPos.createConstructionSite( structureType);\r\n\r\n        //save reference and position\r\n        if (rcode == OK) {\r\n            const constructionSideRefPos = Memory['colony'][this.mainRoom]['roomPlanning']['constructionSide'];\r\n            constructionSideRefPos[structureType][ref] = [refPos.x, refPos.y]\r\n        }\r\n\r\n    }\r\n\r\n    /** fase 3 */\r\n    private createSpawnToSourceRoad() {\r\n        //save controller container to dpt_upgrader\r\n        console.log('FASE 3: CREATE ROADS');\r\n        \r\n        const controllerContainer = planningUtils.getContainerID(this.mainRoom, 'container_controller');\r\n        Memory['colony'][this.mainRoom]['dpt_upgrade']['storage']['id'] = controllerContainer;\r\n\r\n\r\n        const spawn0ToSource1RoadRef = Memory['colony'][this.mainRoom]['roomPlanning']['roadReference']['spawn0ToSource1']\r\n        for (let i = 0; i < spawn0ToSource1RoadRef.length; ++i) {\r\n            this.buildReference('road', spawn0ToSource1RoadRef[i])\r\n        }\r\n        const spawn0ToSource2RoadRef = Memory['colony'][this.mainRoom]['roomPlanning']['roadReference']['spawn0ToSource2']\r\n        for (let i = 0; i < spawn0ToSource2RoadRef.length; ++i) {\r\n            this.buildReference('road', spawn0ToSource2RoadRef[i])\r\n        }\r\n        const spawn0ToController = Memory['colony'][this.mainRoom]['roomPlanning']['roadReference']['spawn0ToController']\r\n        for (let i = 0; i < spawn0ToController.length; ++i) {\r\n            this.buildReference('road', spawn0ToController[i])\r\n        }\r\n        this.memory['buildColony']['fase'] = 4;\r\n        this.memory['buildColony']['working'] = false;\r\n\r\n    }\r\n    /** fase 4 */\r\n    private sendConstructionSideToBuildTask(structureType: BuildableStructureConstant) {\r\n        /*\r\n            {\r\n                'road'{\r\n                    9: [x, y],\r\n                    8: [x, y]\r\n                },\r\n                'extension' {\r\n                    \r\n                }\r\n            }\r\n        */\r\n        console.log('CREATE ' + structureType +' BUILD TASKS');\r\n\r\n        const constructionSideRefPos = Memory['colony'][this.mainRoom]['roomPlanning']['constructionSide'];\r\n        for (let ref in constructionSideRefPos[structureType]) {\r\n            const pos: [number, number] = constructionSideRefPos[structureType][ref];\r\n            const csPos = new RoomPosition(pos[0], pos[1], this.mainRoom);\r\n            const constructionSide = csPos.lookFor(LOOK_CONSTRUCTION_SITES);\r\n            for (let i = 0; i< constructionSide.length; ++i) {\r\n                if (constructionSide[i].structureType == structureType) {\r\n                    const buildData: BuildTask = {\r\n                        'type': constructionSide[i].structureType,\r\n                        'roomName': this.mainRoom,\r\n                        'pos': [constructionSide[i].pos.x, constructionSide[i].pos.y],\r\n                        'modelReference': parseInt(ref)\r\n                    }\r\n                    sendBuildTask(constructionSide[i].id, buildData);\r\n                    delete Memory['colony'][this.mainRoom]['roomPlanning']['constructionSide'][structureType][ref];\r\n\r\n                    if (structureType == 'road') {\r\n                        delete  Memory['colony'][this.mainRoom]['roomPlanning']['temp']['road'][ref];\r\n                    }\r\n                    else if (structureType == 'extension') {\r\n                        delete Memory['colony'][this.mainRoom]['roomPlanning']['temp']['extension'][ref];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        /*\r\n        const contructionSideList =  Game.rooms[this.mainRoom].find(FIND_CONSTRUCTION_SITES);\r\n        for (let i = 0; i < contructionSideList.length; ++i) {\r\n            const buildData: BuildTask = {\r\n                'type': contructionSideList[i].structureType,\r\n                'roomName': this.mainRoom,\r\n                'pos': [contructionSideList[i].pos.x, contructionSideList[i].pos.y],\r\n                'modelReference': ref\r\n            }\r\n        }\r\n        sendBuildTask(contructionSideList[0].id, buildData);\r\n    \r\n        if (structureType == 'road') {\r\n            delete Memory['colony'][this.mainRoom]['roomPlanning']['temp']['road'][ref];\r\n        }\r\n        else if (structureType == 'extension') {\r\n            delete Memory['colony'][this.mainRoom]['roomPlanning']['temp']['extension'][ref];\r\n        }\r\n        */\r\n    }\r\n\r\n    private sendBuildTaskRCL0fase4() {\r\n        this.sendConstructionSideToBuildTask('road');\r\n    }\r\n\r\n    public constructAdjacentRoad(pos: [number, number]) {\r\n        const roadList = Memory['colony'][this.mainRoom]['roomPlanning']['temp']['road'];\r\n        \r\n        for (let ref in roadList) {\r\n            \r\n            if (distanceTwoPoints(roadList[ref], pos) == 1) {\r\n                this.buildReference('road', parseInt(ref))\r\n            }\r\n        }\r\n    }\r\n\r\n    private createBuildingsAndAdjacentsRoads(structureType: BuildableStructureConstant) {\r\n        const rcl = Game.rooms[this.mainRoom].controller.level;\r\n        const actualExtensionAvailable = CONTROLLER_STRUCTURES[structureType][rcl];\r\n        const previousExtensionAvailable = CONTROLLER_STRUCTURES[structureType][rcl-1];\r\n\r\n        let extensionBuildable = actualExtensionAvailable - previousExtensionAvailable;\r\n        const tempExt = Memory['colony'][this.mainRoom]['roomPlanning']['temp'][structureType];\r\n        for (let extRef in tempExt) {\r\n            const pos = new RoomPosition(tempExt[extRef][0], tempExt[extRef][1], this.mainRoom);\r\n            if (Game.rooms[this.mainRoom].controller.level == 8 || !this.posInControllerRange(pos)) {\r\n                const rcode = pos.createConstructionSite(structureType);\r\n                if (rcode == OK) {\r\n                    //const constructionSideRefPos = Memory['colony'][this.mainRoom]['roomPlanning']['constructionSide'];\r\n                    Memory['colony'][this.mainRoom]['roomPlanning']['constructionSide'][structureType][extRef] = [pos.x, pos.y]\r\n                    this.constructAdjacentRoad([pos.x, pos.y]);\r\n                    --extensionBuildable;\r\n                }\r\n                if (!extensionBuildable) break;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    private checkNewTower() {\r\n        const towerList = Memory['colony'][this.mainRoom]['roomPlanning']['model']['tower'];\r\n        const actualTower = Memory['colony'][this.mainRoom]['tower']['data'];\r\n        for (let i = 0; i < towerList.length; ++i) {\r\n            const towerId = towerList[i]['id'];\r\n            if (towerId) {\r\n                console.log(towerId);\r\n                \r\n                if (!actualTower[towerId]) {\r\n                    const towerData: towerData = {\r\n                        'energyPetition': false,\r\n                        'task': null,\r\n                        'pos': towerList['pos']\r\n                    }\r\n                    console.log(towerData);\r\n                    \r\n                    Memory['colony'][this.mainRoom]['tower']['data'][towerId] = towerData;\r\n\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private createOneStructure(structureType: BuildableStructureConstant, ref: number, pos: [number, number]): ScreepsReturnCode {\r\n        const ObjectPos = new RoomPosition(pos[0], pos[1], this.mainRoom);\r\n        const rcode = ObjectPos.createConstructionSite(structureType);\r\n        if (rcode == OK) {\r\n            //const constructionSideRefPos = Memory['colony'][this.mainRoom]['roomPlanning']['constructionSide'];\r\n            Memory['colony'][this.mainRoom]['roomPlanning']['constructionSide'][structureType][ref] = [ObjectPos.x, ObjectPos.y]\r\n            this.constructAdjacentRoad([ObjectPos.x, ObjectPos.y]);\r\n        }\r\n\r\n        return rcode\r\n\r\n    }\r\n\r\n    private buildColony() {\r\n        const rcl:number = this.memory['buildColony']['buildRCL'];\r\n        const fase:number = this.memory['buildColony']['fase'];\r\n        switch(rcl) {\r\n            case 0:        //new colony, only have a spawn\r\n                if(fase == 0) this.putSourceUpgraderContainers();         \r\n                else if (fase == 1) this.buildSourceContainers();         //building Task controlled by iniQueen\r\n                else if (fase == 2) this.buildUpgraderContainer();        //buildingTask controlled by dpt_builder\r\n                else if (fase == 3) this.createSpawnToSourceRoad();                           //levelUpTask controlled by Controller\r\n                else this.sendBuildTaskRCL0fase4();\r\n    \r\n                break;\r\n                \r\n            case 1:        \r\n                if (fase == 0) { \r\n                    SuperMove.options.deletePathInRoom(this.mainRoom)\r\n                    this.createBuildingsAndAdjacentsRoads('extension');\r\n                    this.memory['buildColony']['fase'] = 1;\r\n                    this.memory['buildColony']['working'] = false;\r\n                }\r\n                else if (fase == 1) {\r\n                    this.sendConstructionSideToBuildTask('extension');\r\n                    this.sendConstructionSideToBuildTask('road');\r\n                }\r\n                break;\r\n            case 2:\r\n                if (fase == 0) {\r\n                    SuperMove.options.deletePathInRoom(this.mainRoom)\r\n                    this.createBuildingsAndAdjacentsRoads('extension');\r\n                    this.createBuildingsAndAdjacentsRoads('tower');\r\n\r\n                    this.memory['buildColony']['fase'] = 1;\r\n                    this.memory['buildColony']['working'] = false;\r\n                }\r\n                else if (fase == 1) {\r\n                    this.sendConstructionSideToBuildTask('extension');\r\n                    this.sendConstructionSideToBuildTask('road');\r\n                    this.sendConstructionSideToBuildTask('tower');\r\n\r\n                    //this.memory['buildColony']['fase'] = 2;\r\n                    //this.memory['buildColony']['working'] = false;\r\n                }\r\n                else if (fase == 2) {\r\n                    console.log('INITIALIZE TOWER');\r\n                \r\n                    this.checkNewTower();\r\n                    \r\n                    \r\n                }\r\n            \r\n                break;\r\n\r\n            case 3: \r\n                //create storage construction side\r\n                if (fase == 0) {        \r\n                    SuperMove.options.deletePathInRoom(this.mainRoom)\r\n                    this.createBuildingsAndAdjacentsRoads('storage');\r\n\r\n                    this.memory['buildColony']['fase'] = 1;\r\n                    this.memory['buildColony']['working'] = false;\r\n                }\r\n                //realise storage contruction task\r\n                else if (fase == 1) {   \r\n                    this.sendConstructionSideToBuildTask('storage');\r\n                    this.sendConstructionSideToBuildTask('road');\r\n                    \r\n                }\r\n                //change logistic mecanism to storage\r\n                //add source container to Dpt_harvest, and active withdraw tasks\r\n\r\n                else if (fase == 2) {   \r\n                    console.log('MOVE 100K ENERGY TO STORAGE');\r\n                    \r\n                    \r\n                    const logisticStorage = Memory['colony'][this.mainRoom]['dpt_logistic']['storage'];\r\n                    for (let i = 0; i < logisticStorage.length; ++i) {\r\n                        Memory['colony'][this.mainRoom]['dpt_harvest']['container'][logisticStorage[i]] = {\r\n                            withdrawPetition: false,\r\n                        }\r\n                           \r\n                    }\r\n                    Memory['colony'][this.mainRoom]['dpt_logistic']['storage'] = [];\r\n\r\n                    Memory['colony'][this.mainRoom]['dpt_logistic']['storage'].push(Game.rooms[this.mainRoom].storage.id)\r\n\r\n\r\n                }\r\n                //delete source container from Dpt_Logistic\r\n                //add storage to Dpt_Losgistic\r\n                else if (fase == 3) {\r\n                    console.log('CHANGE STORAGE MECANISM');\r\n                    Memory['colony'][this.mainRoom]['dpt_logistic']['storage'] = [];\r\n\r\n                    Memory['colony'][this.mainRoom]['dpt_logistic']['storage'].push(Game.rooms[this.mainRoom].storage.id)\r\n                    this.memory['buildColony']['fase'] = 4;\r\n                    this.memory['buildColony']['working'] = false;\r\n                }\r\n\r\n                //build extensions\r\n                else if (fase == 4) {\r\n                    this.createBuildingsAndAdjacentsRoads('extension');\r\n\r\n                    this.memory['buildColony']['fase'] = 5;\r\n                    this.memory['buildColony']['working'] = false;\r\n                }\r\n                else if (fase == 5) {\r\n                    this.sendConstructionSideToBuildTask('extension');\r\n                    this.sendConstructionSideToBuildTask('road');\r\n                }\r\n\r\n                /*\r\n                Fase 5:\r\n                check if all rampart constructionSide are created\r\n                if not, create a new one and jump to Fase 6.\r\n                if complete jump to fase 7\r\n                */\r\n                else if (fase == 6) {\r\n                    const rampartList = Mem.constructionData(this.mainRoom, 'rampart');\r\n                    let newRampart = false;\r\n                    for (let ref = 0; ref < rampartList.length; ++ref) {\r\n                        if (!rampartList[ref]['id']) {\r\n                            const rcode = this.createOneStructure('rampart', ref, rampartList[ref]['pos']);\r\n                            if (rcode == OK) {\r\n                                newRampart = true;\r\n                                break;\r\n                            } \r\n                        }\r\n                    }\r\n                    if (newRampart) {\r\n                        this.memory['buildColony']['fase'] = 7;\r\n                        this.memory['buildColony']['working'] = false;\r\n                    }\r\n                    else {\r\n                        this.memory['buildColony']['fase'] = 8;\r\n                        this.memory['buildColony']['working'] = false;\r\n                    }\r\n                }\r\n\r\n                /*\r\n                Fase 7: \r\n                send build task, search rampart with hit 1 and send tower repair task\r\n                and jump to fase 6\r\n                */\r\n                else if (fase == 7) {\r\n                    this.sendConstructionSideToBuildTask('rampart');\r\n                    const rampartList = Game.rooms[this.mainRoom].find(FIND_MY_STRUCTURES, {\r\n                        filter: function(object) {\r\n                            return object.structureType == 'rampart' && object.hits == 1;\r\n                        }\r\n                    })\r\n                    if (rampartList.length) {\r\n                        const repairTask: towerRepairTask = {\r\n                            'id': rampartList[0].id,\r\n                            'hits': 50000\r\n                        }\r\n                        Tower.sendRampartRepairTask(this.mainRoom, repairTask);\r\n                        this.memory['buildColony']['fase'] = 6;\r\n                    }\r\n                    this.memory['buildColony']['working'] = false;\r\n\r\n                }\r\n                //wait to levelUp\r\n                else if (fase == 8) {\r\n                    \r\n\r\n                    \r\n                }\r\n\r\n                break;\r\n\r\n            case 4:\r\n                break;\r\n            case 5:\r\n                break;\r\n\r\n            case 6: \r\n                break;\r\n            case 7:\r\n\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    /*\r\n    private sourceContainersBuild(): boolean {\r\n        const container_source1 = planningUtils.getContainerID(this.mainRoom, 'container_source1');\r\n        const container_source2 = planningUtils.getContainerID(this.mainRoom, 'container_source2');\r\n        if (container_source1 != null && container_source2 != null) return true;\r\n\r\n    }\r\n*/\r\n    private checkBuildTaskDone(): boolean {\r\n        return this.memory['buildColony']['task']['building'];\r\n    }\r\n\r\n    private checkLevelUpTaskDone(): boolean {\r\n        return this.memory['buildColony']['task']['levelUP'];\r\n    }\r\n\r\n    private resetFaseValues() {\r\n        this.memory['buildColony']['working'] = false;      //tell OR to run next fase\r\n        this.memory['buildColony']['task']['building'] = false;\r\n        this.memory['buildColony']['task']['levelUP'] = false;\r\n\r\n        \r\n    }\r\n\r\n\r\n    private faseComplete():boolean {\r\n        const rcl:number = this.memory['buildColony']['buildRCL'];\r\n        const fase:number = this.memory['buildColony']['fase'];\r\n        switch(rcl) {\r\n            case 0:        \r\n                //fase 0 will jump automaty to fase 1\r\n                //----------------------\r\n\r\n                //fase 1 complete if controller container builded\r\n                if (fase == 1) {\r\n                    if (this.checkBuildTaskDone()) {\r\n                        this.memory['buildColony']['fase'] = 2;     //construct controller container\r\n                        this.resetFaseValues();\r\n                    }\r\n                }\r\n                //fase 2 complete if controller container build \r\n                else if (fase == 2) {\r\n                    if (this.checkBuildTaskDone()) {\r\n                        this.memory['buildColony']['fase'] = 3;\r\n                        this.resetFaseValues();\r\n                    }\r\n                }\r\n                //fase 3 will jamp atomaty to fase 4\r\n                //--------------\r\n\r\n                //fase 4 complete if road build and rcl level 2\r\n                else if (fase == 4) {\r\n                    if (this.checkBuildTaskDone() && this.checkLevelUpTaskDone()) {\r\n                        this.memory['buildColony']['buildRCL'] = 1;\r\n                        this.memory['buildColony']['fase'] = 0;\r\n                        this.resetFaseValues();\r\n                    }\r\n                }\r\n            case 1:        \r\n                if (fase == 1) {\r\n                    if (this.checkBuildTaskDone() && this.checkLevelUpTaskDone()) {\r\n                        this.memory['buildColony']['buildRCL'] = 2;\r\n                        this.memory['buildColony']['fase'] = 0;\r\n                        this.resetFaseValues();\r\n                    }\r\n                }\r\n                break;\r\n            case 2:\r\n                if (fase == 1) {\r\n                    if (this.checkBuildTaskDone()) {\r\n                        this.memory['buildColony']['fase'] = 2;\r\n                        this.resetFaseValues();\r\n                    }\r\n                }\r\n                //check new tower, no constructionSide, no need to check building\r\n                else if (fase == 2) {\r\n                    //\r\n                    if (this.checkLevelUpTaskDone()) {\r\n                        this.memory['buildColony']['buildRCL'] = 3;\r\n                        this.memory['buildColony']['fase'] = 0;\r\n                        this.resetFaseValues();\r\n                    }\r\n                }\r\n\r\n                break;\r\n\r\n            case 3: \r\n\r\n                //fase 0 jump auto\r\n            \r\n                if (fase == 1) {\r\n                    if (this.checkBuildTaskDone()) {\r\n                        this.memory['buildColony']['fase'] = 2;\r\n                        this.resetFaseValues();\r\n                    }\r\n                } \r\n\r\n                //wait to storage get 100k energy\r\n                else if (fase == 2) {\r\n                    const storage = Game.rooms[this.mainRoom].storage;\r\n                    if (storage.store['energy'] > 100000) {\r\n                        this.memory['buildColony']['fase'] = 4;\r\n                        this.resetFaseValues();\r\n                    }\r\n                }\r\n\r\n                //fase 3 jump auto\r\n\r\n                //fase 4 jump auto\r\n\r\n                //wait build extension\r\n                else if (fase == 5) {\r\n                    if (this.checkBuildTaskDone()) {\r\n                        this.memory['buildColony']['fase'] = 5;\r\n                        this.resetFaseValues();\r\n                    }\r\n                }\r\n\r\n                //fase 6 jump auto\r\n\r\n                else if (fase == 7) {\r\n                    //check if no constructionSide and all rampart hits > 10k\r\n                    \r\n                }\r\n            \r\n                break;\r\n            case 4:\r\n                break;\r\n            case 5:\r\n                break;\r\n\r\n            case 6: \r\n                break;\r\n            case 7:\r\n\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    run() {\r\n        \r\n        if (this.memory['buildColony']['buildRCL'] != 8 && Game.time % 7 == 0) {\r\n            if (!this.memory['buildColony']['working']){\r\n                this.memory['buildColony']['working'] = true;\r\n                this.buildColony();\r\n                \r\n            }\r\n            \r\n            \r\n            else {                                //if OR are working, check if all task complete\r\n                this.faseComplete();\r\n            }\r\n            \r\n            \r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n}","import { Department } from \"../Department\";\r\nimport * as dpt_config from \"@/department/dpt_config\"\r\nimport { moveRequest } from \"@/colony/dpt_comunication\";\r\nimport { CreepSpawning } from \"@/structure/CreepSpawning\";\r\nimport * as names from \"@/colony/nameManagement\";\r\nimport { getEnergyRCL } from \"@/creep/setting\";\r\n\r\nexport default class Dpt_Logistic extends Department {\r\n\r\n    constructor(dptRoom: string) {\r\n        super(dptRoom, 'dpt_logistic');\r\n    }\r\n\r\n    protected actualizeCreepNumber() {\r\n        //throw new Error(\"Method not implemented.\");\r\n        const rclEnergy = getEnergyRCL(Game.rooms[this.mainRoom].energyCapacityAvailable);\r\n        if (rclEnergy == 1) {\r\n            const source: LogisticSourceTask = {\r\n                id: null, \r\n                roomName: null,\r\n                pos: null\r\n            }\r\n            const data: LogisticData = {\r\n                source: source,\r\n                target: null\r\n            }\r\n\r\n            this.sendToSpawnInitializacion('Queen'+'_'+this.mainRoom, 'transporter',  data, 'dpt_logistic');\r\n\r\n            const creepName1 = this.uid();\r\n            this.sendToSpawnInitializacion(creepName1, 'transporter',  data, 'dpt_logistic');\r\n            const creepName2 = this.uid();\r\n            this.sendToSpawnInitializacion(creepName2, 'transporter',  data, 'dpt_logistic');\r\n\r\n        }\r\n\r\n    } \r\n\r\n    private getSourceTask() {\r\n        const requestList = this.memory['sourceTask'];\r\n        const keys = Object.keys(requestList);\r\n        if (keys.length === 0) {\r\n            return null;\r\n        }\r\n        else return requestList[keys[0]];\r\n    }\r\n\r\n    private getTransferTask() {\r\n        const requestList = this.memory['transferTask'];\r\n        const keys = Object.keys(requestList);\r\n        if (keys.length === 0) {\r\n            return null;\r\n        }\r\n        else return requestList[keys[0]];\r\n    }\r\n\r\n    private getStorageID(): string {\r\n        const storageList = this.memory['storage'];\r\n        if (storageList.length == 1) {\r\n            return storageList[0];\r\n        }\r\n        else {\r\n            let maxCapacityUsedStorageIndex = 0;\r\n            for (let i = 1; i < storageList.length; ++i) {\r\n                const storage= Game.getObjectById(storageList[i]);// @ts-ignore\r\n                const actualStorage= Game.getObjectById(storageList[maxCapacityUsedStorageIndex]);// @ts-ignore\r\n\r\n                if (storage.store.getUsedCapacity() > actualStorage.store.getUsedCapacity()) {\r\n                    maxCapacityUsedStorageIndex = i;\r\n                }\r\n            }\r\n            return storageList[maxCapacityUsedStorageIndex];\r\n        }\r\n    }   \r\n\r\n    /** Dpt_logistic creaat move task to reply a request */\r\n    private creatMoveTask(moveTask: MoveRequest): LogisticMoveTask {\r\n        const storage = Game.rooms[this.mainRoom].storage\r\n        if (storage) {\r\n            const task: LogisticMoveTask = {\r\n                type: 'MOVE',\r\n                source: moveTask.source,\r\n                target: {\r\n                    id: storage.id\r\n                }\r\n            }\r\n            return task;\r\n        }\r\n        //!!!!!!!! PUEDE DAR ERROR SI RCL > 5\r\n        else {\r\n            const targetTaskList = this.memory['targetTask'];\r\n            const taskName = Object.keys(targetTaskList);\r\n            if (taskName.length) {\r\n                targetTaskList[taskName[0]];\r\n                const task: LogisticMoveTask = {\r\n                    type: 'MOVE',\r\n                    source: moveTask.source,\r\n                    target: {\r\n                        id: targetTaskList[taskName[0]]\r\n                    }\r\n                }\r\n                return task;\r\n            }\r\n            else return null;\r\n        }\r\n        \r\n    }\r\n\r\n    private getMaxCapacityStorageID(): string{\r\n        const storages = this.memory['storage'];\r\n        if (storages.length == 2) {\r\n            const c1 = Game.getObjectById(storages[0]);\r\n            //console.log(c1);\r\n            \r\n            const c2 = Game.getObjectById(storages[1]);\r\n            //@ts-ignore\r\n            if (c1.store.getUsedCapacity() > c2.store.getUsedCapacity()) {\r\n                return c1.id;\r\n            }\r\n            else return c2.id;\r\n        }\r\n        else if (storages.length == 1) return storages[0]\r\n        else return null\r\n    }\r\n\r\n    private createTransferTask(transferRequest: TransferRequest): TransferTask {\r\n        \r\n        const r: TransferTask = {\r\n            type: 'TRANSFER',\r\n            source: this.getMaxCapacityStorageID(),\r\n            target: transferRequest.target,\r\n            amountDone: 0\r\n        }\r\n        return r;\r\n    }\r\n\r\n    private createWidrawTask(widrawRequest: WithdrawRequest): WidrawTask {\r\n\r\n        const r: WidrawTask = {\r\n            type: 'WITHDRAW',\r\n            source: widrawRequest.source,\r\n            target: this.getMaxCapacityStorageID(),\r\n        }\r\n        return r;\r\n    }\r\n\r\n    private notifyCreepNameToObject(objectID: string, creepName: string) {\r\n        //@ts-ignore\r\n        const object = Game.getObjectById(objectID);\r\n        if (object instanceof Creep) {\r\n            object.memory['task']['logisticCreepName'] = creepName;\r\n        }\r\n\r\n\r\n    }\r\n\r\n    private assigTargetTask(creepName: string): boolean {\r\n        const targetTaskList = this.memory['targetTask'];\r\n        for (let request in targetTaskList) {\r\n            if (request) {\r\n                if (targetTaskList[request]['type'] == 'TRANSFER') {\r\n                    const task = this.createTransferTask(targetTaskList[request]);\r\n                    //notify task object the creep assigned to it\r\n                    this.notifyCreepNameToObject(task.target.id, creepName);\r\n                        //delete this.memory['targetTask'][request];\r\n                    //assig task to logistic creep\r\n                    Game.creeps[creepName].memory['task'] = task;\r\n                        //Game.creeps[creepName].memory['sendTaskRequest'] = false;\r\n                        //return true;\r\n                }\r\n                else if (targetTaskList[request]['type'] == 'WITHDRAW') {\r\n                    const task = this.createWidrawTask(targetTaskList[request]);\r\n                    Game.creeps[creepName].memory['task'] = task;\r\n\r\n                        //return true;\r\n                }\r\n                Game.creeps[creepName].memory['sendTaskRequest'] = false;\r\n                delete this.memory['targetTask'][request];\r\n                return true;\r\n            }\r\n        }\r\n        \r\n        return false;       //no task found\r\n    }\r\n\r\n    private assigSourceTask(creepName: string): boolean {\r\n        return false;\r\n    }\r\n\r\n    private createFillTask(): FillTask {\r\n        const task: FillTask = {\r\n            'type': 'FILL',\r\n            'source': this.getMaxCapacityStorageID(),\r\n            'target': null\r\n        }\r\n        return task;\r\n    }\r\n\r\n    private assigFillTask(creepName: string): void {\r\n        Memory.creeps[creepName]['task'] = this.createFillTask();\r\n    }\r\n\r\n    private processRequest() {\r\n        const requestList = this.memory['request'];\r\n        const sourceTaskList = this.memory['sourceTask'];\r\n        const targetTaskList = this.memory['targetTask'];\r\n        for (let i = requestList.length-1; i >= 0; --i) {\r\n            if (Game.creeps[requestList[i]]) {\r\n                \r\n                if (this.memory['fillTask']) {\r\n                    this.assigFillTask(requestList[i]);\r\n                    Game.creeps[requestList[i]].memory['sendTaskRequest'] = false;\r\n                    this.memory['fillTask'] = false;\r\n                    this.memory['request'].pop();\r\n                }\r\n\r\n                else if (this.assigTargetTask(requestList[i])) {\r\n                    this.memory['request'].pop();                \r\n                }\r\n            }\r\n            else this.memory['request'].pop(); \r\n\r\n       \r\n        }\r\n    \r\n        \r\n    }\r\n\r\n    private deleteDeadOneTimeCreeps() {\r\n        const oneTimeCreeps = this.memory['oneTimeCreeps'];\r\n        for (let creepName in oneTimeCreeps) {\r\n            if (oneTimeCreeps[creepName] <= Game.time) {\r\n                delete this.memory['oneTimeCreeps'][creepName];\r\n                delete Memory.creeps[creepName];\r\n            }\r\n        }\r\n    }\r\n\r\n    static sendToSpawnTransporter(roomName: string, oneTime: boolean): string {\r\n        let dpt = '-';\r\n        if (!oneTime) dpt = 'dpt_logistic';\r\n        const creepName = names.creepName();\r\n        const data: LogisticData = {\r\n            source: {\r\n                id: null,\r\n                roomName: roomName,\r\n                pos: null\r\n            }, \r\n            target: null\r\n        };\r\n        CreepSpawning.sendToSpawnInitializacion(roomName, creepName,  'transporter', data, dpt, false);\r\n    \r\n        return creepName\r\n    }\r\n\r\n    private checkPermanentCreepNum() {\r\n        const rcl = Game.rooms[this.mainRoom].controller.level;\r\n        if (rcl <= 7 && rcl > 1) {\r\n            const creepsList = this.memory['ticksToSpawn'];\r\n            const creepsName = Object.keys(creepsList);\r\n            if (creepsName.length == 0) {\r\n                const name = Dpt_Logistic.sendToSpawnTransporter(this.mainRoom, false);\r\n                this.memory['ticksToSpawn'][name] = null;\r\n            }\r\n            else {\r\n                if (creepsList[creepsName[0]] != null && creepsList[creepsName[0]] < Game.time) {\r\n                    CreepSpawning.sendToSpawnRecycle(this.mainRoom,creepsName[0], 'transporter', 'dpt_logistic');\r\n                    CreepSpawning.initializeCreepState(creepsName[0]);\r\n\r\n                    this.memory['ticksToSpawn'][[creepsName[0]]] = null;\r\n\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public run() {\r\n        this.processRequest();\r\n\r\n        if (Game.time % 7) {\r\n            this.checkPermanentCreepNum();\r\n        }\r\n        if (Game.time% 97) {\r\n            this.deleteDeadOneTimeCreeps();\r\n        }\r\n\r\n    }\r\n\r\n}","import { towerTask } from \"@/colony/nameManagement\";\r\nimport { Tower } from \"./Tower\";\r\n\r\n\r\nexport class ControllerOrder {\r\n    private mainRoom: string;\r\n    private controller: StructureController;\r\n    private memory: {};\r\n\r\n    constructor(roomName: string) {\r\n        this.mainRoom = roomName;\r\n        this.controller = Game.rooms[roomName].controller;\r\n        this.memory = Memory['colony'][roomName]['state']['controller'];\r\n    }\r\n\r\n    private sendFillTask(): void {\r\n        Memory['colony'][this.mainRoom]['dpt_logistic']['fillTask'] = true;\r\n    }\r\n\r\n    private checkRoomEnergy(): void {\r\n        //asegurar la prioridad de transporter en el cambio de container a storage\r\n        const storage = Game.rooms[this.mainRoom].storage;\r\n        if(storage) {\r\n            if (storage.store['energy'] < 1000) return;\r\n        }\r\n\r\n        const energyCapacity = Game.rooms[this.mainRoom].energyCapacityAvailable\r\n        const energyAvailable = Game.rooms[this.mainRoom].energyAvailable;\r\n        if (energyAvailable < energyCapacity) {\r\n            this.sendFillTask();\r\n            //this.memory['fillTaskTTL'] = Game.time + 50;\r\n        }\r\n        else {\r\n            //this.memory['fillTaskTTL'] = -1;\r\n        }\r\n    }\r\n\r\n    private checkRCL() {\r\n        const actualRCL = this.memory['actualRCL'];\r\n        const rcl = Game.rooms[this.mainRoom].controller.level\r\n        if (rcl > actualRCL) {\r\n            this.memory['actualRCL'] = Memory['colony'][this.mainRoom]['state']['buildColony']['buildRCL'] + 2;\r\n            Memory['colony'][this.mainRoom]['state']['buildColony']['task']['levelUP'] = true;\r\n        }\r\n    }\r\n\r\n    private checkRoads() {\r\n        const roadList = Memory['colony'][this.mainRoom]['roomPlanning']['model']['road'];\r\n        for (let i = 0; i < roadList.length; ++i) {\r\n            const roadId = roadList[i]['id'];\r\n            if (roadId) {\r\n                const road = Game.getObjectById(roadId as Id<StructureRoad>);\r\n                if (road.hits < road.hitsMax - 800) {\r\n                    Tower.sendRoadRepairTask(this.mainRoom, roadId);\r\n                }\r\n            }\r\n        }\r\n\r\n        //check Container\r\n        const containerList = Memory['colony'][this.mainRoom]['roomPlanning']['model']['container'];\r\n        for (let i = 0; i < containerList.length; ++i) {\r\n            const containerId = containerList[i]['id'];\r\n            if (containerId) {\r\n                const container = Game.getObjectById(containerId as Id<StructureContainer>);\r\n                if (container.hits < container.hitsMax - 800) {\r\n                    Tower.sendRoadRepairTask(this.mainRoom, containerId);\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    private findHostileCreeps() {\r\n        const room = Game.rooms[this.mainRoom];\r\n        const targets = room.find(FIND_HOSTILE_CREEPS);\r\n\r\n        for (let i = 0; i < targets.length; ++i) {\r\n            Tower.sendAttackTask(this.mainRoom, targets[i].id);\r\n        }\r\n    }\r\n\r\n    public run() {\r\n        //realise fill task\r\n        if (Game.time % 3 == 0) {\r\n            this.checkRoomEnergy();\r\n        } \r\n\r\n        if (Game.time % 3 == 0) {\r\n            this.findHostileCreeps();\r\n        }\r\n\r\n        // room fase change\r\n        if (Game.time % 53 == 0) {\r\n            this.checkRCL();\r\n        }\r\n\r\n        //road repair\r\n        if (Game.time % 1009 == 0) {\r\n            this.checkRoads();\r\n        }\r\n\r\n        \r\n\r\n\r\n\r\n    }\r\n\r\n\r\n}","import { Department } from \"../Department\";\r\nimport * as dpt_config from \"@/department/dpt_config\"\r\nimport * as setting from \"@/creep/setting\";\r\nimport * as names from \"@/colony/nameManagement\"\r\nimport { CreepSpawning } from \"@/structure/CreepSpawning\";\r\nimport { filter } from \"lodash\";\r\nimport { getEnergyRCL } from \"@/creep/setting\";\r\n\r\nexport default class Dpt_Build extends Department {\r\n    \r\n    \r\n    constructor(dptRoom: string) {\r\n        super(dptRoom, 'dpt_build');\r\n    }\r\n    \r\n\r\n  \r\n    public recycleCreepsDead() {\r\n        const ticksToSpawn = this.memory['ticksToSpawn'];\r\n        for (let creepName in ticksToSpawn) {\r\n            \r\n\r\n            \r\n            if (Game.time >= ticksToSpawn[creepName]) {\r\n                this.sendSpawnTask(creepName, 'worker');\r\n                delete ticksToSpawn[creepName];\r\n                \r\n            }\r\n        }\r\n    }\r\n\r\n    private realiaseBuildTask() {\r\n        const rclEnergy = getEnergyRCL(Game.rooms[this.mainRoom].energyCapacityAvailable);\r\n        const memReference = Memory['colony'][this.mainRoom]['roomPlanning']['stage'];\r\n        for (let structureName in memReference) {\r\n            for (let i = 0; i < memReference[structureName].length; ++i) {\r\n                this.memory['buildTask'].push({'name': structureName, 'position': memReference[structureName]})\r\n                \r\n                \r\n                for (let j = 0; j < memReference[structureName].length; ++j) {\r\n                    const pos = new RoomPosition(memReference[structureName][j][0], memReference[structureName][j][1], this.mainRoom);\r\n                    \r\n                    pos.createConstructionSite(structureName as BuildableStructureConstant);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private getBuiilderWorkBody(energyRCL: number) {\r\n        return setting.bodyComponentNum['builder'][energyRCL][0];\r\n    }\r\n\r\n    private getBuilderFactor(energyRCL: number) {\r\n        return 1000/this.getBuiilderWorkBody(energyRCL);\r\n    }\r\n\r\n    private getBuildersNeeded(): number {\r\n        const buildCost:number = this.memory['buildCost'];\r\n        const availableEnergy = Game.rooms[this.mainRoom].energyCapacityAvailable;\r\n        const energyRCL = getEnergyRCL(availableEnergy);\r\n        \r\n        const builderFactor = this.getBuilderFactor(energyRCL);\r\n\r\n       \r\n        const num = Math.trunc(buildCost/builderFactor) + 1;\r\n        if (num > 5) return 5;\r\n        else return num;\r\n    \r\n\r\n    }\r\n\r\n    private getAliveCreeps(): number {\r\n        const creepList = this.memory['ticksToSpawn'];\r\n        let n = 0;\r\n        for (let creepName in creepList) {\r\n            if (Game.creeps[creepName] || creepList[creepName] == null) ++n;\r\n        }\r\n        return n;\r\n    }\r\n\r\n    static existTask(roomName: string): boolean {\r\n\r\n        return (Memory['colony'][roomName]['dpt_build']['buildCost'] > 0)\r\n    }\r\n    \r\n    static deleteBuildTask(roomName: string, id: string, pos: [number, number]) {\r\n\r\n        //delete task and actualize creepCost\r\n        const task: BuildTask = Memory['colony'][roomName]['dpt_build']['buildTask'][id];\r\n        if (task) {\r\n            //save structure id to planning model \r\n            const constuctionSidePos = new RoomPosition(pos[0], pos[1], roomName);\r\n            const structure = constuctionSidePos.lookFor(LOOK_STRUCTURES);\r\n\r\n            Memory['colony'][roomName]['roomPlanning']['model'][task.type][task.modelReference]['id'] = structure[0].id;\r\n\r\n            const type:BuildableStructureConstant = Memory['colony'][roomName]['dpt_build']['buildTask'][id]['type'];\r\n            const buildCost = Memory['colony'][roomName]['dpt_build']['buildCost'];\r\n            Memory['colony'][roomName]['dpt_build']['buildCost'] = buildCost - CONSTRUCTION_COST[type];\r\n\r\n            delete Memory['colony'][roomName]['dpt_build']['buildTask'][id];\r\n            \r\n        }\r\n        //check if all task complete\r\n        //console.log('Total build cost: ');\r\n        //console.log(Memory['colony'][roomName]['dpt_build']['buildCost']);\r\n        \r\n        \r\n        if (Memory['colony'][roomName]['dpt_build']['buildCost'] == 0) {\r\n            Memory['colony'][roomName]['state']['buildColony']['task']['building'] = true;\r\n        }\r\n\r\n    }\r\n\r\n    private creepsSavedDeath(): Array<string> {\r\n        const creepList = this.memory['ticksToSpawn'];\r\n        let creepsDeadName = [];\r\n        for (let creepName in creepList) {\r\n            if (creepList[creepName] && creepList[creepName] <= Game.time) creepsDeadName.push(creepName);\r\n        }\r\n        return creepsDeadName;\r\n\r\n    }\r\n\r\n    private checkCreepNum(): void {\r\n    \r\n        const buildTaskID = Object.keys(this.memory['buildTask']);\r\n        if (buildTaskID.length <= 0) return;\r\n\r\n        else {\r\n            const buildersNeeded = this.getBuildersNeeded();\r\n            const creepAlive = this.getAliveCreeps();\r\n\r\n            let needToSpawn = buildersNeeded - creepAlive;\r\n\r\n            //spawn no saved transporter\r\n            for (let i = 0; i < needToSpawn; ++i) {\r\n                const creepName = names.creepName();\r\n                const data: LogisticData = {\r\n                    source: {\r\n                        id: null,\r\n                        roomName: this.mainRoom,\r\n                        pos: null\r\n                    }, \r\n                    target: null\r\n                };\r\n                //this.memory['transporterCreeps'][creepName] = '';\r\n                CreepSpawning.sendToSpawnInitializacion(this.mainRoom, creepName,  'transporter', data, '-', false);\r\n            }\r\n\r\n            \r\n            if (needToSpawn <= 0) return ;\r\n            else {\r\n                const buildersSaved = this.creepsSavedDeath();\r\n                //spawn saved builders\r\n                /*\r\n                for (let i = 0; i < buildersSaved.length && needToSpawn; ++i) {\r\n                    CreepSpawning.sendToSpawnRecycle(this.mainRoom, buildersSaved[i], 'builder', 'dpt_build')\r\n                    //this.sendSpawnTask(buildersSaved[i], 'builder');\r\n                    this.memory['ticksToSpawn'][buildersSaved[i]] = null;\r\n                    CreepSpawning.initializeCreepState(buildersSaved[i]);\r\n                    --needToSpawn;\r\n                }\r\n                */\r\n                while (needToSpawn) {\r\n                    //create new builder unsaved\r\n   \r\n                        //create builder\r\n                    const creepName = names.creepName();\r\n                    const data: BuilderData = {\r\n                        source: null,\r\n                        target: {\r\n                            id: null,\r\n                            pos: null,\r\n                            roomName: null\r\n                        },\r\n                        logisticCreepName: null\r\n                    }\r\n                    CreepSpawning.sendToSpawnInitializacion(this.mainRoom, creepName, 'builder', data, 'dpt_build', false);\r\n                    this.memory['ticksToSpawn'][creepName] = null;\r\n                    --needToSpawn;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private cleanCreepMemory() {\r\n        const savedUpgrader = this.memory['ticksToSpawn'];\r\n        for (let creepName in savedUpgrader) {\r\n            if (savedUpgrader[creepName] && savedUpgrader[creepName] < Game.time) {\r\n                delete this.memory['ticksToSpawn'][creepName];\r\n                delete Memory.creeps[creepName]\r\n            }\r\n        }\r\n    }\r\n\r\n    public run(): void {\r\n\r\n        if (Game.time%23 == 0) {\r\n            this.checkCreepNum();\r\n            \r\n            //this.memory['actualize'] = false;\r\n        }\r\n\r\n        if (Game.time % 53 == 0)  {\r\n            this.cleanCreepMemory();\r\n        }\r\n\r\n\r\n    }\r\n}\r\n\r\n","import { sendLogisticTask } from \"@/colony/dpt_comunication\";\r\nimport { creepName, logisticTaskName } from \"@/colony/nameManagement\";\r\nimport { getContainerID } from \"@/operationResearch/planningUtils\";\r\nimport { CreepSpawning } from \"@/structure/CreepSpawning\";\r\nimport { Department } from \"../Department\";\r\n\r\n\r\n\r\nexport default class Dpt_Upgrader extends Department {\r\n\r\n    constructor(dptRoom: string) {\r\n        super(dptRoom, 'dpt_upgrade');\r\n    }\r\n\r\n    private sendTransferTaskContainer() {\r\n        const request: TransferRequest = {\r\n            'type': 'TRANSFER',\r\n            'target': {\r\n                'id': this.memory['storage']['id'],\r\n                'resourceType': 'energy',\r\n                'amount': 1\r\n            }\r\n        }\r\n        sendLogisticTask(this.mainRoom, logisticTaskName(request), request);\r\n    }\r\n\r\n    private container_controllerRealiseTask() {\r\n        const container = Game.getObjectById(this.memory['storage']['id'])\r\n        if (!container) return\r\n        const logisticTaskNum = Memory['colony'][this.mainRoom]['dpt_logistic']['targetTask'];\r\n        const taskNum = Object.keys(logisticTaskNum).length\r\n        if (taskNum > 10) return;\r\n        const containerMem = Memory['colony'][this.mainRoom]['dpt_upgrade']['container'];   //@ts-ignore\r\n        const stage = Math.trunc((2000 - container.store['energy']) / 400);\r\n        //console.log(stage);\r\n    \r\n            //stage1:   < 1500 \r\n            //stage2:   < 1000\r\n            //stage3:   < 500\r\n        if (stage >= 1 && Game.time >= containerMem['stage1']) {\r\n            this.sendTransferTaskContainer();\r\n            containerMem['stage1'] = Game.time + 40;\r\n        }\r\n        if (stage >= 2 && Game.time >= containerMem['stage2']) {\r\n            this.sendTransferTaskContainer();\r\n            containerMem['stage2'] = Game.time + 40;\r\n        }\r\n        if (stage >= 3 && Game.time >= containerMem['stage3']) {\r\n            this.sendTransferTaskContainer();\r\n            containerMem['stage3'] = Game.time + 40;\r\n        }\r\n        if (stage >= 4) {\r\n            this.sendTransferTaskContainer();\r\n        }\r\n        \r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    private containerStage() {\r\n        if (!this.memory['storage']['id']) return \r\n        this.container_controllerRealiseTask();\r\n        const containerID = this.memory['storage']['id'];\r\n \r\n\r\n        //calculate energy in container or storage\r\n        let energyMin = 3000;\r\n        let energyAvailable = 0;\r\n        const storage = Game.rooms[this.mainRoom].storage;\r\n        if (!storage) {\r\n            const containerID1 = getContainerID(this.mainRoom, 'container_source1');\r\n            const containerID2 = getContainerID(this.mainRoom, 'container_source2');\r\n            //@ts-ignore\r\n            const container1 = Game.getObjectById(containerID1);    //@ts-ignore\r\n            const container2 = Game.getObjectById(containerID2);    //@ts-ignore\r\n            energyAvailable = container1.store[RESOURCE_ENERGY] + container2.store[RESOURCE_ENERGY]\r\n        }\r\n        else {\r\n            energyAvailable = storage.store['energy'];\r\n            energyMin = 100000;\r\n        }\r\n        if (energyAvailable > 3000) {    \r\n            //create a transporter\r\n            \r\n            const numBuilders = Object.keys(this.memory['ticksToSpawn']).length;\r\n            if (numBuilders <= 5) {\r\n                \r\n                //limit transporter num\r\n                if (!this.memory['spawnTransporter']) {       \r\n                    const nameT = creepName();\r\n                    const dataT: LogisticData = {\r\n                        source: {\r\n                            id: null,\r\n                            roomName: this.mainRoom,\r\n                            pos: null\r\n                        }, \r\n                        target: null\r\n                    };\r\n                    CreepSpawning.sendToSpawnInitializacion(this.mainRoom, nameT,  'transporter', dataT, '-', false);\r\n                }\r\n                this.memory['spawnTransporter'] = !this.memory['spawnTransporter'];\r\n                \r\n                //create a upgrader\r\n                const name =  creepName();\r\n                    const data: Upgrader_baseData = {\r\n                        'source': containerID,\r\n                        'logisticCreepName': null\r\n                    };\r\n                CreepSpawning.sendToSpawnInitializacion(this.mainRoom, name, 'upgrader_base', data, 'dpt_upgrade', false);\r\n                this.memory['ticksToSpawn'][name] = null;\r\n        \r\n            }\r\n    }\r\n}\r\n\r\n    private containerStage1() {\r\n        if (!this.memory['storage']['id']) return \r\n        const containerID = this.memory['storage']['id'];\r\n\r\n    }\r\n\r\n    private cleanCreepMemory() {\r\n        const savedUpgrader = this.memory['ticksToSpawn'];\r\n        for (let creepName in savedUpgrader) {\r\n            if (savedUpgrader[creepName] && savedUpgrader[creepName] < Game.time) {\r\n                delete this.memory['ticksToSpawn'][creepName];\r\n                delete Memory.creeps[creepName]\r\n            }\r\n        }\r\n    }\r\n\r\n    private storageStage() {\r\n\r\n    }\r\n\r\n    public run() {\r\n\r\n        if (Game.rooms[this.mainRoom].controller.level < 8) {\r\n\r\n            if (!Game.rooms[this.mainRoom].terminal) {\r\n                const buildTask = Memory['colony'][this.mainRoom]['dpt_build']['buildTask'];\r\n                if (!Object.keys(buildTask)[0]) {\r\n                    if(Game.time % 53 == 0) this.containerStage();\r\n                    if (Game.time % 31 == 0) this.container_controllerRealiseTask();\r\n                }\r\n            }\r\n            else {  //super boost\r\n\r\n            }\r\n\r\n        }\r\n        else {\r\n            \r\n        }\r\n\r\n        if (Game.time % 23 == 0) {\r\n            this.cleanCreepMemory();\r\n        }\r\n\r\n    }\r\n\r\n}\r\n","import {Mem} from \"./Memory\"\r\nimport { CreepSpawning } from \"@/structure/CreepSpawning\";\r\nimport { OperationReserch } from \"@/operationResearch/OperationReserch\";\r\nimport Dpt_Logistic from \"@/department/dpt_logistic/Dpt_Logistic\";\r\nimport { ControllerOrder } from \"@/structure/ControllerOrder\";\r\nimport Dpt_Build from \"@/department/dpt_build/Dpt_Build\";\r\nimport Dpt_Harvest from \"@/department/dpt_harvest/Dpt_Harvest\";\r\nimport Dpt_Upgrader from \"@/department/dpt_upgrader/Dpt_Upgrader\";\r\nimport { Tower } from \"@/structure/Tower\";\r\n\r\n\r\n/** \r\n    Ocupa de ejecutar todas las acciones de una colonia\r\n    y la comunicacion intercolonial\r\n*/\r\nexport class Colony {\r\n\r\n    mainRoom: string;  //main roomName\r\n    /* Colony property */\r\n    //dpt_build: dpt_build;\r\n    //creepSpawning: CreepSpawning;\r\n\r\n    constructor(mainRoom: string) {\r\n        this.mainRoom = mainRoom;\r\n        //this.memory = new Mem(mainRoom);\r\n        //this.dpt_build = new dpt_build(mainRoom);\r\n        //this.creepSpawning = new CreepSpawning(mainRoom);\r\n    }\r\n\r\n\r\n\r\n    //initialize colony Memory\r\n    public initializeMem(): void {\r\n        const memory = new Mem(this.mainRoom);\r\n        memory.initializeColonyMem();\r\n    }\r\n\r\n\r\n    public run() {\r\n\r\n        const dpt_harvest = new Dpt_Harvest(this.mainRoom);\r\n        dpt_harvest.run();\r\n\r\n        const dpt_build = new Dpt_Build(this.mainRoom);\r\n        dpt_build.run();\r\n\r\n        const dpt_logistic = new Dpt_Logistic(this.mainRoom);\r\n        dpt_logistic.run();\r\n\r\n        const creepSpawning = new CreepSpawning(this.mainRoom);\r\n        creepSpawning.run();\r\n\r\n        const controller = new ControllerOrder(this.mainRoom);\r\n        controller.run();\r\n\r\n        const operationResearch = new OperationReserch(this.mainRoom);\r\n        operationResearch.run();\r\n\r\n        const dpt_upgrader = new Dpt_Upgrader(this.mainRoom);\r\n        dpt_upgrader.run();\r\n\r\n        const tower = new Tower(this.mainRoom);\r\n        tower.run();\r\n    }\r\n    \r\n}\r\n\r\n\r\n//Memory['colony']['W1N7']['creepSpawning']['spawn'].push('Spawn1')\r\n//ColonyApi.createColony('W1N7')\r\n//ColonyApi.deleteColony('W1N7')\r\n//Memory.creeps = {}\r\n\r\n//Memory['colony']['W7N7']['dpt_build']['ticksToSpawn']['W7N7_dptWork_1'] = Game.time + 10;","import { OperationReserch } from \"@/operationResearch/OperationReserch\";\r\nimport {Colony} from \"./Colony\"\r\n\r\nglobal.ColonyApi = {\r\n    createColony(roomName: string) : string{\r\n        const col1 = new Colony(roomName);\r\n        col1.initializeMem();\r\n        //col1.updateSpawnTask();\r\n\r\n        return \"Colony \" + roomName + \" created.\"\r\n\r\n\r\n    },\r\n    deleteColony(roomName: string):string {\r\n        delete Memory['colony'][roomName];\r\n        return \"Colony \" + roomName + \" deleted\" ;\r\n    },\r\n\r\n    sendTaskRequest(roomName: string ,dpt: string, request: TaskRequest) {\r\n        Memory['colony'][roomName][dpt]['request'].push(request);\r\n    },\r\n    \r\n\r\n    //************* DEBUG ************** */\r\n    setWorkingFaseToFalse(roomName: string) {\r\n        Memory['colony'][roomName]['state']['buildColony']['working'] = false;\r\n    },\r\n\r\n\r\n    setWorkingFase(roomName: string, fase: number) {\r\n        Memory['colony'][roomName]['state']['buildColony']['fase'] = fase;\r\n    },\r\n\r\n    destroyAllBuilding(roomName: string) {\r\n        const building = Game.rooms[roomName].find(FIND_STRUCTURES, \r\n        {filter: (structure)=> structure.structureType != 'spawn'}    \r\n        )\r\n        for (let i = 0; i < building.length; ++i) {\r\n            building[i].destroy();\r\n        }\r\n\r\n    },\r\n\r\n    constructAdjacentRoad(roomName: string, pos: [number, number]) {\r\n        const a = new OperationReserch(roomName);\r\n        a.constructAdjacentRoad(pos);\r\n    },\r\n\r\n    deleteAllLogisticTask(roomName: string) {\r\n        Memory['colony'][roomName]['dpt_logistic']['targetTask'] = {}\r\n    },\r\n\r\n    cleanBuildTask(roomName: string) {\r\n        Memory['colony'][roomName]['dpt_build']['buildTask'] = {}\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport function nothing(){\r\n    return \"nothinf\"\r\n}\r\n\r\n","\r\nconst MemHack = {\r\n    memory: null,\r\n    parseTime: -1,\r\n    register() {\r\n        const start = Game.cpu.getUsed()\r\n        this.memory = Memory\r\n        const end = Game.cpu.getUsed()\r\n        this.parseTime = end - start \r\n        this.memory = RawMemory._parsed        \r\n    },\r\n    pretick() {\r\n        delete global.Memory\r\n        global.Memory = this.memory \r\n        RawMemory._parsed = this.memory\r\n    }\r\n}\r\n\r\nMemHack.register()\r\nexport default MemHack","\r\n\r\nexport function saveStructureID(roomName:string, structureType: string, index: number, id: string):void {\r\n    Memory['colony'][roomName]['roomPlanning']['model'][structureType][index]['id'] = id;\r\n}\r\n\r\n/** CONTAINER CONSULTOR */\r\nexport function getContainerIndex(roomName: string, structureFunction: ContainerFunction):number {\r\n    return Memory['colony'][roomName]['roomPlanning']['containerReference'][structureFunction];\r\n}\r\n\r\nexport function getRangePoints(pos: [number, number], range: number) {\r\n    \r\n}\r\n\r\nexport function getRampartDataByReference(roomName: string, ref: number): structureData {\r\n    const rampartData = Memory['colony'][roomName]['roomPlanning']['model']['rampart'][ref];\r\n    const r: structureData = {\r\n        'id': rampartData['id'],\r\n        'pos': rampartData['pos']\r\n    }\r\n    return r\r\n}","import { sendLogisticTask, sendORBuildingTaskCompletation, sendRequest } from \"@/colony/dpt_comunication\";\r\nimport { logisticTaskName } from \"@/colony/nameManagement\";\r\nimport { getContainerIndex, saveStructureID } from \"@/colony/planningUtils\";\r\nimport Dpt_build from \"@/department/dpt_build/Dpt_Build\";\r\nimport * as publisher from \"../taskPublisher\";\r\n\r\nconst roles:{\r\n    [role in BaseRoleConstant]: (data: {}) => ICreepConfig\r\n} = {\r\n    colonizer: (data: SourceTargetData): ICreepConfig => ({\r\n        source: creep => {\r\n            const source = Game.getObjectById(data.source as Id<Source>);\r\n            if (creep.harvest(source) == ERR_NOT_IN_RANGE) {\r\n                creep.moveTo(source);\r\n            }\r\n            return creep.store.getFreeCapacity() <= 0;\r\n        },\r\n        target: creep => {\r\n            const cSide = creep.pos.findClosestByRange(FIND_CONSTRUCTION_SITES);\r\n            const controller = Game.rooms[creep.room.name].controller;\r\n            if (creep.upgradeController(controller) == ERR_NOT_IN_RANGE) creep.moveTo(controller);\r\n\r\n            /*\r\n            if (cSide) {\r\n                if (creep.build(cSide) == ERR_NOT_IN_RANGE) creep.moveTo(cSide);\r\n            }\r\n            */\r\n           \r\n            return (creep.store.getUsedCapacity() <= 0);\r\n        }\r\n\r\n\r\n        \r\n\r\n    }),\r\n\r\n\r\n    builder: (data: {}): ICreepConfig => ({\r\n        prepare: creep => {\r\n            const request: TransferRequest = {\r\n                'type': 'TRANSFER',\r\n                'target': {\r\n                    'id': creep.id,\r\n                    'resourceType': 'energy',\r\n                    'amount': -1\r\n                }\r\n            }\r\n            creep.say('LogisticTask Sended')\r\n            sendLogisticTask(creep.memory['roomName'], logisticTaskName(request), request);\r\n            return true;\r\n        },\r\n\r\n        source: creep => {\r\n            const target = creep.memory['task']['target'];\r\n            if (target['id']) {         \r\n                const contructionSide = Game.getObjectById(target['id']);\r\n                //task no complete\r\n                if (contructionSide) {  //@ts-ignore\r\n\r\n                    //send logistic request\r\n                    /*\r\n                    if (!creep.memory['sendLogisticRequest']) {\r\n                        const request: TransferRequest = {\r\n                            'type': 'TRANSFER',\r\n                            'target': {\r\n                                'id': creep.id,\r\n                                'resourceType': 'energy',\r\n                                'amount': -1\r\n                            }\r\n                        }\r\n                        creep.say('LogisticTask Sended')\r\n                        sendLogisticTask(creep.memory['roomName'], logisticTaskName(request), request);\r\n                        creep.memory['sendLogisticRequest'] = true;\r\n                    }\r\n                    */\r\n                    \r\n                    //@ts-ignore\r\n                    const range = creep.pos.getRangeTo(contructionSide)\r\n\r\n                   //@ts-ignore\r\n                   const rcode = creep.moveTo(contructionSide);\r\n\r\n                    if (range <= 2) {\r\n                        return true;\r\n                    }\r\n                    return false;\r\n\r\n                }\r\n                else {    //constructionSide complete, delete creep.memory\r\n                    creep.memory['task']['target']['id'] = null;\r\n                    creep.memory['task']['target']['pos'] = null;\r\n                    creep.memory['task']['target']['roomName'] = null;\r\n                    return false;\r\n                }\r\n            }\r\n            else {  //no target, try to find a target\r\n                if (Game.time % 7 == 0) {\r\n                    \r\n                    const closeContructionSide = creep.pos.findClosestByRange(FIND_CONSTRUCTION_SITES);\r\n                    if (closeContructionSide) {\r\n                        //console.log(creep.memory['task']['target']['id']);\r\n                        \r\n                        creep.memory['task']['target']['id'] = closeContructionSide.id;\r\n                        creep.memory['task']['target']['pos'] = [closeContructionSide.pos.x, closeContructionSide.pos.y];\r\n                        creep.memory['task']['target']['roomName'] = closeContructionSide.room.name;\r\n\r\n                        \r\n                    }\r\n                    else {\r\n                        //send task request to dpt_build\r\n                        //this request will be delete if departament do not have task to offer\r\n                        //sendRequest(creep.memory['roomName'], 'dpt_build', creep.name);  \r\n                    }\r\n                }\r\n                else creep.say('💤');\r\n                return false;\r\n            }\r\n\r\n\r\n        },\r\n        target: creep => {\r\n            const target = Game.getObjectById(creep.memory['task']['target']['id'] as Id<ConstructionSite>);\r\n            \r\n            if (target) {\r\n                const r = creep.build(target);\r\n                if (r == ERR_NOT_ENOUGH_ENERGY) {\r\n                    creep.say('⚡');\r\n                    \r\n                    const logisticCreepName = creep.memory['task']['logisticCreepName'];\r\n                    if (logisticCreepName) {                            \r\n                        const logisticCreep = Game.creeps[logisticCreepName];\r\n                        \r\n                        if (!logisticCreep) {\r\n                            creep.memory['sendLogisticRequest'] = false;\r\n                            creep.suicide();\r\n                            return true;    //change state to end logistic request\r\n                        }\r\n                    }\r\n                    const flag = Game.flags[creep.room.name + '_builderPoint']\r\n                    if (flag) creep.moveTo(flag);\r\n                    \r\n                } \r\n                else if (r == ERR_NOT_IN_RANGE) creep.moveTo(target, {ignoreCreeps: true})\r\n                \r\n                return false;\r\n            }\r\n            else {      //contructionside complete, change state to source to get new task\r\n                Dpt_build.deleteBuildTask(creep.memory['roomName'], creep.memory['task']['target']['id'],creep.memory['task']['target']['pos'] );\r\n\r\n                creep.memory['task']['target']['id'] = null;\r\n                creep.memory['task']['target']['pos'] = null;\r\n                creep.memory['task']['target']['roomName'] = null;\r\n                \r\n                return true;\r\n            }\r\n\r\n            //return creep.store[RESOURCE_ENERGY] <= 0\r\n        }\r\n    }),\r\n\r\n    harvester: (data: HarvesterData): ICreepConfig => ({\r\n        source: creep => {\r\n            const source = Game.getObjectById(data.source as Id<Source>);\r\n            if (creep.harvest(source) == ERR_NOT_IN_RANGE) {\r\n                creep.moveTo(source);\r\n            }\r\n            //change state if creep store max\r\n            return creep.store.getFreeCapacity() <= 0;\r\n        },\r\n        target: creep => {\r\n            let target: StructureContainer | StructureLink;\r\n            target = Game.getObjectById(data.target as Id<StructureContainer> | Id<StructureLink>);\r\n            \r\n            if (target) {\r\n                if(target.hits < target.hitsMax - 800) {\r\n                    creep.repair(target);\r\n                } else {\r\n                    creep.transfer(target, RESOURCE_ENERGY)\r\n                }\r\n            \r\n            }\r\n            return (creep.store.getUsedCapacity() <= 0);\r\n        }\r\n\r\n\r\n        \r\n\r\n    }),\r\n\r\n    \r\n    \r\n    initializer: (data: InitializerData): ICreepConfig => ({\r\n        source: creep => {\r\n            const source = Game.getObjectById(data.source as Id<Source>);\r\n            \r\n            if (creep.harvest(source) == ERR_NOT_IN_RANGE) {\r\n                creep.moveTo(source);\r\n            }\r\n\r\n            return creep.store.getFreeCapacity() <= 0;\r\n        },\r\n        target: creep => {\r\n            \r\n            const queen = Game.creeps['Queen' + creep.room.name];\r\n            \r\n                if (queen && creep.pos.isNearTo(queen.pos) && queen.store.getFreeCapacity() > 0) {\r\n                    \r\n                    \r\n                    creep.transfer(queen, 'energy');\r\n                }\r\n                \r\n            \r\n\r\n            else {\r\n                const target = Game.getObjectById(data.target.id as Id<_HasId>)\r\n                if (target) {\r\n                    if (target instanceof ConstructionSite) {\r\n                        creep.build(target);\r\n                    }\r\n                    else if (target instanceof Structure) {\r\n                        creep.transfer(target, 'energy');\r\n                    }\r\n\r\n                }\r\n                else {      //CHANGE ROLE TO HARVESTER\r\n                    if (data.target.pos) {\r\n                        const pos = new RoomPosition(data.target.pos[0], data.target.pos[1], creep.memory['roomName']);\r\n                        const container = pos.lookFor(LOOK_STRUCTURES)[0];\r\n                        creep.memory['task']['target'] = container.id;\r\n                    }\r\n                        creep.memory['role'] = 'harvester'\r\n                    \r\n                }\r\n            }\r\n            return (creep.store.getUsedCapacity() <= 0);\r\n        }\r\n\r\n\r\n        \r\n\r\n    }),\r\n    \r\n    iniQueen: (data: {}): ICreepConfig => ({\r\n        source: creep => {\r\n            \r\n            const nearInitializer = creep.pos.findClosestByRange(FIND_MY_CREEPS, {\r\n                filter: function(target) {\r\n                    return target.name != creep.name;\r\n                }\r\n            });\r\n            if (nearInitializer) {\r\n                //console.log(creep.moveTo(nearInitializer));\r\n                \r\n                \r\n                creep.moveTo(nearInitializer);\r\n            }\r\n            const containers = creep.room.find(FIND_STRUCTURES, {\r\n                filter:{structureType: STRUCTURE_CONTAINER}\r\n            })\r\n            if (containers.length >= 2) {       //fase 1 finished\r\n                return true;\r\n            }\r\n\r\n        // 自己身上的能量装满了，返回 true（切换至 target 阶段）\r\n        return creep.store.getFreeCapacity() <= 0;\r\n        },\r\n        target: creep => {\r\n            const nearSpawn = creep.pos.findClosestByRange(FIND_MY_SPAWNS);\r\n            if (nearSpawn) {\r\n                \r\n                if (nearSpawn.store.getFreeCapacity('energy') > 0) {\r\n                    \r\n                    if (creep.transfer(nearSpawn, 'energy') == ERR_NOT_IN_RANGE) {\r\n                        creep.moveTo(nearSpawn);\r\n\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n            if (Game.time % 7 == 0) {\r\n                const containers = creep.room.find(FIND_STRUCTURES, {\r\n                    filter:{structureType: STRUCTURE_CONTAINER}\r\n                })\r\n                if (containers.length >= 2) {       //fase 1 finished\r\n                    \r\n                    \r\n                    sendORBuildingTaskCompletation(creep.memory['roomName']);     //send task complet mens. to OR\r\n\r\n                    //save id to planning model\r\n                    const sourceContainer1Index = getContainerIndex(creep.room.name, 'container_source1');\r\n                    //console.log(sourceContainer1Index);\r\n                    \r\n                    \r\n                    saveStructureID(creep.room.name, 'container', sourceContainer1Index, containers[0].id);\r\n\r\n                    const sourceContainer2Index = getContainerIndex(creep.room.name, 'container_source2');\r\n                    saveStructureID(creep.room.name, 'container', sourceContainer2Index, containers[1].id);\r\n\r\n                    Memory['colony'][creep.memory['roomName']]['dpt_logistic']['storage'].push(containers[0].id);\r\n                    Memory['colony'][creep.memory['roomName']]['dpt_logistic']['storage'].push(containers[1].id);\r\n\r\n                    creep.memory['role'] = 'transporter';   //change queen role to transporter\r\n                    \r\n                }   \r\n            };\r\n            \r\n\r\n            return creep.store[RESOURCE_ENERGY] <= 0\r\n        }\r\n    }),\r\n\r\n    repairer: (data: {}): ICreepConfig => ({\r\n        prepare: creep => {\r\n\r\n            return true;\r\n        },\r\n\r\n        source: creep => {\r\n            const source = Game.getObjectById(creep.memory['task']['source']); //@ts-ignore\r\n            if (creep.withdraw(source, 'energy') == ERR_NOT_IN_RANGE) creep.moveTo(source);\r\n\r\n            return creep.store.getFreeCapacity() <= 0;\r\n        },\r\n        target: creep => {\r\n            const rcode = creep.upgradeController(creep.room.controller);\r\n            if (rcode == ERR_NOT_IN_RANGE) creep.moveTo(creep.room.controller);\r\n\r\n            return (creep.store.getUsedCapacity() <= 0);\r\n        }\r\n    }),\r\n\r\n    upgrader_base: (data: {}): ICreepConfig => ({\r\n        source: creep => {\r\n            const source = Game.getObjectById(creep.memory['task']['source']); //@ts-ignore\r\n           if (creep.withdraw(source, 'energy') == ERR_NOT_IN_RANGE) creep.moveTo(source);\r\n\r\n            return creep.store.getFreeCapacity() <= 0;\r\n        },\r\n        target: creep => {\r\n            const rcode = creep.upgradeController(creep.room.controller);\r\n            if (rcode == ERR_NOT_IN_RANGE) creep.moveTo(creep.room.controller);\r\n\r\n            return (creep.store.getUsedCapacity() <= 0);\r\n        }\r\n    }),\r\n\r\n\r\n}\r\nexport default roles;","import { sendRequest } from \"@/colony/dpt_comunication\";\r\nimport Dpt_Harvest from \"@/department/dpt_harvest/Dpt_Harvest\";\r\nimport { distanceTwoPoints, maxTwoNumber } from \"@/roomPlanning/planningUtils\";\r\nimport { CreepSpawning } from \"@/structure/CreepSpawning\";\r\nimport { Tower } from \"@/structure/Tower\";\r\n\r\nexport const TRANSFER_DEATH_LIMIT = 30;\r\n\r\nexport const taskRequestSended = function(creepName: string, roomName: string): boolean {\r\n    const requestList = Memory['colony'][roomName]['dpt_logistic']['request'];\r\n    for (let i = 0; i < requestList.length; ++i) {\r\n        if (requestList[i] == creepName) return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport const deathPrepare = function(creep: Creep, sourceId: string): false {\r\n\r\n    if (creep.store.getUsedCapacity() > 0 && creep.room.storage) {\r\n        for (const resourceType in creep.store) {\r\n\r\n            const target = creep.room.storage\r\n\r\n            creep.moveTo(target.pos)\r\n            creep.transfer(target, <ResourceConstant>resourceType)\r\n            \r\n            return false\r\n        }\r\n    }\r\n    else {\r\n        if (creep.memory['task']['type'] == 'TRANSFER') {\r\n            const target = Game.getObjectById(creep.memory['task']['target']['id']) //@ts-ignore\r\n            notifyTaskCompleteTransfer(creep, target);\r\n        }\r\n        else if (creep.memory['task']['type'] == 'WITHDRAW') {\r\n            const target = Game.getObjectById(creep.memory['task']['source']['id']) //@ts-ignore\r\n            notifyTaskCompleteWithdraw(creep, target);\r\n        }\r\n        creep.suicide();\r\n    }\r\n\r\n    return false\r\n}\r\n\r\nexport const transferCreepStore = function(creep: Creep, sourceId: string): boolean {\r\n    if (creep.store.getUsedCapacity() > 0){\r\n        for (const resourceType in creep.store) {\r\n            if (resourceType == 'energy') return false\r\n\r\n            let target: StructureStorage;\r\n            //    @ts-ignore\r\n           target = sourceId ? Game.getObjectById<StructureStorage>(sourceId): creep.room.storage\r\n\r\n            // 转移资源\r\n            creep.moveTo(target.pos)\r\n            creep.transfer(target, <ResourceConstant>resourceType)\r\n            \r\n            \r\n        }\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport const notifyTaskCompleteTransfer = function(creep: Creep, target: TransferTarget) {\r\n    if (target instanceof StructureTower) {\r\n        Tower.cleanTowerEnergyPetition(target.room.name, target.id);\r\n    }\r\n}\r\n\r\nexport const notifyTaskCompleteWithdraw = function(creep: Creep, source: WithDrawTarget) {\r\n    if (source instanceof StructureContainer) {\r\n        Dpt_Harvest.cleanContainerWithdrawPetition(source.room.name,source.id);\r\n    }\r\n}\r\n\r\nconst roles: {\r\n    [role in AdvancedRoleConstant]: (data: {}) => ICreepConfig\r\n} = {\r\n\r\n\r\n    manager: (data: string): ICreepConfig => ({\r\n        source: creep => {\r\n            \r\n            return true;\r\n        },\r\n        target: creep => {\r\n\r\n            return false;\r\n        }\r\n    }),\r\n\r\n    transporter: (data: {}): ICreepConfig => ({\r\n        source: creep => {\r\n            \r\n            if (creep.ticksToLive <= TRANSFER_DEATH_LIMIT) return deathPrepare(creep, creep.memory['task']['source'])\r\n\r\n            const taskType = creep.memory['task']['type'];\r\n            if (taskType) {\r\n                if (!transferCreepStore(creep, creep.memory['task']['source'])) {\r\n                    return transferTaskOperations[taskType].source(creep)\r\n                }\r\n                else return false;\r\n            }\r\n            else {\r\n                \r\n                //send task \r\n                if (taskRequestSended(creep.name, creep.memory['roomName'])) {\r\n                    creep.say('💤')\r\n                    const flag = Game.flags[creep.room.name + '_logisticPoint']\r\n                    if (flag) creep.moveTo(flag);\r\n                }\r\n                else {\r\n                    creep.say('✉️')\r\n                    sendRequest(creep.memory['roomName'], 'dpt_logistic', creep.name);\r\n                    creep.memory['sendTaskRequest'] = true;\r\n                }\r\n                return false;\r\n            }\r\n            \r\n        },\r\n        target: creep => {\r\n            const taskType:string = creep.memory['task']['type'];\r\n            \r\n            if (taskType) {\r\n                return transferTaskOperations[taskType].target(creep)\r\n            }\r\n            else return true;       //get new task\r\n            \r\n        }\r\n    })\r\n}\r\n\r\nexport const transferTaskOperations: { [task in LogisticTaskType]: transferTaskOperation\r\n} = {\r\n    FILL: {\r\n        source: (creep:Creep) => {\r\n            \r\n            const source = Game.getObjectById(creep.memory['task']['source']);\r\n            //@ts-ignore\r\n            if (creep.withdraw(source, 'energy') == ERR_NOT_IN_RANGE) { //@ts-ignore\r\n                creep.moveTo(source);\r\n            \r\n            }\r\n\r\n\r\n            return creep.store.getFreeCapacity() <= 0;\r\n        },\r\n        target: (creep:Creep) => {\r\n            const targetID =  creep.memory['task']['target'];\r\n            let target: StructureExtension\r\n            if (targetID) {\r\n                target = <StructureExtension>Game.getObjectById(targetID)\r\n                if (!target || target.structureType !== STRUCTURE_EXTENSION || target.store.getFreeCapacity(RESOURCE_ENERGY) <= 0) {\r\n                    creep.memory['task']['target'] = null;\r\n                    //creep.memory['sendTaskRequest'] = false;\r\n                    target = undefined\r\n                }\r\n            }\r\n                           // 没缓存就重新获取\r\n            if (!target) {\r\n                \r\n                \r\n                // 获取有需求的建筑\r\n                target = <StructureExtension>creep.pos.findClosestByRange(FIND_MY_STRUCTURES, {\r\n                    // extension 中的能量没填满\r\n                    filter: s => ((s.structureType == STRUCTURE_EXTENSION || s.structureType == STRUCTURE_SPAWN) && (s.store.getFreeCapacity(RESOURCE_ENERGY) > 0))\r\n                })\r\n                \r\n                if (!target) {\r\n                    // 都填满了，任务完成\r\n\r\n                    Memory['colony'][creep.memory['roomName']]['dpt_logistic']['fillTask'] = false;\r\n                    creep.memory['task']['type'] = null;\r\n                    return true\r\n                }\r\n\r\n                // 写入缓存\r\n                creep.memory['task']['target'] = target.id\r\n\r\n            }\r\n            \r\n\r\n            /*\r\n            const target = <StructureExtension>creep.pos.findClosestByRange(FIND_MY_STRUCTURES, {\r\n                filter: s => ((s.structureType == STRUCTURE_EXTENSION || s.structureType == STRUCTURE_SPAWN) && (s.store.getFreeCapacity(RESOURCE_ENERGY) > 0))\r\n            })\r\n            */\r\n\r\n            creep.moveTo(target.pos)\r\n            const result = creep.transfer(target, RESOURCE_ENERGY)\r\n            if (result === ERR_NOT_ENOUGH_RESOURCES || result === ERR_FULL) return true\r\n            else if (result != OK && result != ERR_NOT_IN_RANGE) creep.say(`拓展填充 ${result}`)\r\n\r\n            if (creep.store[RESOURCE_ENERGY] === 0) return true\r\n            \r\n\r\n            return false;\r\n        }\r\n        \r\n    },\r\n    \r\n\r\n\r\n    MOVE: {\r\n        source: (creep:Creep) => {\r\n            creep.say('💤');\r\n            return false;\r\n        },\r\n        target: (creep:Creep) => {\r\n\r\n            return false;\r\n        }\r\n        \r\n    },\r\n    TRANSFER: {\r\n        source: (creep:Creep) => {\r\n\r\n            const source = Game.getObjectById(creep.memory['task']['source'])\r\n            //CHECK IF CREEP STORAGE IS EMPTY\r\n\r\n            //@ts-ignore\r\n            if (creep.withdraw(source, creep.memory['task']['target']['resourceType']) == ERR_NOT_IN_RANGE) {//@ts-ignore\r\n                creep.moveTo(source)\r\n            }\r\n            return creep.store.getFreeCapacity() <= 0;\r\n        },\r\n        target: (creep:Creep) => {\r\n            const target = Game.getObjectById(creep.memory['task']['target']['id'] as Id<TransferTarget>);\r\n            \r\n            if (target) {   \r\n                const resourceType =  creep.memory['task']['target']['resourceType'];  \r\n                const transfer = creep.transfer(target, resourceType);\r\n                \r\n                const creepStorageIni = creep.store[resourceType];\r\n                const amountNeeded:number = creep.memory['task']['target']['amount'];\r\n\r\n                if (transfer == ERR_NOT_IN_RANGE) {\r\n                    //const pos = new RoomPosition(creep.memory['task']['target']['pos'][0], creep.memory['task']['target']['pos'][1], creep.memory['task']['target']['roomName']);\r\n                   \r\n                    creep.moveTo(target);\r\n                }\r\n                else if (transfer == OK) {\r\n                    creep.memory['task']['amountDone'] = creep.memory['task']['amountDone'] + creepStorageIni;\r\n                }\r\n                else if (transfer == ERR_FULL && amountNeeded != -1) {\r\n                    creep.memory['task']['type'] = null;\r\n                    //creep.memory['sendTaskRequest'] = false;\r\n                    notifyTaskCompleteTransfer(creep, target);\r\n\r\n                    creep.say('❌')\r\n                    return true;\r\n                }\r\n                \r\n                \r\n\r\n                if (amountNeeded != -1) {\r\n                    if (creep.memory['task']['amountDone'] >= amountNeeded) {   //task complete\r\n                        creep.memory['task']['type'] = null;\r\n                        //creep.memory['sendTaskRequest'] = false;\r\n                        notifyTaskCompleteTransfer(creep, target);\r\n                        return true;\r\n                    } else return (creep.store.getUsedCapacity() <= 0);\r\n                }\r\n                else return (creep.store.getUsedCapacity() <= 0);\r\n\r\n            }\r\n            else {  //reset task, only in case of creep\r\n                creep.memory['task']['type'] = null;\r\n                //creep.memory['sendTaskRequest'] = false;\r\n                creep.say('❌')\r\n                return true;\r\n            }\r\n\r\n           \r\n        \r\n        }\r\n        \r\n    },\r\n    WITHDRAW: {\r\n        /*\r\n        const r: WidrawTask = {\r\n            type: 'WITHDRAW',\r\n            source: widrawRequest.source,\r\n            target: this.getMaxCapacityStorageID(),\r\n            amountDone: 0\r\n        }\r\n        */\r\n        /*\r\n        'source': {\r\n            'id': id,     \r\n            'resourceType': resourceList[resourceIndex] as ResourceConstant,\r\n            'roomName': container.room.name,\r\n            'pos': [container.pos.x, container.pos.y]\r\n            \r\n        }\r\n        */\r\n        source: (creep: Creep) => {\r\n            const source = Game.getObjectById(creep.memory['task']['source']['id'] as Id<WithDrawTarget>);\r\n            //if missing source delete task\r\n            if (!source) {\r\n                creep.memory['task']['type'] = null;\r\n                //creep.memory['sendTaskRequest'] = false;\r\n                creep.say('❌')\r\n                return false;\r\n            }\r\n\r\n            const resourceType = creep.memory['task']['source']['resourceType']\r\n            if (creep.withdraw(source, resourceType as ResourceConstant) == ERR_NOT_IN_RANGE) {\r\n                const sourceTask = creep.memory['task']['source'];\r\n                const sourcePos = new RoomPosition(sourceTask['pos'][0], sourceTask['pos'][1], sourceTask['roomName']);\r\n                creep.moveTo(sourcePos);\r\n                //return false;\r\n            }\r\n            else {\r\n                notifyTaskCompleteWithdraw(creep, source);\r\n               // return true;\r\n            }\r\n            creep.store.getFreeCapacity() <= 0;\r\n        },\r\n        target: (creep: Creep) => {\r\n            const target = Game.getObjectById(creep.memory['task']['source']['id'] as Id<TransferTarget>);\r\n            const resourceType = Object.keys(creep.store)[0]\r\n            if (creep.transfer(target, resourceType as ResourceConstant) == ERR_NOT_IN_RANGE) {\r\n                creep.moveTo(target);\r\n                return false;\r\n            }\r\n            \r\n            if (creep.store.getUsedCapacity() <= 0) {\r\n                creep.memory['task']['type'] = null;\r\n                //creep.memory['sendTaskRequest'] = false;\r\n                creep.say('❌')\r\n                return true;\r\n            }\r\n            else return false;\r\n\r\n        }\r\n        \r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nexport default roles;","import baseRoles from './basic'\r\nimport advancedRoles from './advanced'\r\n//import remoteRoles from './remote'\r\n//import warRoles from './war'\r\n\r\nconst creepWork: CreepWork = {\r\n    ...baseRoles,\r\n    ...advancedRoles,\r\n    //...warRoles,\r\n    //...remoteRoles\r\n}\r\n\r\n/**\r\n * 导出所有的角色\r\n */\r\nexport default creepWork","\r\nimport roles from '../role'\r\n\r\n/*\r\n    creep work \r\n*/\r\n\r\nexport default class CreepExtension extends Creep {\r\n    //public work(data: SourceTargetData, role: string): void\r\n    public work(): void {\r\n        //let data: SourceTargetData = {\"target\": \"aaa\", \"source\": \"ddd\"};\r\n        //const config: ICreepConfig = worker['builder'](s);\r\n        if (this.spawning) return;\r\n        //---------------- GET CREEP LOGIC --------------------\r\n        //console.log(this.memory['role']);\r\n        //console.log(this.memory['data'])\r\n\r\n        const creepLogic = roles[this.memory['role']](this.memory['task'])  ////////////////////////\r\n        //const creepLogic = roles[role](data);\r\n\r\n\r\n        // ------------------------ 第二步：执行 creep 准备阶段 ------------------------\r\n\r\n        // 没准备的时候就执行准备阶段\r\n        if (!this.memory['ready']) {\r\n            // 有准备阶段配置则执行\r\n            if (creepLogic.prepare) this.memory['ready'] = creepLogic.prepare(this)\r\n            // 没有就直接准备完成\r\n            else this.memory['ready'] = true\r\n\r\n        }\r\n\r\n        // ------------------------ 第三步：执行 creep 工作阶段 ------------------------\r\n\r\n        let stateChange = true\r\n        // 执行对应阶段\r\n        // 阶段执行结果返回 true 就说明需要更换 working 状态\r\n        if (this.memory['working']) {\r\n            if (creepLogic.target) stateChange = creepLogic.target(this)\r\n        }\r\n        else {\r\n            if (creepLogic.source) stateChange = creepLogic.source(this)\r\n        }\r\n\r\n        // 状态变化了就切换工作阶段\r\n        if (stateChange) this.memory['working'] = !this.memory['working']\r\n        }\r\n    }","import { assignPrototype } from \"@/utils\"\r\nimport CreepExtension from \"@/creep/mount/mout.creep\"\r\n\r\n/**\r\n * 挂载 creep 拓展\r\n */\r\n\r\nexport default () => {\r\n    // 保存原始 move，在 creepExtension 里会进行修改\r\n    assignPrototype(Creep, CreepExtension)\r\n}","import {Colony} from \"./colony/Colony\"\r\nimport * as ColonyApi from \"./colony/ColonyApi\"\r\nimport {Mem} from \"./colony/Memory\"\r\n\r\nimport MemHack from './MemHack'\r\n\r\nimport mountCreep from './creep/mount'\r\nimport { CreepSpawning } from \"./structure/CreepSpawning\"\r\nimport * as SuperMove from \"./SuperMove\"\r\n\r\n//Main loop\r\nmodule.exports.loop = function() {\r\n\r\n  MemHack.pretick();\r\n  SuperMove;\r\n  mountCreep();\r\n  Mem;\r\n  \r\n\r\n  ColonyApi;\r\n\r\n\r\n\r\n  const colony = new Colony('W7N9');\r\n\r\n  colony.run();\r\n\r\n    const creep = Memory['creeps'];\r\n    for (let creepName in creep)  {\r\n      if (Game.creeps[creepName]) {\r\n        Game.creeps[creepName]['work']();  \r\n\r\n      }\r\n    }\r\n//Memory['colony']['W7N9']['creepSpawning']['spawn'].push('Spawn1')\r\n//ColonyApi.createColony('W7N9')\r\n//ColonyApi.destroyAllBuilding('W1N7')\r\n//ColonyApi.deleteColony('W1N7')\r\n//Memory.creeps = {}\r\n}\r\n"],"names":["pro","planning.ManagerPlanner","planning.HelperVisual","utils.transformRoadToAdjacentList","utils.nearPointOne","utils.roadPath","utils.isRampartPos","utils.nearPosition","utils.translatePosToNode","utils.translateNodeToPos","acces.getPlanningStructurePos","utils.minDistance","utils.getId","utils.distanceTwoPoints","setting.getEnergyRCL","setting.ticksToSpawn","setting.getBody","positionToHarvest","dpt_config.positionToHarvest","planningUtils.getContainerPos","planningUtils.getConstructionSideID","planningUtils.positionToHarvest","planningUtils.getSourceEnery1Pos","planningUtils.getSourceEnery1ID","planningUtils.getSourceEnery2Pos","planningUtils.getSourceEnery2ID","creepName","names.creepName","planningUtils.getContainerReference","planningUtils.getContainerID","SuperMove.options","setting.bodyComponentNum","roles","Dpt_build","baseRoles","advancedRoles"],"mappings":"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"}