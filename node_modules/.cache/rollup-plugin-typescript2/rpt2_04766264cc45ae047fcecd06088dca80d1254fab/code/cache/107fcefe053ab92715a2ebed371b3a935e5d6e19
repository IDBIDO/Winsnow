{"code":"import * as planning from \"./RoomPlanning\";\r\nimport * as utils from \"./planningUtils\";\r\nimport * as acces from \"./planningAcces\";\r\nimport { connectedComponents } from \"@/utils\";\r\nexport class TranslatePlanning {\r\n    constructor(mainRoom) {\r\n        this.mainRoom = mainRoom;\r\n    }\r\n    savePlanningModel() {\r\n        let roomStructsData;\r\n        let p = Game.flags.p;\r\n        let pc = Game.flags.pc;\r\n        let pm = Game.flags.pm;\r\n        let pa = Game.flags.pa;\r\n        let pb = Game.flags.pb;\r\n        const saPosition = [pa.pos.x, pa.pos.y];\r\n        const sbPosition = [pb.pos.x, pb.pos.y];\r\n        const cPosition = [pc.pos.x, pc.pos.y];\r\n        const mPosition = [pm.pos.x, pm.pos.y];\r\n        if (p) {\r\n            roomStructsData = planning.ManagerPlanner.computeManor(this.mainRoom, [pc, pm, pa, pb]);\r\n            Game.flags.p.remove();\r\n        }\r\n        if (roomStructsData) {\r\n            planning.HelperVisual.showRoomStructures(this.mainRoom, roomStructsData['structMap']);\r\n            Memory['colony'][this.mainRoom]['roomPlanning'] = {};\r\n            //save model\r\n            this.generateModel(roomStructsData['structMap']);\r\n            this.generateTemporal();\r\n            /*\r\n                {\r\n                    'road'{\r\n                        9: [x, y],\r\n                        8: [x, y]\r\n                    },\r\n                    'extension' {\r\n                        \r\n                    }\r\n                }\r\n            */\r\n            this.constructionSideRefAndPos();\r\n            this.inRampartPos();\r\n            this.containerReference(roomStructsData['structMap']['container']);\r\n            this.linkReference(roomStructsData['structMap']['link']);\r\n            this.roadReference(roomStructsData['structMap']['road']);\r\n            this.labReference(roomStructsData['structMap']['lab']);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    constructionSideRefAndPos() {\r\n        Memory['colony'][this.mainRoom]['roomPlanning']['constructionSide'] = {};\r\n        const constructionSideRefPos = Memory['colony'][this.mainRoom]['roomPlanning']['constructionSide'];\r\n        const model = Memory['colony'][this.mainRoom]['roomPlanning']['model'];\r\n        for (let structureType in model) {\r\n            constructionSideRefPos[structureType] = {};\r\n        }\r\n    }\r\n    labReference(labList) {\r\n    }\r\n    roadReference(roadList) {\r\n        let roadListAdj = utils.transformRoadToAdjacentList(roadList);\r\n        const spawn0Pos = Memory['colony'][this.mainRoom]['roomPlanning']['model']['spawn'][0]['pos'];\r\n        const posRoadNearSpawn0 = utils.nearPointOne(spawn0Pos, roadList);\r\n        //Spawn0 to source1 path\r\n        const containerSource1Reference = Memory['colony'][this.mainRoom]['roomPlanning']['containerReference']['container_source1'];\r\n        const containerSource1Pos = Memory['colony'][this.mainRoom]['roomPlanning']['model']['container'][containerSource1Reference]['pos'];\r\n        const posRoadNearContainerSource1 = utils.nearPointOne(containerSource1Pos, roadList);\r\n        let spawn0ToSource1 = utils.roadPath(roadListAdj, posRoadNearSpawn0, posRoadNearContainerSource1);\r\n        //Spawn0 to source2 path\r\n        const containerSource2Reference = Memory['colony'][this.mainRoom]['roomPlanning']['containerReference']['container_source2'];\r\n        const containerSource2Pos = Memory['colony'][this.mainRoom]['roomPlanning']['model']['container'][containerSource2Reference]['pos'];\r\n        const posRoadNearContainerSource2 = utils.nearPointOne(containerSource2Pos, roadList);\r\n        let spawn0ToSource2 = utils.roadPath(roadListAdj, posRoadNearSpawn0, posRoadNearContainerSource2);\r\n        //Spawn0 to controller\r\n        const containerControllerReference = Memory['colony'][this.mainRoom]['roomPlanning']['containerReference']['container_controller'];\r\n        const containerControllerPos = Memory['colony'][this.mainRoom]['roomPlanning']['model']['container'][containerControllerReference]['pos'];\r\n        const posRoadNearContainerController = utils.nearPointOne(containerControllerPos, roadList);\r\n        let spawn0ToController = utils.roadPath(roadListAdj, posRoadNearSpawn0, posRoadNearContainerController);\r\n        //Spawn0 to mineral\r\n        const containerMineralReference = Memory['colony'][this.mainRoom]['roomPlanning']['containerReference']['container_mineral'];\r\n        const containerMineralPos = Memory['colony'][this.mainRoom]['roomPlanning']['model']['container'][containerMineralReference]['pos'];\r\n        const posRoadNearContainerMineral = utils.nearPointOne(containerMineralPos, roadList);\r\n        let spawn0ToMineral = utils.roadPath(roadListAdj, posRoadNearSpawn0, posRoadNearContainerMineral);\r\n        Memory['colony'][this.mainRoom]['roomPlanning']['roadReference'] = {\r\n            'spawn0ToSource1': spawn0ToSource1,\r\n            'spawn0ToSource2': spawn0ToSource2,\r\n            'spawn0ToController': spawn0ToController,\r\n            'spawn0ToMineral': spawn0ToMineral\r\n        };\r\n    }\r\n    roomWall() {\r\n        const rampartList = Memory['colony'][this.mainRoom]['roomPlanning']['temp']['rampart'];\r\n        const matrix = new Array(50).fill(true).map(() => new Array(50).fill(true));\r\n        const terrain = new Room.Terrain(this.mainRoom);\r\n        for (let i = 0; i < 50; ++i) {\r\n            for (let j = 0; j < 50; ++j) {\r\n                if (terrain.get(i, j) == TERRAIN_MASK_WALL || utils.isRampartPos(this.mainRoom, [i, j])) {\r\n                    matrix[i][j] = false;\r\n                }\r\n            }\r\n        }\r\n        return matrix;\r\n    }\r\n    nearConectedPos(pos) {\r\n        const terrain = new Room.Terrain(this.mainRoom);\r\n        const rampartList = Memory['colony'][this.mainRoom]['roomPlanning']['temp']['rampart'];\r\n        const candidatePos = utils.nearPosition(pos);\r\n        let r = [];\r\n        for (let i = 0; i < candidatePos.length; ++i) {\r\n            if (terrain.get(candidatePos[i][0], candidatePos[i][1]) != TERRAIN_MASK_WALL && !utils.isRampartPos(this.mainRoom, candidatePos[i])) {\r\n                r.push([candidatePos[i][0], candidatePos[i][1]]);\r\n            }\r\n        }\r\n        return r;\r\n    }\r\n    roomWallToAdj(roomCanPass) {\r\n        let adjList = [];\r\n        for (let i = 0; i < roomCanPass.length; ++i) {\r\n            for (let j = 0; j < roomCanPass[i].length; ++j) {\r\n                const node = utils.translatePosToNode([i, j]);\r\n                //console.log(node);\r\n                if (!roomCanPass[i][j]) {\r\n                    adjList[node] = [];\r\n                }\r\n                else {\r\n                    const nearPos = this.nearConectedPos([i, j]);\r\n                    let actualNode = [];\r\n                    for (let i = 0; i < nearPos.length; ++i) {\r\n                        actualNode.push(utils.translatePosToNode(nearPos[i]));\r\n                    }\r\n                    adjList[node] = actualNode;\r\n                }\r\n            }\r\n        }\r\n        /*\r\n         for (let i = 0; i < roomCanPass.length; ++i) {\r\n             for (let j = 0; j < roomCanPass[i].length; ++j) {\r\n                 const node = this.translatePosToNode([j, i]);\r\n                 //console.log(node);\r\n                 if (!roomCanPass[i][j]) adjList.push([]);\r\n                 else {\r\n                     const nearPos = this.nearConectedPos([j, i]);\r\n                     let actualNode: number[] = [];\r\n                     for (let i = 0; i < nearPos.length; ++i) {\r\n                         actualNode.push( this.translatePosToNode(nearPos[i]) )\r\n                     }\r\n                     adjList.push(actualNode);\r\n                 }\r\n \r\n             }\r\n         }\r\n         */\r\n        return adjList;\r\n    }\r\n    translatePosToNode(pos) {\r\n        return pos[0] * 50 + pos[1];\r\n    }\r\n    translateNodeToPos(node) {\r\n        return [Math.floor(node / 50), node % 50];\r\n    }\r\n    searchCC(cc, obj) {\r\n        for (let i = 0; i < cc.length; ++i) {\r\n            for (let j = 0; j < cc[i].length; ++j) {\r\n                if (cc[i][j] == obj) {\r\n                    return i;\r\n                }\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n    inRampartPos() {\r\n        //const matrix = new Array(50).fill(false).map(() => new Array(50).fill(false));\r\n        //wall pos mask false\r\n        const roomWall = this.roomWall();\r\n        let cont = 0;\r\n        for (let i = 0; i < roomWall.length; ++i) {\r\n            for (let j = 0; j < roomWall.length; ++j) {\r\n                if (!roomWall[i][j])\r\n                    ++cont;\r\n            }\r\n        }\r\n        const adjacentList = this.roomWallToAdj(roomWall);\r\n        const cc = connectedComponents(adjacentList);\r\n        const spawn0Pos = Memory['colony'][this.mainRoom]['roomPlanning']['model']['spawn'][0]['pos'];\r\n        const spawn0Node = utils.translatePosToNode(spawn0Pos);\r\n        const indexProtectedComponent = this.searchCC(cc, spawn0Node);\r\n        //console.log(cc[indexProtectedComponent]);\r\n        let sortedCC = cc[indexProtectedComponent];\r\n        sortedCC.sort();\r\n        //console.log(sortedCC);\r\n        let protectedPos = [];\r\n        for (let i = 0; i < sortedCC.length; ++i) {\r\n            protectedPos.push(utils.translateNodeToPos(sortedCC[i]));\r\n        }\r\n        // console.log(protectedPos);\r\n        Memory['colony'][this.mainRoom]['roomPlanning']['inRampartPos'] = sortedCC;\r\n    }\r\n    linkReference(linkList) {\r\n        const containerReference = Memory['colony'][this.mainRoom]['roomPlanning']['containerReference'];\r\n        let posSourceContainer1 = acces.getPlanningStructurePos(this.mainRoom, 'container', containerReference['container_source1']);\r\n        let posSourceContainer2 = acces.getPlanningStructurePos(this.mainRoom, 'container', containerReference['container_source2']);\r\n        let posControllerContainer = acces.getPlanningStructurePos(this.mainRoom, 'container', containerReference['container_controller']);\r\n        let posCenterContainer = acces.getPlanningStructurePos(this.mainRoom, 'container', containerReference['container_mineral']);\r\n        let linkSourcel = utils.minDistance(posSourceContainer1, linkList);\r\n        let linkSource2 = utils.minDistance(posSourceContainer2, linkList);\r\n        let linkController = utils.minDistance(posControllerContainer, linkList);\r\n        let linkCenter;\r\n        for (let i = 0; i < linkList.length; ++i) {\r\n            if (i != linkSourcel && i != linkSource2 && i != linkController) {\r\n                linkCenter = i;\r\n            }\r\n        }\r\n        Memory['colony'][this.mainRoom]['roomPlanning']['linkReference'] = {\r\n            'link_source1': linkSourcel,\r\n            'link_source2': linkSource2,\r\n            'link_controller': linkController,\r\n            'link_center': linkCenter\r\n        };\r\n    }\r\n    containerReference(containerList) {\r\n        let posSource1 = Memory['colony'][this.mainRoom]['roomPlanning']['model']['source'][0]['pos'];\r\n        let posSource2 = Memory['colony'][this.mainRoom]['roomPlanning']['model']['source'][1]['pos'];\r\n        let posMineral = Memory['colony'][this.mainRoom]['roomPlanning']['model']['source'][2]['pos'];\r\n        let aux = Game.rooms[this.mainRoom].controller;\r\n        let posController = [aux.pos.x, aux.pos.y];\r\n        let containerSourcel = utils.minDistance(posSource1, containerList);\r\n        let containerSource2 = utils.minDistance(posSource2, containerList);\r\n        let containerMineral = utils.minDistance(posMineral, containerList);\r\n        let containerController = utils.minDistance(posController, containerList);\r\n        Memory['colony'][this.mainRoom]['roomPlanning']['containerReference'] = {\r\n            'container_source1': containerSourcel,\r\n            'container_source2': containerSource2,\r\n            'container_mineral': containerMineral,\r\n            'container_controller': containerController\r\n        };\r\n    }\r\n    /*\r\n        Planning model data.\r\n    */\r\n    generateModel(model) {\r\n        Memory['colony'][this.mainRoom]['roomPlanning']['model'] = {};\r\n        for (let structureName in model) {\r\n            Memory['colony'][this.mainRoom]['roomPlanning']['model'][structureName] = [];\r\n            for (let i in model[structureName])\r\n                Memory['colony'][this.mainRoom]['roomPlanning']['model'][structureName].push({ 'id': '', 'pos': model[structureName][i] });\r\n        }\r\n        const saPos = [Game.flags.pa.pos.x, Game.flags.pa.pos.y];\r\n        const sbPos = [Game.flags.pb.pos.x, Game.flags.pb.pos.y];\r\n        const mPos = [Game.flags.pm.pos.x, Game.flags.pm.pos.y];\r\n        Memory['colony'][this.mainRoom]['roomPlanning']['model']['source'] = [];\r\n        Memory['colony'][this.mainRoom]['roomPlanning']['model']['source'].push({ 'id': utils.getId(this.mainRoom, saPos, 'source'), 'pos': saPos });\r\n        Memory['colony'][this.mainRoom]['roomPlanning']['model']['source'].push({ 'id': utils.getId(this.mainRoom, sbPos, 'source'), 'pos': sbPos });\r\n        Memory['colony'][this.mainRoom]['roomPlanning']['model']['source'].push({ 'id': utils.getId(this.mainRoom, mPos, 'mineral'), 'pos': mPos });\r\n    }\r\n    tempExtension() {\r\n        const temp = Memory['colony'][this.mainRoom]['roomPlanning']['temp'];\r\n        const extensionList = Memory['colony'][this.mainRoom]['roomPlanning']['model']['extension'];\r\n        temp['extension'] = {};\r\n        const spawn0Pos = Memory['colony'][this.mainRoom]['roomPlanning']['model']['spawn'][0]['pos'];\r\n        let array = Array(extensionList.length);\r\n        for (let i = 0; i < extensionList.length; ++i) {\r\n            //temp['extension'][i] = extensionList[i]['pos'];\r\n            const distance = utils.distanceTwoPoints(spawn0Pos, extensionList[i]['pos']);\r\n            const temp = {\r\n                'ref': i.toString(),\r\n                'pos': extensionList[i]['pos'],\r\n                'distance': distance\r\n            };\r\n            array[i] = temp;\r\n        }\r\n        array.sort(function (a, b) {\r\n            if (a.distance > b.distance) { //si a es mayor, retornar 1\r\n                return 1;\r\n            }\r\n            if (a.distance < b.distance) { //si a es memor, retornar -1\r\n                return -1;\r\n            }\r\n            // a must be equal to b\r\n            return 0;\r\n        });\r\n        for (let i = 0; i < extensionList.length; ++i) {\r\n            temp['extension'][i] = array[i].pos;\r\n        }\r\n        //change model extension\r\n        const modelExtension = Memory['colony'][this.mainRoom]['roomPlanning']['model']['extension'];\r\n        for (let i = 0; i < modelExtension.length; ++i) {\r\n            modelExtension[i]['pos'] = temp['extension'][i];\r\n        }\r\n    }\r\n    tempSpawn() {\r\n        const temp = Memory['colony'][this.mainRoom]['roomPlanning']['temp'];\r\n        const spawnList = Memory['colony'][this.mainRoom]['roomPlanning']['model']['spawn'];\r\n        temp['spawn'] = {};\r\n        const controllerRoomPos = Game.rooms[this.mainRoom].controller.pos;\r\n        const controllerPos = [controllerRoomPos.x, controllerRoomPos.y];\r\n        let array = Array(spawnList.length);\r\n        for (let i = 0; i < spawnList.length; ++i) {\r\n            //temp['extension'][i] = extensionList[i]['pos'];\r\n            const distance = utils.distanceTwoPoints(controllerPos, spawnList[i]['pos']);\r\n            const temp = {\r\n                'ref': i.toString(),\r\n                'pos': spawnList[i]['pos'],\r\n                'distance': distance\r\n            };\r\n            array[i] = temp;\r\n        }\r\n        array.sort(function (a, b) {\r\n            if (a.distance < b.distance) { //si a es mayor, retornar 1\r\n                return 1;\r\n            }\r\n            if (a.distance > b.distance) { //si a es memor, retornar -1\r\n                return -1;\r\n            }\r\n            // a must be equal to b\r\n            return 0;\r\n        });\r\n        for (let i = 0; i < spawnList.length; ++i) {\r\n            temp['spawn'][i] = array[i].pos;\r\n        }\r\n        //change model extension\r\n        const modelExtension = Memory['colony'][this.mainRoom]['roomPlanning']['model']['spawn'];\r\n        for (let i = 0; i < modelExtension.length; ++i) {\r\n            modelExtension[i]['pos'] = temp['spawn'][i];\r\n        }\r\n    }\r\n    generateTemporal() {\r\n        Memory['colony'][this.mainRoom]['roomPlanning']['temp'] = {};\r\n        const temp = Memory['colony'][this.mainRoom]['roomPlanning']['temp'];\r\n        const model = Memory['colony'][this.mainRoom]['roomPlanning']['model'];\r\n        //copy model to temp\r\n        for (let structureName in model) {\r\n            Memory['colony'][this.mainRoom]['roomPlanning']['temp'][structureName] = {};\r\n            for (let i in model[structureName])\r\n                Memory['colony'][this.mainRoom]['roomPlanning']['temp'][structureName][i] =\r\n                    model[structureName][i]['pos'];\r\n        }\r\n        //modify spawn order\r\n        this.tempSpawn();\r\n        //modify extension order\r\n        this.tempExtension();\r\n    }\r\n}\r\n//# sourceMappingURL=TranslatePlanning.js.map","references":["C:/Users/heche/AppData/Local/Screeps/scripts/127_0_0_1___21025/Winsnow/src/roomPlanning/RoomPlanning.js","C:/Users/heche/AppData/Local/Screeps/scripts/127_0_0_1___21025/Winsnow/src/roomPlanning/planningUtils.ts","C:/Users/heche/AppData/Local/Screeps/scripts/127_0_0_1___21025/Winsnow/src/roomPlanning/planningAcces.ts","C:/Users/heche/AppData/Local/Screeps/scripts/127_0_0_1___21025/Winsnow/src/utils.ts"],"map":"{\"version\":3,\"file\":\"TranslatePlanning.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/roomPlanning/TranslatePlanning.ts\"],\"names\":[],\"mappings\":\"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\"}"}
