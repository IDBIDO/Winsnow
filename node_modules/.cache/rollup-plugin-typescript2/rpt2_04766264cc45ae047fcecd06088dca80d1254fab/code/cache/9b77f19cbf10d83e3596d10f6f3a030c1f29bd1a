{"code":"import { getRangePoints, isRampartProtectPos, translateNodeToPos, translatePosToNode } from \"@/roomPlanning/planningUtils\";\r\nimport { TranslatePlanning } from \"@/roomPlanning/TranslatePlanning\";\r\nimport { difference } from \"@/utils\";\r\n/*\r\nMemory.colony.\r\n        mainRoom.\r\n            state{}\r\n            roomPlanning{}\r\n            dpt_build{}\r\n*/\r\n/*\r\n    Colony's memory block inizializer.\r\n    Only when create a new colony\r\n*/\r\nexport class Mem {\r\n    constructor(roomName) {\r\n        this.mainRoom = roomName;\r\n        //this.build();\r\n    }\r\n    static constructionData(roomName, structureType) {\r\n        return Memory['colony'][roomName]['roomPlanning']['model'][structureType];\r\n    }\r\n    /*\r\n        request mem for a new colony\r\n    */\r\n    initializeColonyMem() {\r\n        if (!Memory['colony']) {\r\n            Memory['colony'] = {};\r\n        }\r\n        if (!Memory['creeps']) {\r\n            Memory['creeps'] = {};\r\n        }\r\n        delete Memory['colony'][this.mainRoom];\r\n        Memory['colony'][this.mainRoom] = {};\r\n        const colonyMem = Memory['colony'][this.mainRoom];\r\n        colonyMem['state'] = {};\r\n        colonyMem['state']['buildColony'] = {};\r\n        colonyMem['state']['buildColony']['buildRCL'] = 0;\r\n        colonyMem['state']['buildColony']['fase'] = 0;\r\n        colonyMem['state']['buildColony']['working'] = false;\r\n        colonyMem['state']['buildColony']['task'] = {};\r\n        colonyMem['state']['buildColony']['task']['building'] = false;\r\n        colonyMem['state']['buildColony']['task']['levelUP'] = false;\r\n        colonyMem['state']['controller'] = {};\r\n        colonyMem['state']['controller']['fillTaskTTL'] = -1;\r\n        colonyMem['state']['controller']['actualRCL'] = 1;\r\n        //save roomPlaning Block\r\n        let planning = new TranslatePlanning(this.mainRoom);\r\n        planning.savePlanningModel();\r\n        colonyMem['creepSpawning'] = {};\r\n        colonyMem['creepSpawning']['spawn'] = [];\r\n        colonyMem['creepSpawning']['task'] = {};\r\n        colonyMem['creepSpawning']['completeTask'] = {};\r\n        this.initializeDptHarvest();\r\n        this.initializeDptLogistic();\r\n        this.initializeDptWork();\r\n        this.initializeDptUpgrader();\r\n        this.initializeTowersMem();\r\n        this.initializeDptRepair();\r\n    }\r\n    compuLinkPosCanditate(candidateLinkPos) {\r\n        const colonyMem = Memory['colony'][this.mainRoom];\r\n        const rampartList = colonyMem['roomPlanning']['temp']['rampart'];\r\n        const length = Object.keys(rampartList).length;\r\n        for (let i = 0; i < length; ++i) {\r\n            const inRange2Pos = getRangePoints(rampartList[i], 2);\r\n            for (let rangePos = 0; rangePos < inRange2Pos.length; ++rangePos) {\r\n                if (isRampartProtectPos(this.mainRoom, inRange2Pos[rangePos])) {\r\n                    //translate to pos to node\r\n                    const node = translatePosToNode(inRange2Pos[rangePos]);\r\n                    candidateLinkPos[node] = new Set();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    compuRampartRangeLessEqual4(candidateLinkPos) {\r\n        const colonyMem = Memory['colony'][this.mainRoom];\r\n        const rampartList = colonyMem['roomPlanning']['temp']['rampart'];\r\n        const length = Object.keys(rampartList).length;\r\n        for (let nodeName in candidateLinkPos) {\r\n            const nodePos = translateNodeToPos(parseInt(nodeName));\r\n            const nodeRoomPos = new RoomPosition(nodePos[0], nodePos[1], this.mainRoom);\r\n            for (let i = 0; i < length; ++i) {\r\n                if (nodeRoomPos.getRangeTo(rampartList[i][0], rampartList[i][1]) <= 4) {\r\n                    candidateLinkPos[nodeName].add(i);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    compuLinkDataAndDeleteCandidate(linkPosData, candidateLinkPos) {\r\n        const colonyMem = Memory['colony'][this.mainRoom];\r\n        //const inRampartPos = colonyMem['roomPlanning']['inRampartPos'];\r\n        const keys = Object.keys(candidateLinkPos);\r\n        let maxNode = keys[0];\r\n        //find max number rampart node\r\n        for (let i in candidateLinkPos) {\r\n            if (candidateLinkPos[i].size > candidateLinkPos[maxNode].size) {\r\n                maxNode = i;\r\n            }\r\n        }\r\n        //add maxNode to linkPosData\r\n        linkPosData[maxNode] = candidateLinkPos[maxNode];\r\n        //delete assigned rampart\r\n        for (let i in candidateLinkPos) {\r\n            candidateLinkPos[i] = difference(candidateLinkPos[i], linkPosData[maxNode]);\r\n        }\r\n    }\r\n    allRampartAssigned(candidateLinkPos) {\r\n        let allAssigned = true;\r\n        for (let i in candidateLinkPos) {\r\n            if (candidateLinkPos[i].size)\r\n                allAssigned = false;\r\n        }\r\n        return allAssigned;\r\n    }\r\n    assignLinkToRampart() {\r\n        const colonyMem = Memory['colony'][this.mainRoom];\r\n        let candidateLinkPos = {};\r\n        //1. calcular candidatos a ser posicion de link\r\n        /*  candirateLinkPos = {\r\n                node : {set of rampart reference}\r\n            }\r\n        */\r\n        this.compuLinkPosCanditate(candidateLinkPos);\r\n        // 2. calcular los rampart a posicion <= 4 a cada posicion candidato\r\n        this.compuRampartRangeLessEqual4(candidateLinkPos);\r\n        // 3. coger el nodo con mas rampart\r\n        let linkNodeData = {};\r\n        let allAssigned = false;\r\n        while (!allAssigned) {\r\n            this.compuLinkDataAndDeleteCandidate(linkNodeData, candidateLinkPos);\r\n            allAssigned = this.allRampartAssigned(candidateLinkPos);\r\n        }\r\n        //save linkPosData in Memory\r\n        /* linkPosData\r\n                node: [ramparts reference]\r\n        */\r\n        let linkPosData = {};\r\n        for (let i in linkNodeData) {\r\n            //console.log(i + ' ' + translateNodeToPos(parseInt(i)) + ' ' + linkNodeData[i].size);\r\n            let rampartRef = [];\r\n            const iterator1 = linkNodeData[i].values();\r\n            for (let it = 0; it < linkNodeData[i].size; ++it) {\r\n                //console.log(iterator1.next().value);\r\n                rampartRef.push(parseInt(iterator1.next().value));\r\n            }\r\n            linkPosData[i] = rampartRef;\r\n        }\r\n        colonyMem['dpt_repair']['linkPosData'] = linkPosData;\r\n    }\r\n    initializeDptRepair() {\r\n        const colonyMem = Memory['colony'][this.mainRoom];\r\n        colonyMem['dpt_repair'] = {};\r\n        colonyMem['dpt_repair']['actualHits'] = 0;\r\n        colonyMem['dpt_repair']['task'] = {};\r\n        colonyMem['dpt_repair']['rampartData'] = {};\r\n        colonyMem['dpt_repair']['linksPos'] = [];\r\n        colonyMem['dpt_repair']['ticksToSpawn'] = {};\r\n        this.assignLinkToRampart();\r\n    }\r\n    initializeTowersMem() {\r\n        const colonyMem = Memory['colony'][this.mainRoom];\r\n        colonyMem['tower'] = {};\r\n        colonyMem['tower']['data'] = {};\r\n        colonyMem['tower']['healTask'] = {};\r\n        colonyMem['tower']['attackTask'] = {};\r\n        colonyMem['tower']['repairRoad'] = {};\r\n        colonyMem['tower']['repairRampart'] = {};\r\n    }\r\n    initializeCentralCluster() {\r\n    }\r\n    initializeLabMem() {\r\n    }\r\n    initializeDptUpgrader() {\r\n        const colonyMem = Memory['colony'][this.mainRoom];\r\n        colonyMem['dpt_upgrade'] = {};\r\n        colonyMem['dpt_upgrade']['actualize'] = false;\r\n        colonyMem['dpt_upgrade']['storage'] = {};\r\n        colonyMem['dpt_upgrade']['storage']['id'] = null;\r\n        colonyMem['dpt_upgrade']['container'] = {};\r\n        colonyMem['dpt_upgrade']['container']['stage1'] = 0;\r\n        colonyMem['dpt_upgrade']['container']['stage2'] = 0;\r\n        colonyMem['dpt_upgrade']['container']['stage3'] = 0;\r\n        colonyMem['dpt_upgrade']['ticksToSpawn'] = {};\r\n    }\r\n    initializeDptLogistic() {\r\n        const colonyMem = Memory['colony'][this.mainRoom];\r\n        colonyMem['dpt_logistic'] = {};\r\n        colonyMem['dpt_logistic']['actualize'] = false;\r\n        colonyMem['dpt_logistic']['storage'] = [];\r\n        colonyMem['dpt_logistic']['fillTask'] = false;\r\n        colonyMem['dpt_logistic']['request'] = [];\r\n        colonyMem['dpt_logistic']['sourceTask'] = {};\r\n        colonyMem['dpt_logistic']['targetTask'] = {};\r\n        colonyMem['dpt_logistic']['oneTimeCreeps'] = {};\r\n        colonyMem['dpt_logistic']['ticksToSpawn'] = {};\r\n    }\r\n    initializeDptHarvest() {\r\n        const colonyMem = Memory['colony'][this.mainRoom];\r\n        colonyMem['dpt_harvest'] = {};\r\n        colonyMem['dpt_harvest']['actualize'] = false;\r\n        colonyMem['dpt_harvest']['source1'] = {};\r\n        colonyMem['dpt_harvest']['source1']['id'] = '';\r\n        colonyMem['dpt_harvest']['source1']['outRampart'] = true;\r\n        colonyMem['dpt_harvest']['source1']['creeps'] = [];\r\n        colonyMem['dpt_harvest']['source2'] = {};\r\n        colonyMem['dpt_harvest']['source2']['id'] = '';\r\n        colonyMem['dpt_harvest']['source2']['outRampart'] = true;\r\n        colonyMem['dpt_harvest']['source2']['creeps'] = [];\r\n        colonyMem['dpt_harvest']['mineral'] = {};\r\n        colonyMem['dpt_harvest']['mineral']['id'] = '';\r\n        colonyMem['dpt_harvest']['mineral']['outRampart'] = true;\r\n        colonyMem['dpt_harvest']['mineral']['creeps'] = [];\r\n        colonyMem['dpt_harvest']['creep'] = {};\r\n        colonyMem['dpt_harvest']['ticksToSpawn'] = {};\r\n        colonyMem['dpt_harvest']['container'] = {};\r\n    }\r\n    initializeDptWork() {\r\n        const colonyMem = Memory['colony'][this.mainRoom];\r\n        colonyMem['dpt_build'] = {};\r\n        colonyMem['dpt_build']['actualize'] = false;\r\n        colonyMem['dpt_build']['ticksToSpawn'] = {};\r\n        colonyMem['dpt_build']['buildCost'] = 0;\r\n        colonyMem['dpt_build']['buildTask'] = {};\r\n        colonyMem['dpt_build']['request'] = [];\r\n        colonyMem['dpt_build']['transporterCreeps'] = {};\r\n    }\r\n}\r\n//# sourceMappingURL=Memory.js.map","references":["C:/Users/heche/AppData/Local/Screeps/scripts/127_0_0_1___21025/Winsnow/src/roomPlanning/planningUtils.ts","C:/Users/heche/AppData/Local/Screeps/scripts/127_0_0_1___21025/Winsnow/src/roomPlanning/TranslatePlanning.ts","C:/Users/heche/AppData/Local/Screeps/scripts/127_0_0_1___21025/Winsnow/src/utils.ts"],"map":"{\"version\":3,\"file\":\"Memory.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/colony/Memory.ts\"],\"names\":[],\"mappings\":\"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\"}"}
