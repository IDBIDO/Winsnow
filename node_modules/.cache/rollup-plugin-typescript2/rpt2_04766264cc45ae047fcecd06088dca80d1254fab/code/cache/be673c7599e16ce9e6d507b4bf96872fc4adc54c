{"code":"import { Department } from \"../Department\";\r\nimport * as dpt_config from \"@/department/dpt_config\";\r\nimport { CreepSpawning } from \"@/structure/CreepSpawning\";\r\nimport * as names from \"@/colony/nameManagement\";\r\nexport default class Dpt_Logistic extends Department {\r\n    constructor(dptRoom) {\r\n        super(dptRoom, 'dpt_logistic');\r\n    }\r\n    actualizeCreepNumber() {\r\n        //throw new Error(\"Method not implemented.\");\r\n        const rclEnergy = dpt_config.getEnergyRCL(Game.rooms[this.mainRoom].energyCapacityAvailable);\r\n        if (rclEnergy == 1) {\r\n            const source = {\r\n                id: null,\r\n                roomName: null,\r\n                pos: null\r\n            };\r\n            const data = {\r\n                source: source,\r\n                target: null\r\n            };\r\n            this.sendToSpawnInitializacion('Queen' + '_' + this.mainRoom, 'transporter', data, 'dpt_logistic');\r\n            const creepName1 = this.uid();\r\n            this.sendToSpawnInitializacion(creepName1, 'transporter', data, 'dpt_logistic');\r\n            const creepName2 = this.uid();\r\n            this.sendToSpawnInitializacion(creepName2, 'transporter', data, 'dpt_logistic');\r\n        }\r\n    }\r\n    getSourceTask() {\r\n        const requestList = this.memory['sourceTask'];\r\n        const keys = Object.keys(requestList);\r\n        if (keys.length === 0) {\r\n            return null;\r\n        }\r\n        else\r\n            return requestList[keys[0]];\r\n    }\r\n    getTransferTask() {\r\n        const requestList = this.memory['transferTask'];\r\n        const keys = Object.keys(requestList);\r\n        if (keys.length === 0) {\r\n            return null;\r\n        }\r\n        else\r\n            return requestList[keys[0]];\r\n    }\r\n    getStorageID() {\r\n        const storageList = this.memory['storage'];\r\n        if (storageList.length == 1) {\r\n            return storageList[0];\r\n        }\r\n        else {\r\n            let maxCapacityUsedStorageIndex = 0;\r\n            for (let i = 1; i < storageList.length; ++i) {\r\n                const storage = Game.getObjectById(storageList[i]); // @ts-ignore\r\n                const actualStorage = Game.getObjectById(storageList[maxCapacityUsedStorageIndex]); // @ts-ignore\r\n                if (storage.store.getUsedCapacity() > actualStorage.store.getUsedCapacity()) {\r\n                    maxCapacityUsedStorageIndex = i;\r\n                }\r\n            }\r\n            return storageList[maxCapacityUsedStorageIndex];\r\n        }\r\n    }\r\n    /** Dpt_logistic creaat move task to reply a request */\r\n    creatMoveTask(moveTask) {\r\n        const storage = Game.rooms[this.mainRoom].storage;\r\n        if (storage) {\r\n            const task = {\r\n                type: 'MOVE',\r\n                source: moveTask.source,\r\n                target: {\r\n                    id: storage.id\r\n                }\r\n            };\r\n            return task;\r\n        }\r\n        //!!!!!!!! PUEDE DAR ERROR SI RCL > 5\r\n        else {\r\n            const targetTaskList = this.memory['targetTask'];\r\n            const taskName = Object.keys(targetTaskList);\r\n            if (taskName.length) {\r\n                targetTaskList[taskName[0]];\r\n                const task = {\r\n                    type: 'MOVE',\r\n                    source: moveTask.source,\r\n                    target: {\r\n                        id: targetTaskList[taskName[0]]\r\n                    }\r\n                };\r\n                return task;\r\n            }\r\n            else\r\n                return null;\r\n        }\r\n    }\r\n    getMaxCapacityStorageID() {\r\n        const storages = this.memory['storage'];\r\n        if (storages.length == 2) {\r\n            const c1 = Game.getObjectById(storages[0]);\r\n            //console.log(c1);\r\n            const c2 = Game.getObjectById(storages[1]);\r\n            //@ts-ignore\r\n            if (c1.store.getUsedCapacity() > c2.store.getUsedCapacity()) {\r\n                return c1.id;\r\n            }\r\n            else\r\n                return c2.id;\r\n        }\r\n        else if (storages.length == 1)\r\n            return storages[0];\r\n        else\r\n            return null;\r\n    }\r\n    createTransferTask(transferRequest) {\r\n        const r = {\r\n            type: 'TRANSFER',\r\n            source: this.getMaxCapacityStorageID(),\r\n            target: transferRequest.target,\r\n            amountDone: 0\r\n        };\r\n        return r;\r\n    }\r\n    createWidrawTask(widrawRequest) {\r\n        const r = {\r\n            type: 'WITHDRAW',\r\n            source: widrawRequest.source,\r\n            target: this.getMaxCapacityStorageID(),\r\n        };\r\n        return r;\r\n    }\r\n    notifyCreepNameToObject(objectID, creepName) {\r\n        //@ts-ignore\r\n        const object = Game.getObjectById(objectID);\r\n        if (object instanceof Creep) {\r\n            object.memory['task']['logisticCreepName'] = creepName;\r\n        }\r\n    }\r\n    assigTargetTask(creepName) {\r\n        const targetTaskList = this.memory['targetTask'];\r\n        for (let request in targetTaskList) {\r\n            if (request) {\r\n                if (targetTaskList[request]['type'] == 'TRANSFER') {\r\n                    const task = this.createTransferTask(targetTaskList[request]);\r\n                    //notify task object the creep assigned to it\r\n                    this.notifyCreepNameToObject(task.target.id, creepName);\r\n                    //delete this.memory['targetTask'][request];\r\n                    //assig task to logistic creep\r\n                    Game.creeps[creepName].memory['task'] = task;\r\n                    //Game.creeps[creepName].memory['sendTaskRequest'] = false;\r\n                    //return true;\r\n                }\r\n                else if (targetTaskList[request]['type'] == 'WITHDRAW') {\r\n                    const task = this.createWidrawTask(targetTaskList[request]);\r\n                    Game.creeps[creepName].memory['task'] = task;\r\n                    //return true;\r\n                }\r\n                Game.creeps[creepName].memory['sendTaskRequest'] = false;\r\n                delete this.memory['targetTask'][request];\r\n                return true;\r\n            }\r\n        }\r\n        return false; //no task found\r\n    }\r\n    assigSourceTask(creepName) {\r\n        return false;\r\n    }\r\n    createFillTask() {\r\n        const task = {\r\n            'type': 'FILL',\r\n            'source': this.getMaxCapacityStorageID(),\r\n            'target': null\r\n        };\r\n        return task;\r\n    }\r\n    assigFillTask(creepName) {\r\n        Memory.creeps[creepName]['task'] = this.createFillTask();\r\n    }\r\n    processRequest() {\r\n        const requestList = this.memory['request'];\r\n        const sourceTaskList = this.memory['sourceTask'];\r\n        const targetTaskList = this.memory['targetTask'];\r\n        for (let i = requestList.length - 1; i >= 0; --i) {\r\n            if (Game.creeps[requestList[i]]) {\r\n                if (this.memory['fillTask']) {\r\n                    this.assigFillTask(requestList[i]);\r\n                    Game.creeps[requestList[i]].memory['sendTaskRequest'] = false;\r\n                    this.memory['fillTask'] = false;\r\n                    this.memory['request'].pop();\r\n                }\r\n                else if (this.assigTargetTask(requestList[i])) {\r\n                    this.memory['request'].pop();\r\n                }\r\n            }\r\n            else\r\n                this.memory['request'].pop();\r\n        }\r\n    }\r\n    deleteDeadOneTimeCreeps() {\r\n        const oneTimeCreeps = this.memory['oneTimeCreeps'];\r\n        for (let creepName in oneTimeCreeps) {\r\n            if (oneTimeCreeps[creepName] <= Game.time) {\r\n                delete this.memory['oneTimeCreeps'][creepName];\r\n                delete Memory.creeps[creepName];\r\n            }\r\n        }\r\n    }\r\n    static sendToSpawnTransporter(roomName, oneTime) {\r\n        let dpt = '-';\r\n        if (!oneTime)\r\n            dpt = 'dpt_logistic';\r\n        const creepName = names.creepName();\r\n        const data = {\r\n            source: {\r\n                id: null,\r\n                roomName: roomName,\r\n                pos: null\r\n            },\r\n            target: null\r\n        };\r\n        CreepSpawning.sendToSpawnInitializacion(roomName, creepName, 'transporter', data, dpt, false);\r\n        return creepName;\r\n    }\r\n    checkPermanentCreepNum() {\r\n        const rcl = Game.rooms[this.mainRoom].controller.level;\r\n        if (rcl <= 7 && rcl > 1) {\r\n            const creepsList = this.memory['ticksToSpawn'];\r\n            const creepsName = Object.keys(creepsList);\r\n            if (creepsName.length == 0) {\r\n                const name = Dpt_Logistic.sendToSpawnTransporter(this.mainRoom, false);\r\n                this.memory['ticksToSpawn'][name] = null;\r\n            }\r\n            else {\r\n                if (creepsList[creepsName[0]] != null && creepsList[creepsName[0]] < Game.time) {\r\n                    CreepSpawning.sendToSpawnRecycle(this.mainRoom, creepsName[0], 'transporter', 'dpt_logistic');\r\n                    CreepSpawning.initializeCreepState(creepsName[0]);\r\n                    this.memory['ticksToSpawn'][[creepsName[0]]] = null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    run() {\r\n        this.processRequest();\r\n        if (Game.time % 7) {\r\n            this.checkPermanentCreepNum();\r\n        }\r\n        if (Game.time % 97) {\r\n            this.deleteDeadOneTimeCreeps();\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=Dpt_Logistic.js.map","references":["C:/Users/heche/AppData/Local/Screeps/scripts/127_0_0_1___21025/Winsnow/src/department/Department.ts","C:/Users/heche/AppData/Local/Screeps/scripts/127_0_0_1___21025/Winsnow/src/department/dpt_config.ts","C:/Users/heche/AppData/Local/Screeps/scripts/127_0_0_1___21025/Winsnow/src/colony/dpt_comunication.ts","C:/Users/heche/AppData/Local/Screeps/scripts/127_0_0_1___21025/Winsnow/src/structure/CreepSpawning.ts","C:/Users/heche/AppData/Local/Screeps/scripts/127_0_0_1___21025/Winsnow/src/colony/nameManagement.ts"],"map":"{\"version\":3,\"file\":\"Dpt_Logistic.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/department/dpt_logistic/Dpt_Logistic.ts\"],\"names\":[],\"mappings\":\"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\"}"}
