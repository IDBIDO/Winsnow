{"code":"import { sendLogisticTask } from \"@/colony/dpt_comunication\";\r\nimport { logisticTaskName, towerTask } from \"@/colony/nameManagement\";\r\nexport class Tower {\r\n    constructor(mainRoom) {\r\n        this.mainRoom = mainRoom;\r\n        this.memory = Memory['colony'][mainRoom]['tower'];\r\n    }\r\n    /*\r\n        id {\r\n            energyPetition: boolean,\r\n            task,\r\n        }\r\n\r\n    */\r\n    /*\r\n        Una torreta cada 7 tick revisa su energia, si es inferiol a un valor dado,\r\n        hace una peticion de transferencia a Dpt_logistic.\r\n        Mientras no le llegue toda la energia que ha pedido, no lanza ninguna\r\n        peticion de energia.\r\n        \r\n    */\r\n    checkTowerEnergy() {\r\n        const towerMem = this.memory['data'];\r\n        for (let id in towerMem) {\r\n            if (!towerMem[id]['energyPetition']) {\r\n                const tower = Game.getObjectById(id);\r\n                if (tower.store['energy'] <= 700) {\r\n                    //SEND TASKFER REQUEST\r\n                    const transferTask = {\r\n                        'type': 'TRANSFER',\r\n                        'target': {\r\n                            'id': id,\r\n                            'resourceType': 'energy',\r\n                            'amount': tower.store.getFreeCapacity(RESOURCE_ENERGY)\r\n                        }\r\n                    };\r\n                    sendLogisticTask(this.mainRoom, logisticTaskName(transferTask), transferTask);\r\n                    towerMem[id]['energyPetition'] = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    towerAttack() {\r\n        const towersData = this.memory['data'];\r\n        const attackTarget = this.memory['attackTask'];\r\n        let missingCreepsId = [];\r\n        let attacked = false;\r\n        for (let taskName in attackTarget) {\r\n            const hostileCreep = Game.getObjectById(attackTarget[taskName]);\r\n            if (hostileCreep) {\r\n                for (let towerId in towersData) {\r\n                    const tower = Game.getObjectById(towerId);\r\n                    tower.attack(hostileCreep);\r\n                }\r\n                attacked = true;\r\n            }\r\n            else {\r\n                missingCreepsId.push(taskName);\r\n            }\r\n        }\r\n        for (let i = 0; i < missingCreepsId.length; ++i) {\r\n            delete this.memory['attackTask'][missingCreepsId[i]];\r\n        }\r\n        return attacked;\r\n    }\r\n    static sendRoadRepairTask(roomName, roadId) {\r\n        const taskname = towerTask();\r\n        Memory['colony'][roomName]['tower']['repairRoad'][taskname] = roadId;\r\n    }\r\n    static cleanTowerEnergyPetition(roomName, towerId) {\r\n        Memory['colony'][roomName]['tower']['data'][towerId]['energyPetition'] = false;\r\n    }\r\n    static sendRampartRepairTask(roomName, rampartTask) {\r\n        const taskname = towerTask();\r\n        Memory['colony'][roomName]['tower']['repairRampart'][taskname] = rampartTask;\r\n    }\r\n    static sendAttackTask(roomName, creepId) {\r\n        const taskName = towerTask();\r\n        Memory['colony'][roomName]['tower']['attackTask'][taskName] = creepId;\r\n    }\r\n    towerRepairRampart(towerIndex) {\r\n        let i = towerIndex;\r\n        const rampartList = this.memory['repairRampart'];\r\n        const towersData = this.memory['data'];\r\n        const towersId = Object.keys(towersData);\r\n        let deleteRepairTask = [];\r\n        for (let taskName in rampartList) {\r\n            if (i < towersId.length)\r\n                break;\r\n            const rampart = Game.getObjectById(rampartList[taskName]);\r\n            const rampartNeedHits = 50000;\r\n            while (i < towersId.length && rampart.hits < rampartNeedHits) {\r\n                const tower = Game.getObjectById(towersId[i]);\r\n                tower.repair(rampart);\r\n                ++i;\r\n            }\r\n            if (rampart.hits > rampartNeedHits) {\r\n                deleteRepairTask.push(this.memory['repairRampart'][taskName]);\r\n            }\r\n        }\r\n        //delete road or container tasks\r\n        for (let j = 0; j < deleteRepairTask.length; ++j) {\r\n            delete rampartList[deleteRepairTask[j]];\r\n        }\r\n        return i;\r\n    }\r\n    towerRepairRoad(towerIndex) {\r\n        let i = towerIndex;\r\n        const repairRoad = this.memory['repairRoad'];\r\n        const towersData = this.memory['data'];\r\n        const towersId = Object.keys(towersData);\r\n        let deleteRepairTask = [];\r\n        for (let taskName in repairRoad) {\r\n            if (i >= towersId.length)\r\n                break;\r\n            const road = Game.getObjectById(repairRoad[taskName]);\r\n            let repairTime = ~~((road.hitsMax - road.hits) / 800);\r\n            while (i < towersId.length && repairTime) {\r\n                const tower = Game.getObjectById(towersId[i]);\r\n                tower.repair(road);\r\n                --repairTime;\r\n                ++i;\r\n            }\r\n            if (!repairTime) {\r\n                deleteRepairTask.push(taskName);\r\n            }\r\n        }\r\n        //delete road or container tasks\r\n        for (let j = 0; j < deleteRepairTask.length; ++j) {\r\n            delete this.memory['repairRoad'][deleteRepairTask[j]];\r\n        }\r\n        return i;\r\n    }\r\n    towerRepair() {\r\n        let i = 0;\r\n        i = this.towerRepairRampart(i);\r\n        i = this.towerRepairRoad(i);\r\n        //repair rampart task\r\n    }\r\n    towerTaskExecution() {\r\n        if (!this.towerAttack()) {\r\n            this.towerRepair();\r\n        }\r\n    }\r\n    run() {\r\n        if (Game.time % 7 == 0)\r\n            this.checkTowerEnergy();\r\n        //this.towerAssignRepairTask();\r\n        this.towerTaskExecution();\r\n    }\r\n}\r\n//# sourceMappingURL=Tower.js.map","references":["C:/Users/heche/AppData/Local/Screeps/scripts/127_0_0_1___21025/Winsnow/src/colony/dpt_comunication.ts","C:/Users/heche/AppData/Local/Screeps/scripts/127_0_0_1___21025/Winsnow/src/colony/nameManagement.ts"],"map":"{\"version\":3,\"file\":\"Tower.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/structure/Tower.ts\"],\"names\":[],\"mappings\":\"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\"}"}
