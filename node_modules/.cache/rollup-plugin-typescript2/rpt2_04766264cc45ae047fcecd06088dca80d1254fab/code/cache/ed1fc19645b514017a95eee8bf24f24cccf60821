{"code":"import { binarySearch } from \"@/utils\";\r\nexport function equalPoint(pointA, pointB) {\r\n    if (pointA[0] == pointB[0] && pointA[1] == pointB[1])\r\n        return true;\r\n    return false;\r\n}\r\nexport function maxTwoNumber(x, y) {\r\n    if (x >= y)\r\n        return x;\r\n    return y;\r\n}\r\nexport function translatePosToNode(pos) {\r\n    return pos[0] * 50 + pos[1];\r\n}\r\nexport function translateNodeToPos(node) {\r\n    return [Math.floor(node / 50), node % 50];\r\n}\r\nexport function distanceTwoPoints(pointA, pointB) {\r\n    //return Math.sqrt( (pointA[0]-pointB[0]) **2 + (pointA[1]-pointB[1]) **2 )\r\n    let x = Math.sqrt((pointA[0] - pointB[0]) ** 2);\r\n    //console.log(x);\r\n    let y = Math.sqrt((pointA[1] - pointB[1]) ** 2);\r\n    //console.log(y);\r\n    return maxTwoNumber(x, y);\r\n}\r\n/*\r\n    punto de distancia minima del listPoint un punto 'point' dado\r\n*/\r\nexport function minDistance(point, listPoint) {\r\n    let pmim = listPoint[0];\r\n    let disMin = distanceTwoPoints(point, listPoint[0]);\r\n    let index = 0;\r\n    for (let i = 1; i < listPoint.length; ++i) {\r\n        let aux = distanceTwoPoints(point, listPoint[i]);\r\n        if (aux < disMin) {\r\n            disMin = aux;\r\n            pmim = listPoint[i];\r\n            index = i;\r\n        }\r\n    }\r\n    //listPoint.splice(index, 1);\r\n    return index;\r\n    //return [pmim[0], pmim[1]];\r\n}\r\nexport function transformToPoint(structurePos) {\r\n    let point = { \"x\": structurePos[0], \"y\": structurePos[1] };\r\n    return point;\r\n}\r\nexport function transformToPointList(model) {\r\n    let toPoint = {};\r\n    for (let structureName in model) {\r\n        toPoint[structureName] = [];\r\n        for (let i = 0; i < model[structureName].length; ++i) {\r\n            toPoint[structureName].push(transformToPoint(model[structureName][i]));\r\n            //console.log(toPoint[structureName][i].x);\r\n        }\r\n    }\r\n    return toPoint;\r\n}\r\n/*\r\n    puntos de distancia 1 de un punto dado a una lista de puntos\r\n*/\r\nexport function nearPoint(point, listPoint) {\r\n    let near = [];\r\n    for (let i = 0; i < listPoint.length; ++i) {\r\n        if (distanceTwoPoints(point, listPoint[i]) == 1) {\r\n            near.push(i);\r\n        }\r\n    }\r\n    return near;\r\n}\r\nexport function nearPointOne(point, listPoint) {\r\n    let near;\r\n    for (let i = 0; i < listPoint.length; ++i) {\r\n        if (distanceTwoPoints(point, listPoint[i]) == 1) {\r\n            near = i;\r\n            break;\r\n        }\r\n    }\r\n    return near;\r\n}\r\nexport function transformRoadToAdjacentList(roadList) {\r\n    let adjacentList = [];\r\n    for (let i = 0; i < roadList.length; ++i) {\r\n        adjacentList.push(nearPoint(roadList[i], roadList));\r\n        //console.log(i , nearPoint(roadList[i], roadList));\r\n    }\r\n    //console.log(adjacentList);\r\n    return adjacentList;\r\n}\r\nexport function reconstructPath(beginPoint, endPoint, prev) {\r\n    let path = [];\r\n    for (let at = endPoint; at != -1; at = prev[at]) {\r\n        path.push(at);\r\n    }\r\n    path.reverse();\r\n    if (path[0] == beginPoint) {\r\n        return path;\r\n    }\r\n    return [];\r\n}\r\nexport function solveBFS(roadList, beginPoint) {\r\n    //initialize visited array\r\n    let visited = Array();\r\n    for (let i = 0; i < roadList.length; ++i) {\r\n        visited.push(false);\r\n    }\r\n    // Use an array as our queue representation:\r\n    let q = new Array();\r\n    visited[beginPoint] = true;\r\n    q.push(beginPoint);\r\n    //save path\r\n    let path = new Array();\r\n    path.push(beginPoint);\r\n    let prev = new Array();\r\n    for (let i = 0; i < roadList.length; ++i) {\r\n        prev.push(-1);\r\n    }\r\n    while (q.length > 0) {\r\n        const v = q.shift();\r\n        for (let adjV of roadList[v]) {\r\n            if (!visited[adjV]) {\r\n                visited[adjV] = true;\r\n                q.push(adjV);\r\n                prev[adjV] = v;\r\n            }\r\n        }\r\n    }\r\n    return prev;\r\n}\r\nexport function roadPath(roadList, beginPoint, endPoint) {\r\n    let prev = solveBFS(roadList, beginPoint);\r\n    return reconstructPath(beginPoint, endPoint, prev);\r\n}\r\n//get object's ID by roomName, position and structure type\r\nexport function getId(roomName, pos, structureType) {\r\n    //console.log(structureType);\r\n    const position = new RoomPosition(pos[0], pos[1], roomName);\r\n    const object = position.lookFor(structureType);\r\n    return object[0].id;\r\n}\r\n/*\r\n    only valid if distance between two points are interger\r\n*/\r\nfunction pointsBetweenTwo(point1, point2) {\r\n    let x = point1[0] - point2[0];\r\n    let y = point1[1] - point2[1];\r\n    const max = maxTwoNumber(Math.abs(x), Math.abs(y));\r\n    const incX = -(x / max);\r\n    const incY = -(y / max);\r\n    let r = Array(max);\r\n    let actualX = point1[0];\r\n    let actualY = point1[1];\r\n    for (let i = 0; i < max; ++i) {\r\n        actualX += incX;\r\n        actualY += incY;\r\n        r[i] = [actualX, actualY];\r\n    }\r\n    r.pop();\r\n    return r;\r\n}\r\nexport function outOfPlanning(map, point) {\r\n}\r\nexport function inMapRange(pos) {\r\n    if (pos[0] >= 0 && pos[0] < 50) {\r\n        if (pos[1] >= 0 && pos[1] < 50) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n/*\r\n    negative points will ignored\r\n*/\r\nexport function nearPosition(pos) {\r\n    let nearPoints = [\r\n        [pos[0] - 1, pos[1] + 1],\r\n        [pos[0] - 1, pos[1]],\r\n        [pos[0] - 1, pos[1] - 1],\r\n        [pos[0], pos[1] + 1],\r\n        [pos[0], pos[1] - 1],\r\n        [pos[0] + 1, pos[1] + 1],\r\n        [pos[0] + 1, pos[1]],\r\n        [pos[0] + 1, pos[1] - 1],\r\n    ];\r\n    let validNearPoints = [];\r\n    for (let i = 0; i < nearPoints.length; ++i) {\r\n        if (inMapRange(nearPoints[i])) {\r\n            validNearPoints.push(nearPoints[i]);\r\n        }\r\n    }\r\n    return validNearPoints;\r\n}\r\nexport function isRampartPos(roomName, pos) {\r\n    const rampartDataList = Memory['colony'][roomName]['roomPlanning']['model']['rampart'];\r\n    for (let i = 0; i < rampartDataList.length; ++i) {\r\n        if (pos[0] == rampartDataList[i]['pos'][0] && pos[1] == rampartDataList[i]['pos'][1]) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nexport function isRampartProtectPos(roomName, pos) {\r\n    const protectedPosList = Memory['colony'][roomName]['roomPlanning']['inRampartPos'];\r\n    const posNode = translatePosToNode(pos);\r\n    if (binarySearch(protectedPosList, posNode, 0, protectedPosList.length - 1)) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nexport function getRangePoints(point, range) {\r\n    const angulo1 = [point[0] - range, point[1] + range];\r\n    const angulo2 = [point[0] + range, point[1] + range];\r\n    const angulo3 = [point[0] + range, point[1] - range];\r\n    const angulo4 = [point[0] - range, point[1] - range];\r\n    const r1 = [angulo1].concat(pointsBetweenTwo(angulo1, angulo2));\r\n    const r2 = r1.concat([angulo2].concat(pointsBetweenTwo(angulo2, angulo3)));\r\n    const r3 = r2.concat([angulo3].concat(pointsBetweenTwo(angulo3, angulo4)));\r\n    const r4 = r3.concat([angulo4].concat(pointsBetweenTwo(angulo4, angulo1)));\r\n    return r4;\r\n}\r\n//# sourceMappingURL=planningUtils.js.map","references":["C:/Users/heche/AppData/Local/Screeps/scripts/127_0_0_1___21025/Winsnow/src/utils.ts","C:/Users/heche/AppData/Local/Screeps/scripts/127_0_0_1___21025/Winsnow/node_modules/@types/lodash/index.d.ts"],"map":"{\"version\":3,\"file\":\"planningUtils.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/roomPlanning/planningUtils.ts\"],\"names\":[],\"mappings\":\"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\"}"}
