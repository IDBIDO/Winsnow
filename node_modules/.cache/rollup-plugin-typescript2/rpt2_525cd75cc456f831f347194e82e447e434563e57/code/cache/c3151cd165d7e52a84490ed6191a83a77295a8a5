{"code":"import * as planningUtils from \"./planningUtils\";\r\nimport * as names from \"../colony/nameManagement\";\r\n/** CONTROL ALL DEPARTMENT */\r\nexport class OperationReserch {\r\n    constructor(mainRoom) {\r\n        this.mainRoom = mainRoom;\r\n        this.memory = Memory['colony'][mainRoom]['state'];\r\n    }\r\n    /** Funtion to control creep numbers, only used for OR */\r\n    sendToSpawnInitializacion(creepName, role, data, dpt) {\r\n        Memory['colony'][this.mainRoom]['creepSpawning']['task'][creepName] = {};\r\n        const spawnTask = Memory['colony'][this.mainRoom]['creepSpawning']['task'][creepName];\r\n        //console.log(creepName);\r\n        spawnTask['role'] = role;\r\n        spawnTask['roomName'] = this.mainRoom;\r\n        spawnTask['department'] = dpt;\r\n        spawnTask['data'] = data;\r\n    }\r\n    /************************** buildRCL 1 *********************************/\r\n    /** fase 0 */\r\n    putSourceUpgraderContainers() {\r\n        const sourceContainer1Pos = planningUtils.getContainerPos(this.mainRoom, \"container_source1\");\r\n        Game.rooms[this.mainRoom].createConstructionSite(sourceContainer1Pos[0], sourceContainer1Pos[1], 'container');\r\n        const sourceContainer2Pos = planningUtils.getContainerPos(this.mainRoom, \"container_source2\");\r\n        Game.rooms[this.mainRoom].createConstructionSite(sourceContainer2Pos[0], sourceContainer2Pos[1], 'container');\r\n        const controllerContainerPos = planningUtils.getContainerPos(this.mainRoom, 'container_controller');\r\n        Game.rooms[this.mainRoom].createConstructionSite(controllerContainerPos[0], controllerContainerPos[1], 'container');\r\n        this.memory['buildColony']['fase'] = 1;\r\n        this.memory['buildColony']['working'] = false;\r\n    }\r\n    /** fase 1 */\r\n    buildSourceContainers() {\r\n        const sourceContainer1Pos = planningUtils.getContainerPos(this.mainRoom, \"container_source1\");\r\n        //Game.rooms[this.mainRoom].createConstructionSite(sourceContainer1Pos[0], sourceContainer1Pos[1], 'container');\r\n        const constructionSideID1 = planningUtils.getConstructionSideID(this.mainRoom, sourceContainer1Pos);\r\n        let numCreepsNeeded1 = planningUtils.positionToHarvest(this.mainRoom, sourceContainer1Pos).length;\r\n        if (numCreepsNeeded1 > 3)\r\n            numCreepsNeeded1 = 3;\r\n        const data1 = {\r\n            source: planningUtils.getSourceEnery1ID(this.mainRoom),\r\n            target: {\r\n                id: constructionSideID1,\r\n                pos: [sourceContainer1Pos[0], sourceContainer1Pos[1]]\r\n            }\r\n        };\r\n        const sourceContainer2Pos = planningUtils.getContainerPos(this.mainRoom, \"container_source2\");\r\n        //Game.rooms[this.mainRoom].createConstructionSite(sourceContainer2Pos[0], sourceContainer2Pos[1], 'container');\r\n        const constructionSideID2 = planningUtils.getConstructionSideID(this.mainRoom, sourceContainer2Pos);\r\n        let numCreepsNeeded2 = planningUtils.positionToHarvest(this.mainRoom, sourceContainer2Pos).length;\r\n        if (numCreepsNeeded2 > 3)\r\n            numCreepsNeeded2 = 3;\r\n        const data2 = {\r\n            source: planningUtils.getSourceEnery2ID(this.mainRoom),\r\n            target: constructionSideID2\r\n        };\r\n        //send spawn task\r\n        const totalNum = numCreepsNeeded1 + numCreepsNeeded2;\r\n        let par = true;\r\n        for (let i = 0; i < totalNum; ++i) {\r\n            const creepName = names.creepName();\r\n            if (par) {\r\n                this.sendToSpawnInitializacion(creepName, 'initializer', data1, 'dpt_harvest');\r\n                par = false;\r\n                //save creep name to check task completation\r\n                this.memory['buildColony']['task'][0] = {};\r\n            }\r\n            else {\r\n                this.sendToSpawnInitializacion(creepName, 'harvester', data2, 'dpt_harvest');\r\n                par = true;\r\n            }\r\n        }\r\n    }\r\n    /** fase 2 */\r\n    buildUpgraderContainer() {\r\n    }\r\n    /** fase 3 */\r\n    level2AndBuildRoad() {\r\n    }\r\n    buildColony() {\r\n        const rcl = this.memory['buildColony']['buildRCL'];\r\n        const fase = this.memory['buildColony']['fase'];\r\n        switch (rcl) {\r\n            case 0: //new colony, only have a spawn\r\n                if (fase == 0)\r\n                    this.putSourceUpgraderContainers(); //PUT SOURCE CONTAINERS\r\n                else if (fase == 1)\r\n                    this.buildSourceContainers();\r\n                else if (fase == 2)\r\n                    this.buildUpgraderContainer();\r\n                else\r\n                    this.level2AndBuildRoad();\r\n                break;\r\n            case 1:\r\n                break;\r\n            case 2:\r\n                break;\r\n            case 3:\r\n                break;\r\n            case 4:\r\n                break;\r\n            case 5:\r\n                break;\r\n            case 6:\r\n                break;\r\n            case 7:\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    faseComplete() {\r\n        return false;\r\n    }\r\n    run() {\r\n        if (this.memory['buildColony']['buildRCL'] != 9 && Game.time % 13 == 0) {\r\n            if (!this.memory['buildColony']['working']) {\r\n                this.memory['buildColony']['working'] = true;\r\n                this.buildColony();\r\n            }\r\n            else { //if OR are working, check if all task complete\r\n                if (this.faseComplete()) {\r\n                    this.memory['buildColony']['working'] = false;\r\n                    const rcl = this.memory['buildColony']['buildRCL'];\r\n                    this.memory['buildColony']['buildRCL'] = rcl + 1;\r\n                    this.memory['buildColony']['fase'] = 0;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=OperationReserch.js.map","references":["C:/Users/heche/AppData/Local/Screeps/scripts/127_0_0_1___21025/Winsnow/src/operationResearch/planningUtils.ts","C:/Users/heche/AppData/Local/Screeps/scripts/127_0_0_1___21025/Winsnow/src/colony/roomUtils.ts","C:/Users/heche/AppData/Local/Screeps/scripts/127_0_0_1___21025/Winsnow/src/colony/nameManagement.ts"],"map":"{\"version\":3,\"file\":\"OperationReserch.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/operationResearch/OperationReserch.ts\"],\"names\":[],\"mappings\":\"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\"}"}
