{"code":"import { sendRequest } from \"@/colony/dpt_comunication\";\r\nimport Dpt_Harvest from \"@/department/dpt_harvest/Dpt_Harvest\";\r\nimport { Tower } from \"@/structure/Tower\";\r\nexport const TRANSFER_DEATH_LIMIT = 30;\r\nexport const deathPrepare = function (creep, sourceId) {\r\n    if (creep.store.getUsedCapacity() > 0 && creep.room.storage) {\r\n        for (const resourceType in creep.store) {\r\n            const target = creep.room.storage;\r\n            creep.moveTo(target.pos);\r\n            creep.transfer(target, resourceType);\r\n            return false;\r\n        }\r\n    }\r\n    else {\r\n        if (creep.memory['task']['type'] == 'TRANSFER') {\r\n            const target = Game.getObjectById(creep.memory['task']['target']['id']); //@ts-ignore\r\n            notifyTaskCompleteTransfer(creep, target);\r\n        }\r\n        else if (creep.memory['task']['type'] == 'WITHDRAW') {\r\n            const target = Game.getObjectById(creep.memory['task']['source']['id']); //@ts-ignore\r\n            notifyTaskCompleteWithdraw(creep, target);\r\n        }\r\n        creep.suicide();\r\n    }\r\n    return false;\r\n};\r\nexport const transferCreepStore = function (creep, sourceId) {\r\n    if (creep.store.getUsedCapacity() > 0) {\r\n        for (const resourceType in creep.store) {\r\n            if (resourceType == 'energy')\r\n                return false;\r\n            let target;\r\n            //    @ts-ignore\r\n            target = sourceId ? Game.getObjectById(sourceId) : creep.room.storage;\r\n            // ËΩ¨ÁßªËµÑÊ∫ê\r\n            creep.moveTo(target.pos);\r\n            creep.transfer(target, resourceType);\r\n        }\r\n        return true;\r\n    }\r\n    return false;\r\n};\r\nexport const notifyTaskCompleteTransfer = function (creep, target) {\r\n    if (target instanceof StructureTower) {\r\n        Tower.cleanTowerEnergyPetition(target.room.name, target.id);\r\n    }\r\n};\r\nexport const notifyTaskCompleteWithdraw = function (creep, source) {\r\n    if (source instanceof StructureContainer) {\r\n        Dpt_Harvest.cleanContainerWithdrawPetition(source.room.name, source.id);\r\n    }\r\n};\r\nconst roles = {\r\n    manager: (data) => ({\r\n        source: creep => {\r\n            return true;\r\n        },\r\n        target: creep => {\r\n            return false;\r\n        }\r\n    }),\r\n    transporter: (data) => ({\r\n        source: creep => {\r\n            if (creep.ticksToLive <= TRANSFER_DEATH_LIMIT)\r\n                return deathPrepare(creep, creep.memory['task']['source']);\r\n            const taskType = creep.memory['task']['type'];\r\n            if (taskType) {\r\n                if (!transferCreepStore(creep, creep.memory['task']['source'])) {\r\n                    return transferTaskOperations[taskType].source(creep);\r\n                }\r\n                else\r\n                    return false;\r\n            }\r\n            else {\r\n                //send task \r\n                if (creep.memory['sendTaskRequest']) {\r\n                    creep.say('üí§');\r\n                }\r\n                else {\r\n                    creep.say('‚úâÔ∏è');\r\n                    sendRequest(creep.memory['roomName'], 'dpt_logistic', creep.name);\r\n                    creep.memory['sendTaskRequest'] = true;\r\n                }\r\n                return false;\r\n            }\r\n        },\r\n        target: creep => {\r\n            const taskType = creep.memory['task']['type'];\r\n            if (taskType) {\r\n                return transferTaskOperations[taskType].target(creep);\r\n            }\r\n            else\r\n                return true; //get new task\r\n        }\r\n    })\r\n};\r\nexport const transferTaskOperations = {\r\n    FILL: {\r\n        source: (creep) => {\r\n            const source = Game.getObjectById(creep.memory['task']['source']);\r\n            //@ts-ignore\r\n            if (creep.withdraw(source, 'energy') == ERR_NOT_IN_RANGE) { //@ts-ignore\r\n                creep.moveTo(source);\r\n            }\r\n            return creep.store.getFreeCapacity() <= 0;\r\n        },\r\n        target: (creep) => {\r\n            const targetID = creep.memory['task']['target'];\r\n            let target;\r\n            if (targetID) {\r\n                target = Game.getObjectById(targetID);\r\n                if (!target || target.structureType !== STRUCTURE_EXTENSION || target.store.getFreeCapacity(RESOURCE_ENERGY) <= 0) {\r\n                    creep.memory['task']['target'] = null;\r\n                    //creep.memory['sendTaskRequest'] = false;\r\n                    target = undefined;\r\n                }\r\n            }\r\n            // Ê≤°ÁºìÂ≠òÂ∞±ÈáçÊñ∞Ëé∑Âèñ\r\n            if (!target) {\r\n                // Ëé∑ÂèñÊúâÈúÄÊ±ÇÁöÑÂª∫Á≠ë\r\n                target = creep.pos.findClosestByRange(FIND_MY_STRUCTURES, {\r\n                    // extension ‰∏≠ÁöÑËÉΩÈáèÊ≤°Â°´Êª°\r\n                    filter: s => ((s.structureType == STRUCTURE_EXTENSION || s.structureType == STRUCTURE_SPAWN) && (s.store.getFreeCapacity(RESOURCE_ENERGY) > 0))\r\n                });\r\n                if (!target) {\r\n                    // ÈÉΩÂ°´Êª°‰∫ÜÔºå‰ªªÂä°ÂÆåÊàê\r\n                    Memory['colony'][creep.memory['roomName']]['dpt_logistic']['fillTask'] = false;\r\n                    creep.memory['task']['type'] = null;\r\n                    return true;\r\n                }\r\n                // ÂÜôÂÖ•ÁºìÂ≠ò\r\n                creep.memory['task']['target'] = target.id;\r\n            }\r\n            /*\r\n            const target = <StructureExtension>creep.pos.findClosestByRange(FIND_MY_STRUCTURES, {\r\n                filter: s => ((s.structureType == STRUCTURE_EXTENSION || s.structureType == STRUCTURE_SPAWN) && (s.store.getFreeCapacity(RESOURCE_ENERGY) > 0))\r\n            })\r\n            */\r\n            creep.moveTo(target.pos);\r\n            const result = creep.transfer(target, RESOURCE_ENERGY);\r\n            if (result === ERR_NOT_ENOUGH_RESOURCES || result === ERR_FULL)\r\n                return true;\r\n            else if (result != OK && result != ERR_NOT_IN_RANGE)\r\n                creep.say(`ÊãìÂ±ïÂ°´ÂÖÖ ${result}`);\r\n            if (creep.store[RESOURCE_ENERGY] === 0)\r\n                return true;\r\n            return false;\r\n        }\r\n    },\r\n    MOVE: {\r\n        source: (creep) => {\r\n            creep.say('üí§');\r\n            return false;\r\n        },\r\n        target: (creep) => {\r\n            return false;\r\n        }\r\n    },\r\n    TRANSFER: {\r\n        source: (creep) => {\r\n            const source = Game.getObjectById(creep.memory['task']['source']);\r\n            //CHECK IF CREEP STORAGE IS EMPTY\r\n            //@ts-ignore\r\n            if (creep.withdraw(source, creep.memory['task']['target']['resourceType']) == ERR_NOT_IN_RANGE) { //@ts-ignore\r\n                creep.moveTo(source);\r\n            }\r\n            return creep.store.getFreeCapacity() <= 0;\r\n        },\r\n        target: (creep) => {\r\n            const target = Game.getObjectById(creep.memory['task']['target']['id']);\r\n            if (target) {\r\n                const resourceType = creep.memory['task']['target']['resourceType'];\r\n                const transfer = creep.transfer(target, resourceType);\r\n                const creepStorageIni = creep.store[resourceType];\r\n                const amountNeeded = creep.memory['task']['target']['amount'];\r\n                if (transfer == ERR_NOT_IN_RANGE) {\r\n                    //const pos = new RoomPosition(creep.memory['task']['target']['pos'][0], creep.memory['task']['target']['pos'][1], creep.memory['task']['target']['roomName']);\r\n                    creep.moveTo(target);\r\n                }\r\n                else if (transfer == OK) {\r\n                    creep.memory['task']['amountDone'] = creep.memory['task']['amountDone'] + creepStorageIni;\r\n                }\r\n                else if (transfer == ERR_FULL && amountNeeded != -1) {\r\n                    creep.memory['task']['type'] = null;\r\n                    //creep.memory['sendTaskRequest'] = false;\r\n                    notifyTaskCompleteTransfer(creep, target);\r\n                    creep.say('‚ùå');\r\n                    return true;\r\n                }\r\n                if (amountNeeded != -1) {\r\n                    if (creep.memory['task']['amountDone'] >= amountNeeded) { //task complete\r\n                        creep.memory['task']['type'] = null;\r\n                        //creep.memory['sendTaskRequest'] = false;\r\n                        notifyTaskCompleteTransfer(creep, target);\r\n                        return true;\r\n                    }\r\n                    else\r\n                        return (creep.store.getUsedCapacity() <= 0);\r\n                }\r\n                else\r\n                    return (creep.store.getUsedCapacity() <= 0);\r\n            }\r\n            else { //reset task, only in case of creep\r\n                creep.memory['task']['type'] = null;\r\n                //creep.memory['sendTaskRequest'] = false;\r\n                creep.say('‚ùå');\r\n                return true;\r\n            }\r\n        }\r\n    },\r\n    WITHDRAW: {\r\n        /*\r\n        const r: WidrawTask = {\r\n            type: 'WITHDRAW',\r\n            source: widrawRequest.source,\r\n            target: this.getMaxCapacityStorageID(),\r\n            amountDone: 0\r\n        }\r\n        */\r\n        /*\r\n        'source': {\r\n            'id': id,\r\n            'resourceType': resourceList[resourceIndex] as ResourceConstant,\r\n            'roomName': container.room.name,\r\n            'pos': [container.pos.x, container.pos.y]\r\n            \r\n        }\r\n        */\r\n        source: (creep) => {\r\n            const source = Game.getObjectById(creep.memory['task']['source']['id']);\r\n            //if missing source delete task\r\n            if (!source) {\r\n                creep.memory['task']['type'] = null;\r\n                //creep.memory['sendTaskRequest'] = false;\r\n                creep.say('‚ùå');\r\n                return false;\r\n            }\r\n            const resourceType = creep.memory['task']['source']['resourceType'];\r\n            if (creep.withdraw(source, resourceType) == ERR_NOT_IN_RANGE) {\r\n                const sourceTask = creep.memory['task']['source'];\r\n                const sourcePos = new RoomPosition(sourceTask['pos'][0], sourceTask['pos'][1], sourceTask['roomName']);\r\n                creep.moveTo(sourcePos);\r\n                return false;\r\n            }\r\n            else {\r\n                notifyTaskCompleteWithdraw(creep, source);\r\n                return true;\r\n            }\r\n        },\r\n        target: (creep) => {\r\n            const target = Game.getObjectById(creep.memory['task']['source']['id']);\r\n            const resourceType = Object.keys(creep.store)[0];\r\n            if (creep.transfer(target, resourceType) == ERR_NOT_IN_RANGE) {\r\n                creep.moveTo(target);\r\n                return false;\r\n            }\r\n            if (creep.store.getUsedCapacity() <= 0) {\r\n                creep.memory['task']['type'] = null;\r\n                //creep.memory['sendTaskRequest'] = false;\r\n                creep.say('‚ùå');\r\n                return true;\r\n            }\r\n            else\r\n                return false;\r\n        }\r\n    }\r\n};\r\nexport default roles;\r\n//# sourceMappingURL=advanced.js.map","references":["C:/Users/heche/AppData/Local/Screeps/scripts/127_0_0_1___21025/Winsnow/src/colony/dpt_comunication.ts","C:/Users/heche/AppData/Local/Screeps/scripts/127_0_0_1___21025/Winsnow/src/department/dpt_harvest/Dpt_Harvest.ts","C:/Users/heche/AppData/Local/Screeps/scripts/127_0_0_1___21025/Winsnow/src/roomPlanning/planningUtils.ts","C:/Users/heche/AppData/Local/Screeps/scripts/127_0_0_1___21025/Winsnow/src/structure/Tower.ts"],"map":"{\"version\":3,\"file\":\"advanced.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/creep/role/advanced.ts\"],\"names\":[],\"mappings\":\"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\"}"}
