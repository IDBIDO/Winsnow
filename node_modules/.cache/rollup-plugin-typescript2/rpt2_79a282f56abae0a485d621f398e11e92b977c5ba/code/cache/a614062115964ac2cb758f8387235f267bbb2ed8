{"code":"/**\r\n * 把 obj2 的原型合并到 obj1 的原型上\r\n * 如果原型的键以 Getter 结尾，则将会把其挂载为 getter 属性\r\n * @param obj1 要挂载到的对象\r\n * @param obj2 要进行挂载的对象\r\n */\r\nexport const assignPrototype = function (obj1, obj2) {\r\n    Object.getOwnPropertyNames(obj2.prototype).forEach(key => {\r\n        if (key.includes('Getter')) {\r\n            Object.defineProperty(obj1.prototype, key.split('Getter')[0], {\r\n                get: obj2.prototype[key],\r\n                enumerable: false,\r\n                configurable: true\r\n            });\r\n        }\r\n        else\r\n            obj1.prototype[key] = obj2.prototype[key];\r\n    });\r\n};\r\n//# sourceMappingURL=utils.js.map","references":[],"map":"{\"version\":3,\"file\":\"utils.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/utils.ts\"],\"names\":[],\"mappings\":\"AAEC;;;;;GAKG;AACH,MAAM,CAAC,MAAM,eAAe,GAAG,UAAS,IAA0B,EAAE,IAA0B;IAC1F,MAAM,CAAC,mBAAmB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;QACrD,IAAI,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;YACxB,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,SAAS,EAAE,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE;gBAC1D,GAAG,EAAE,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC;gBACxB,UAAU,EAAE,KAAK;gBACjB,YAAY,EAAE,IAAI;aACrB,CAAC,CAAA;SACL;;YACI,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAA;IAClD,CAAC,CAAC,CAAA;AACN,CAAC,CAAA\"}"}
