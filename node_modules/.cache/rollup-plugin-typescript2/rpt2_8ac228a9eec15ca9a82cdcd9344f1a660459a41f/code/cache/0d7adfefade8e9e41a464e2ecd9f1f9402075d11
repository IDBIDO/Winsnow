{"code":"import { sendRequest } from \"@/colony/dpt_comunication\";\r\nconst roles = {\r\n    manager: (data) => ({\r\n        source: creep => {\r\n            return true;\r\n        },\r\n        target: creep => {\r\n            return false;\r\n        }\r\n    }),\r\n    worker: (data) => ({\r\n        source: creep => {\r\n            const task = creep.memory['task'];\r\n            if (task['target']['id'] == null) {\r\n                if (creep.memory['waiting'])\r\n                    creep.say('zz');\r\n                else {\r\n                    sendRequest(creep.memory['roomName'], 'dpt_build', creep.name);\r\n                    creep.memory['waiting'] = true; //dpt_build will change to false\r\n                }\r\n                return false;\r\n            }\r\n            else {\r\n                const taskType = task['type'];\r\n                return workerTaskOperation[taskType].source(creep);\r\n            }\r\n        },\r\n        target: creep => {\r\n            const taskType = creep.memory['task']['type'];\r\n            return workerTaskOperation[taskType].target(creep);\r\n        }\r\n    }),\r\n    transporter: (data) => ({\r\n        source: creep => {\r\n            const taskType = creep.memory['task']['type'];\r\n            if (taskType) {\r\n                return transferTaskOperations[taskType].source(creep);\r\n            }\r\n            else {\r\n                //send task \r\n                if (creep.memory['sendTaskRequest']) {\r\n                    creep.say('üí§');\r\n                }\r\n                else {\r\n                    creep.say('‚úâÔ∏è');\r\n                    sendRequest(creep.memory['roomName'], 'dpt_logistic', creep.name);\r\n                    creep.memory['sendTaskRequest'] = true;\r\n                }\r\n                return false;\r\n            }\r\n        },\r\n        target: creep => {\r\n            const taskType = creep.memory['task']['type'];\r\n            if (taskType) {\r\n                return transferTaskOperations[taskType].target(creep);\r\n            }\r\n            else\r\n                return true; //get new task\r\n        }\r\n    })\r\n};\r\nexport const transferTaskOperations = {\r\n    FILL: {\r\n        source: (creep) => {\r\n            const source = Game.getObjectById(creep.memory['task']['source']);\r\n            //@ts-ignore\r\n            if (creep.withdraw(source, 'energy') == ERR_NOT_IN_RANGE) { //@ts-ignore\r\n                creep.moveTo(source);\r\n            }\r\n            return creep.store.getFreeCapacity() <= 0;\r\n        },\r\n        target: (creep) => {\r\n            const targetID = creep.memory['task']['target'];\r\n            let target;\r\n            if (targetID) {\r\n                target = Game.getObjectById(targetID);\r\n                if (!target || target.structureType !== STRUCTURE_EXTENSION || target.store.getFreeCapacity(RESOURCE_ENERGY) <= 0) {\r\n                    delete creep.memory['task']['target'];\r\n                    target = undefined;\r\n                }\r\n            }\r\n            // Ê≤°ÁºìÂ≠òÂ∞±ÈáçÊñ∞Ëé∑Âèñ\r\n            if (!target) {\r\n                // Ëé∑ÂèñÊúâÈúÄÊ±ÇÁöÑÂª∫Á≠ë\r\n                target = creep.pos.findClosestByRange(FIND_MY_STRUCTURES, {\r\n                    // extension ‰∏≠ÁöÑËÉΩÈáèÊ≤°Â°´Êª°\r\n                    filter: s => ((s.structureType == STRUCTURE_EXTENSION || s.structureType == STRUCTURE_SPAWN) && (s.store.getFreeCapacity(RESOURCE_ENERGY) > 0))\r\n                });\r\n                if (!target) {\r\n                    // ÈÉΩÂ°´Êª°‰∫ÜÔºå‰ªªÂä°ÂÆåÊàê\r\n                    //creep.room.deleteCurrentRoomTransferTask()\r\n                    //set fill task to true\r\n                    Memory['colony'][creep.memory['roomName']]['dpt_logistic']['fillTask'] = false;\r\n                    creep.memory['task']['type'] = null;\r\n                    creep.memory['sendTaskRequest'] = false;\r\n                    return true;\r\n                }\r\n                // ÂÜôÂÖ•ÁºìÂ≠ò\r\n                creep.memory['task']['target'] = target.id;\r\n            }\r\n            /*\r\n            const target = <StructureExtension>creep.pos.findClosestByRange(FIND_MY_STRUCTURES, {\r\n                filter: s => ((s.structureType == STRUCTURE_EXTENSION || s.structureType == STRUCTURE_SPAWN) && (s.store.getFreeCapacity(RESOURCE_ENERGY) > 0))\r\n            })\r\n            */\r\n            creep.moveTo(target.pos);\r\n            const result = creep.transfer(target, RESOURCE_ENERGY);\r\n            if (result === ERR_NOT_ENOUGH_RESOURCES || result === ERR_FULL)\r\n                return true;\r\n            else if (result != OK && result != ERR_NOT_IN_RANGE)\r\n                creep.say(`ÊãìÂ±ïÂ°´ÂÖÖ ${result}`);\r\n            if (creep.store[RESOURCE_ENERGY] === 0)\r\n                return true;\r\n            return false;\r\n        }\r\n    },\r\n    MOVE: {\r\n        source: (creep) => {\r\n            creep.say('üí§');\r\n            return false;\r\n        },\r\n        target: (creep) => {\r\n            return false;\r\n        }\r\n    },\r\n    TRANSFER: {\r\n        source: (creep) => {\r\n            const source = Game.getObjectById(creep.memory['task']['source']);\r\n            //CHECK IF CREEP STORAGE IS EMPTY\r\n            //@ts-ignore\r\n            if (creep.withdraw(source, creep.memory['task']['target']['resourceType']) == ERR_NOT_IN_RANGE) { //@ts-ignore\r\n                creep.moveTo(source);\r\n            }\r\n            return creep.store.getFreeCapacity() <= 0;\r\n        },\r\n        target: (creep) => {\r\n            const target = Game.getObjectById(creep.memory['task']['target']['id']);\r\n            if (target) { //@ts-ignore\r\n                const transfer = creep.transfer(target, creep.memory['task']['target']['resourceType']);\r\n                const creepStorageIni = creep.store.getUsedCapacity();\r\n                if (transfer == ERR_NOT_IN_RANGE) {\r\n                    //const pos = new RoomPosition(creep.memory['task']['target']['pos'][0], creep.memory['task']['target']['pos'][1], creep.memory['task']['target']['roomName']);\r\n                    //@ts-ignore\r\n                    creep.moveTo(target);\r\n                }\r\n                else if (transfer == OK) {\r\n                    creep.memory['amountDone'] = creep.memory['amountDone'] + creepStorageIni;\r\n                }\r\n                const amountNeeded = creep.memory['task']['target']['amount'];\r\n                if (amountNeeded != -1) {\r\n                    if (creep.memory['amountDone'] >= amountNeeded) { //task complete\r\n                        creep.memory['task']['type'] = null;\r\n                        return true;\r\n                    }\r\n                    else\r\n                        return (creep.store.getUsedCapacity() <= 0);\r\n                }\r\n                else\r\n                    return (creep.store.getUsedCapacity() <= 0);\r\n            }\r\n            else { //reset task\r\n                creep.memory['task']['type'] = null;\r\n                creep.memory['sendTaskRequest'] = false;\r\n                creep.say('‚ùå');\r\n                return true;\r\n            }\r\n        }\r\n    },\r\n    WITHDRAW: {\r\n        source: (creep) => {\r\n            return false;\r\n        },\r\n        target: (creep) => {\r\n            return false;\r\n        }\r\n    }\r\n};\r\nexport const workerTaskOperation = {\r\n    BUILD: {\r\n        source: (creep) => {\r\n            const pos = creep.memory['task']['target']['pos'];\r\n            const targetPos = new RoomPosition(pos[0], pos[1], creep.memory['roomName']);\r\n            if (creep.pos.inRangeTo(targetPos, 3))\r\n                return true;\r\n            else\r\n                return false;\r\n        },\r\n        target: (creep) => {\r\n            const target = Game.getObjectById(creep.memory['task']['target']['id']);\r\n            if (target) { //@ts-ignore\r\n                creep.build(target);\r\n                return false;\r\n            }\r\n            else {\r\n                //notify contruction completation\r\n            }\r\n        }\r\n    },\r\n    REPAIR: {\r\n        source: (creep) => {\r\n            return false;\r\n        },\r\n        target: (creep) => {\r\n            return false;\r\n        }\r\n    }\r\n};\r\nexport default roles;\r\n//# sourceMappingURL=advanced.js.map","references":["C:/Users/heche/AppData/Local/Screeps/scripts/127_0_0_1___21025/Winsnow/src/colony/dpt_comunication.ts","C:/Users/heche/AppData/Local/Screeps/scripts/127_0_0_1___21025/Winsnow/src/roomPlanning/planningUtils.ts"],"map":"{\"version\":3,\"file\":\"advanced.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/creep/role/advanced.ts\"],\"names\":[],\"mappings\":\"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\"}"}
