{"code":"import { sendLogisticTask, sendORBuildingTaskCompletation } from \"@/colony/dpt_comunication\";\r\nimport { logisticTaskName } from \"@/colony/nameManagement\";\r\nimport { getContainerIndex, saveStructureID } from \"@/colony/planningUtils\";\r\nimport Dpt_build from \"@/department/dpt_build/Dpt_Build\";\r\nconst roles = {\r\n    colonizer: (data) => ({\r\n        source: creep => {\r\n            const source = Game.getObjectById(data.source);\r\n            if (creep.harvest(source) == ERR_NOT_IN_RANGE) {\r\n                creep.moveTo(source);\r\n            }\r\n            return creep.store.getFreeCapacity() <= 0;\r\n        },\r\n        target: creep => {\r\n            const cSide = creep.pos.findClosestByRange(FIND_CONSTRUCTION_SITES);\r\n            const controller = Game.rooms[creep.room.name].controller;\r\n            if (creep.upgradeController(controller) == ERR_NOT_IN_RANGE)\r\n                creep.moveTo(controller);\r\n            /*\r\n            if (cSide) {\r\n                if (creep.build(cSide) == ERR_NOT_IN_RANGE) creep.moveTo(cSide);\r\n            }\r\n            */\r\n            return (creep.store.getUsedCapacity() <= 0);\r\n        }\r\n    }),\r\n    builder: (data) => ({\r\n        source: creep => {\r\n            const target = creep.memory['task']['target'];\r\n            if (target['id']) {\r\n                const contructionSide = Game.getObjectById(target['id']);\r\n                //task no complete\r\n                if (contructionSide) { //@ts-ignore\r\n                    //send logistic request\r\n                    if (!creep.memory['sendLogisticRequest']) {\r\n                        const request = {\r\n                            'type': 'TRANSFER',\r\n                            'target': {\r\n                                'id': creep.id,\r\n                                'resourceType': 'energy',\r\n                                'amount': -1\r\n                            }\r\n                        };\r\n                        creep.say('LogisticTask Sended');\r\n                        sendLogisticTask(creep.memory['roomName'], logisticTaskName(request), request);\r\n                        creep.memory['sendLogisticRequest'] = true;\r\n                    }\r\n                    //@ts-ignore\r\n                    if (creep.pos.inRangeTo(contructionSide, 3))\r\n                        return true;\r\n                    else { //@ts-ignore\r\n                        creep.moveTo(contructionSide, { ignoreCreeps: false });\r\n                        return false;\r\n                    }\r\n                }\r\n                else { //constructionSide complete, delete creep.memory\r\n                    creep.memory['task']['target']['id'] = null;\r\n                    creep.memory['task']['target']['pos'] = null;\r\n                    creep.memory['task']['target']['roomName'] = null;\r\n                    return false;\r\n                }\r\n            }\r\n            else { //no target, try to find a target\r\n                if (Game.time % 13 == 0) {\r\n                    const closeContructionSide = creep.pos.findClosestByRange(FIND_CONSTRUCTION_SITES);\r\n                    if (closeContructionSide) {\r\n                        //console.log(creep.memory['task']['target']['id']);\r\n                        creep.memory['task']['target']['id'] = closeContructionSide.id;\r\n                        creep.memory['task']['target']['pos'] = [closeContructionSide.pos.x, closeContructionSide.pos.y];\r\n                        creep.memory['task']['target']['roomName'] = closeContructionSide.room;\r\n                    }\r\n                    else {\r\n                        //send task request to dpt_build\r\n                        //this request will be delete if departament do not have task to offer\r\n                        //sendRequest(creep.memory['roomName'], 'dpt_build', creep.name);  \r\n                    }\r\n                }\r\n                else\r\n                    creep.say('üí§');\r\n                return false;\r\n            }\r\n        },\r\n        target: creep => {\r\n            const target = Game.getObjectById(creep.memory['task']['target']['id']);\r\n            if (target) {\r\n                const r = creep.build(target);\r\n                if (r == ERR_NOT_ENOUGH_ENERGY)\r\n                    creep.say('‚ö°');\r\n                else if (r == ERR_NOT_IN_RANGE)\r\n                    creep.moveTo(target, { ignoreCreeps: true });\r\n                return false;\r\n            }\r\n            else { //contructionside complete, change state to source to get new task\r\n                Dpt_build.deleteBuildTask(creep.memory['roomName'], creep.memory['task']['target']['id']);\r\n                creep.memory['task']['target']['id'] = null;\r\n                creep.memory['task']['target']['pos'] = null;\r\n                creep.memory['task']['target']['roomName'] = null;\r\n                return true;\r\n            }\r\n            //return creep.store[RESOURCE_ENERGY] <= 0\r\n        }\r\n    }),\r\n    harvester: (data) => ({\r\n        source: creep => {\r\n            const source = Game.getObjectById(data.source);\r\n            if (creep.harvest(source) == ERR_NOT_IN_RANGE) {\r\n                creep.moveTo(source);\r\n            }\r\n            //change state if creep store max\r\n            return creep.store.getFreeCapacity() <= 0;\r\n        },\r\n        target: creep => {\r\n            let target;\r\n            target = Game.getObjectById(data.target);\r\n            /*  CODE FOR REMOTEHARVESTER\r\n            //if target is a creep, throw a task to call a transporter\r\n            if (!target) {\r\n                if(!creep.memory['waiting']) {\r\n                    //publisher.callSourceTransporter(creep);\r\n                    sendRequest(creep.memory['roomName'], creep.memory['department'], creep.name);\r\n                    creep.memory['waiting'] = true;\r\n                }\r\n            }\r\n            */\r\n            /*\r\n            else if (target instanceof Creep) {\r\n                creep.transfer(target, RESOURCE_ENERGY)\r\n            }\r\n            */\r\n            if (target) {\r\n                creep.transfer(target, RESOURCE_ENERGY);\r\n            }\r\n            return (creep.store.getUsedCapacity() <= 0);\r\n        }\r\n    }),\r\n    initializer: (data) => ({\r\n        source: creep => {\r\n            const source = Game.getObjectById(data.source);\r\n            if (creep.harvest(source) == ERR_NOT_IN_RANGE) {\r\n                creep.moveTo(source);\r\n            }\r\n            return creep.store.getFreeCapacity() <= 0;\r\n        },\r\n        target: creep => {\r\n            const queen = Game.creeps['Queen' + creep.room.name];\r\n            if (queen && creep.pos.isNearTo(queen.pos)) {\r\n                creep.transfer(queen, 'energy');\r\n            }\r\n            else {\r\n                const target = Game.getObjectById(data.target.id);\r\n                if (target) {\r\n                    if (target instanceof ConstructionSite) {\r\n                        creep.build(target);\r\n                    }\r\n                    else if (target instanceof Structure) {\r\n                        creep.transfer(target, 'energy');\r\n                    }\r\n                }\r\n                else { //CHANGE ROLE TO HARVESTER\r\n                    const pos = new RoomPosition(data.target.pos[0], data.target.pos[1], creep.memory['roomName']);\r\n                    const container = pos.lookFor(LOOK_STRUCTURES)[0];\r\n                    creep.memory['task']['target'] = container.id;\r\n                    creep.memory['role'] = 'harvester';\r\n                }\r\n            }\r\n            return (creep.store.getUsedCapacity() <= 0);\r\n        }\r\n    }),\r\n    iniQueen: (data) => ({\r\n        source: creep => {\r\n            const nearInitializer = creep.pos.findClosestByRange(FIND_MY_CREEPS, {\r\n                filter: function (target) {\r\n                    return target.name != creep.name;\r\n                }\r\n            });\r\n            if (nearInitializer) {\r\n                //console.log(creep.moveTo(nearInitializer));\r\n                creep.moveTo(nearInitializer);\r\n            }\r\n            // Ëá™Â∑±Ë∫´‰∏äÁöÑËÉΩÈáèË£ÖÊª°‰∫ÜÔºåËøîÂõû trueÔºàÂàáÊç¢Ëá≥ target Èò∂ÊÆµÔºâ\r\n            return creep.store.getFreeCapacity() <= 0;\r\n        },\r\n        target: creep => {\r\n            const nearSpawn = creep.pos.findClosestByRange(FIND_MY_SPAWNS);\r\n            if (nearSpawn) {\r\n                if (nearSpawn.store.getFreeCapacity('energy') > 0) {\r\n                    if (creep.transfer(nearSpawn, 'energy') == ERR_NOT_IN_RANGE) {\r\n                        creep.moveTo(nearSpawn);\r\n                    }\r\n                }\r\n            }\r\n            if (Game.time % 7 == 0) {\r\n                const containers = creep.room.find(FIND_STRUCTURES, {\r\n                    filter: { structureType: STRUCTURE_CONTAINER }\r\n                });\r\n                if (containers.length >= 2) { //fase 1 finished\r\n                    sendORBuildingTaskCompletation(creep.memory['roomName']); //send task complet mens. to OR\r\n                    //save id to planning model\r\n                    const sourceContainer1Index = getContainerIndex(creep.room.name, 'container_source1');\r\n                    console.log(sourceContainer1Index);\r\n                    saveStructureID(creep.room.name, 'container', sourceContainer1Index, containers[0].id);\r\n                    const sourceContainer2Index = getContainerIndex(creep.room.name, 'container_source2');\r\n                    saveStructureID(creep.room.name, 'container', sourceContainer2Index, containers[1].id);\r\n                    Memory['colony'][creep.memory['roomName']]['dpt_logistic']['storage'].push(containers[0].id);\r\n                    Memory['colony'][creep.memory['roomName']]['dpt_logistic']['storage'].push(containers[1].id);\r\n                    creep.memory['role'] = 'transporter'; //change queen role to transporter\r\n                }\r\n            }\r\n            ;\r\n            return creep.store[RESOURCE_ENERGY] <= 0;\r\n        }\r\n    }),\r\n    //Game.creeps['QueenW2N5'].memory['role] = 'iniQueen\r\n    /*\r\n    transporter: (data: LogisticData): ICreepConfig => ({\r\n        source: creep => {\r\n            const sourceID = creep.memory['data']['source']['id'];\r\n            const source = Game.getObjectById(sourceID);\r\n            if (source instanceof Creep) {\r\n                creep.moveTo(source);\r\n            }\r\n    \r\n            return false;\r\n        },\r\n        target: creep => {\r\n            return false;\r\n        }\r\n\r\n    }),\r\n    */\r\n};\r\nexport default roles;\r\n//# sourceMappingURL=basic.js.map","references":["C:/Users/heche/AppData/Local/Screeps/scripts/127_0_0_1___21025/Winsnow/src/colony/dpt_comunication.ts","C:/Users/heche/AppData/Local/Screeps/scripts/127_0_0_1___21025/Winsnow/src/colony/nameManagement.ts","C:/Users/heche/AppData/Local/Screeps/scripts/127_0_0_1___21025/Winsnow/src/colony/planningUtils.ts","C:/Users/heche/AppData/Local/Screeps/scripts/127_0_0_1___21025/Winsnow/src/department/dpt_build/Dpt_Build.ts","C:/Users/heche/AppData/Local/Screeps/scripts/127_0_0_1___21025/Winsnow/src/creep/taskPublisher.ts"],"map":"{\"version\":3,\"file\":\"basic.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/creep/role/basic.ts\"],\"names\":[],\"mappings\":\"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\"}"}
