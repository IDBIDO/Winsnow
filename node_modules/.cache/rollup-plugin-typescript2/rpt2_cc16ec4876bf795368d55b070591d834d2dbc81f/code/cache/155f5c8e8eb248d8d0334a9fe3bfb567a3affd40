{"code":"import * as planningUtils from \"./planningUtils\";\r\nimport * as names from \"../colony/nameManagement\";\r\nimport { sendBuildTask } from \"@/colony/dpt_comunication\";\r\nimport { CreepSpawning } from \"@/structure/CreepSpawning\";\r\nimport Dpt_Harvest from \"@/department/dpt_harvest/Dpt_Harvest\";\r\n/** CONTROL ALL DEPARTMENT */\r\nexport class OperationReserch {\r\n    constructor(mainRoom) {\r\n        this.mainRoom = mainRoom;\r\n        this.memory = Memory['colony'][mainRoom]['state'];\r\n    }\r\n    /** Funtion to control creep numbers, only used for OR */\r\n    sendToSpawnInitializacion(creepName, role, task, dpt, pull) {\r\n        Memory['colony'][this.mainRoom]['creepSpawning']['task'][creepName] = {};\r\n        const spawnTask = Memory['colony'][this.mainRoom]['creepSpawning']['task'][creepName];\r\n        //console.log(creepName);\r\n        spawnTask['role'] = role;\r\n        spawnTask['roomName'] = this.mainRoom;\r\n        spawnTask['department'] = dpt;\r\n        spawnTask['task'] = task;\r\n        spawnTask['dontPullMe'] = pull;\r\n    }\r\n    /************************** buildRCL 1 *********************************/\r\n    /** fase 0 */\r\n    putSourceUpgraderContainers() {\r\n        const sourceContainer1Pos = planningUtils.getContainerPos(this.mainRoom, \"container_source1\");\r\n        Game.rooms[this.mainRoom].createConstructionSite(sourceContainer1Pos[0], sourceContainer1Pos[1], 'container');\r\n        const sourceContainer2Pos = planningUtils.getContainerPos(this.mainRoom, \"container_source2\");\r\n        Game.rooms[this.mainRoom].createConstructionSite(sourceContainer2Pos[0], sourceContainer2Pos[1], 'container');\r\n        const controllerContainerPos = planningUtils.getContainerPos(this.mainRoom, 'container_controller');\r\n        Game.rooms[this.mainRoom].createConstructionSite(controllerContainerPos[0], controllerContainerPos[1], 'container');\r\n        this.memory['buildColony']['fase'] = 1;\r\n        this.memory['buildColony']['working'] = false;\r\n    }\r\n    /** fase 1 */\r\n    buildSourceContainers() {\r\n        const sourceContainer1Pos = planningUtils.getContainerPos(this.mainRoom, \"container_source1\");\r\n        const constructionSideID1 = planningUtils.getConstructionSideID(this.mainRoom, sourceContainer1Pos);\r\n        let numCreepsNeeded1 = planningUtils.positionToHarvest(this.mainRoom, planningUtils.getSourceEnery1Pos(this.mainRoom)).length;\r\n        if (numCreepsNeeded1 > 3)\r\n            numCreepsNeeded1 = 3;\r\n        const data1 = {\r\n            source: planningUtils.getSourceEnery1ID(this.mainRoom),\r\n            target: {\r\n                id: constructionSideID1,\r\n                pos: [sourceContainer1Pos[0], sourceContainer1Pos[1]]\r\n            }\r\n        };\r\n        const sourceContainer2Pos = planningUtils.getContainerPos(this.mainRoom, \"container_source2\");\r\n        //Game.rooms[this.mainRoom].createConstructionSite(sourceContainer2Pos[0], sourceContainer2Pos[1], 'container');\r\n        const constructionSideID2 = planningUtils.getConstructionSideID(this.mainRoom, sourceContainer2Pos);\r\n        let numCreepsNeeded2 = planningUtils.positionToHarvest(this.mainRoom, planningUtils.getSourceEnery2Pos(this.mainRoom)).length;\r\n        if (numCreepsNeeded2 > 3)\r\n            numCreepsNeeded2 = 3;\r\n        const data2 = {\r\n            source: planningUtils.getSourceEnery2ID(this.mainRoom),\r\n            target: {\r\n                id: constructionSideID2,\r\n                pos: [sourceContainer2Pos[0], sourceContainer2Pos[1]]\r\n            }\r\n        };\r\n        //send spawn task\r\n        const totalNum = numCreepsNeeded1 + numCreepsNeeded2;\r\n        let par = true;\r\n        for (let i = 0; i < totalNum; ++i) {\r\n            const creepName = names.creepName();\r\n            if (par) {\r\n                //this.sendToSpawnInitializacion(creepName, 'initializer',  data1, 'dpt_harvest')\r\n                CreepSpawning.sendToSpawnInitializacion(this.mainRoom, creepName, 'initializer', data1, 'dpt_harvest', true);\r\n                Dpt_Harvest.assigHarvesterToSource(this.mainRoom, \"source1\", creepName);\r\n                par = false;\r\n                //save creep name to check task completation\r\n                this.memory['buildColony']['task']['building'] = false;\r\n            }\r\n            else {\r\n                CreepSpawning.sendToSpawnInitializacion(this.mainRoom, creepName, 'initializer', data2, 'dpt_harvest', true);\r\n                Dpt_Harvest.assigHarvesterToSource(this.mainRoom, \"source2\", creepName);\r\n                //this.sendToSpawnInitializacion(creepName, 'initializer',  data2, 'dpt_harvest');\r\n                par = true;\r\n            }\r\n        }\r\n    }\r\n    setCreepActualization() {\r\n        const colonyMem = Memory['colony'][this.mainRoom];\r\n        colonyMem['dpt_build']['actualize'] = true;\r\n    }\r\n    /** fase 2 */\r\n    buildUpgraderContainer() {\r\n        console.log('FASE 2: BUILD UPGRADER CONTAINER');\r\n        this.setCreepActualization();\r\n        /*\r\n        //5 transporter and 3 builders (including the queen)\r\n        for (let i = 0; i < 6; ++i) {\r\n            if ( i == 0  || i == 2 || i == 5)  {\r\n                //create builder\r\n                const creepName = names.creepName();\r\n                const data: BuilderData = {\r\n                    source: null,\r\n                    target: {\r\n                        id: null,\r\n                        pos: null,\r\n                        roomName: null\r\n                    },\r\n   \r\n                }\r\n                CreepSpawning.sendToSpawnInitializacion(this.mainRoom, creepName, 'builder', data, 'dpt_build', false);\r\n\r\n                //this.sendToSpawnInitializacion(creepName, 'builder', data, 'dpt_build');\r\n            }\r\n            else {\r\n                const creepName = names.creepName();\r\n                const data: LogisticData = {\r\n                    source: {\r\n                        id: null,\r\n                        roomName: this.mainRoom,\r\n                        pos: null\r\n                    },\r\n                    target: null\r\n                };\r\n                CreepSpawning.sendToSpawnInitializacion(this.mainRoom, creepName,  'transporter', data, 'dpt_logistic', false);\r\n\r\n                //this.sendToSpawnInitializacion(creepName, 'transporter', data, 'dpt_logistic');\r\n            }\r\n        }\r\n        */\r\n        //set logistic storage storage\r\n        /*\r\n        const sourceContainer1ID = planningUtils.getContainerID(this.mainRoom, 'container_source1');\r\n        const sourceContainer2ID = planningUtils.getContainerID(this.mainRoom, 'container_source2');\r\n        Memory['colony'][this.mainRoom]['dpt_logistic']['storage'].push(sourceContainer1ID);\r\n        Memory['colony'][this.mainRoom]['dpt_logistic']['storage'].push(sourceContainer2ID);\r\n        */\r\n        //send upgraderContainer build task to dpt_builder\r\n        const upgraderContainerList = Game.rooms[this.mainRoom].find(FIND_CONSTRUCTION_SITES);\r\n        //sendBuildTask(this.mainRoom, upgraderContainerList[0].id, upgraderContainerList[0].structureType,  [upgraderContainerList[0].pos.x, upgraderContainerList[0].pos.y]);\r\n        const buildData = {\r\n            'type': upgraderContainerList[0].structureType,\r\n            'roomName': this.mainRoom,\r\n            'pos': [upgraderContainerList[0].pos.x, upgraderContainerList[0].pos.y],\r\n            'modelReference': planningUtils.getContainerReference(this.mainRoom, 'container_controller')\r\n        };\r\n        sendBuildTask(upgraderContainerList[0].id, buildData);\r\n    }\r\n    buildReference(structureType, ref) {\r\n        const refData = Memory['colony'][this.mainRoom]['roomPlanning']['model'][structureType][ref];\r\n        const refPos = new RoomPosition(refData['pos'][0], refData['pos'][1], this.mainRoom); //@ts-ignore\r\n        const rcode = refPos.createConstructionSite(structureType);\r\n        //save reference and position\r\n        if (rcode == OK) {\r\n            const constructionSideRefPos = Memory['colony'][this.mainRoom]['roomPlanning']['constructionSide'];\r\n            constructionSideRefPos[structureType][ref] = [refPos.x, refPos.y];\r\n        }\r\n    }\r\n    /** fase 3 */\r\n    createSpawnToSourceRoad() {\r\n        //save controller container to dpt_upgrader\r\n        const controllerContainer = planningUtils.getContainerID(this.mainRoom, 'container_controller');\r\n        Memory['colony'][this.mainRoom]['dpt_upgrade']['storage'].push(controllerContainer);\r\n        const spawn0ToSource1RoadRef = Memory['colony'][this.mainRoom]['roomPlanning']['roadReference']['spawn0ToSource1'];\r\n        for (let i = 0; i < spawn0ToSource1RoadRef.length; ++i) {\r\n            this.buildReference('road', spawn0ToSource1RoadRef[i]);\r\n        }\r\n        const spawn0ToSource2RoadRef = Memory['colony'][this.mainRoom]['roomPlanning']['roadReference']['spawn0ToSource2'];\r\n        for (let i = 0; i < spawn0ToSource2RoadRef.length; ++i) {\r\n            this.buildReference('road', spawn0ToSource2RoadRef[i]);\r\n        }\r\n        const spawn0ToController = Memory['colony'][this.mainRoom]['roomPlanning']['roadReference']['spawn0ToController'];\r\n        for (let i = 0; i < spawn0ToController.length; ++i) {\r\n            this.buildReference('road', spawn0ToController[i]);\r\n        }\r\n        this.memory['buildColony']['fase'] = 4;\r\n        this.memory['buildColony']['working'] = false;\r\n    }\r\n    /** fase 4 */\r\n    sendConstructionSideToBuildTask(structureType) {\r\n        /*\r\n            {\r\n                'road'{\r\n                    9: [x, y],\r\n                    8: [x, y]\r\n                },\r\n                'extension' {\r\n                    \r\n                }\r\n            }\r\n        */\r\n        const constructionSideRefPos = Memory['colony'][this.mainRoom]['roomPlanning']['constructionSide'];\r\n        for (let ref in constructionSideRefPos[structureType]) {\r\n            const pos = constructionSideRefPos[structureType][ref];\r\n            const csPos = new RoomPosition(pos[0], pos[1], this.mainRoom);\r\n            const constructionSide = csPos.lookFor(LOOK_CONSTRUCTION_SITES);\r\n            for (let i = 0; i < constructionSide.length; ++i) {\r\n                if (constructionSide[i].structureType == structureType) {\r\n                    const buildData = {\r\n                        'type': constructionSide[i].structureType,\r\n                        'roomName': this.mainRoom,\r\n                        'pos': [constructionSide[i].pos.x, constructionSide[i].pos.y],\r\n                        'modelReference': parseInt(ref)\r\n                    };\r\n                    sendBuildTask(constructionSide[i].id, buildData);\r\n                    delete Memory['colony'][this.mainRoom]['roomPlanning']['temp']['road'][ref];\r\n                    if (structureType == 'road') {\r\n                        delete Memory['colony'][this.mainRoom]['roomPlanning']['constructionSide'][structureType][ref];\r\n                    }\r\n                    else if (structureType == 'extension') {\r\n                        delete Memory['colony'][this.mainRoom]['roomPlanning']['temp']['extension'][ref];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        /*\r\n        const contructionSideList =  Game.rooms[this.mainRoom].find(FIND_CONSTRUCTION_SITES);\r\n        for (let i = 0; i < contructionSideList.length; ++i) {\r\n            const buildData: BuildTask = {\r\n                'type': contructionSideList[i].structureType,\r\n                'roomName': this.mainRoom,\r\n                'pos': [contructionSideList[i].pos.x, contructionSideList[i].pos.y],\r\n                'modelReference': ref\r\n            }\r\n        }\r\n        sendBuildTask(contructionSideList[0].id, buildData);\r\n    \r\n        if (structureType == 'road') {\r\n            delete Memory['colony'][this.mainRoom]['roomPlanning']['temp']['road'][ref];\r\n        }\r\n        else if (structureType == 'extension') {\r\n            delete Memory['colony'][this.mainRoom]['roomPlanning']['temp']['extension'][ref];\r\n        }\r\n        */\r\n    }\r\n    sendBuildTaskRCL0fase4() {\r\n        this.sendConstructionSideToBuildTask('road');\r\n    }\r\n    buildColony() {\r\n        const rcl = this.memory['buildColony']['buildRCL'];\r\n        const fase = this.memory['buildColony']['fase'];\r\n        switch (rcl) {\r\n            case 0: //new colony, only have a spawn\r\n                if (fase == 0)\r\n                    this.putSourceUpgraderContainers();\r\n                else if (fase == 1)\r\n                    this.buildSourceContainers(); //building Task controlled by iniQueen\r\n                else if (fase == 2)\r\n                    this.buildUpgraderContainer(); //buildingTask controlled by dpt_builder\r\n                else if (fase == 3)\r\n                    this.createSpawnToSourceRoad(); //levelUpTask controlled by Controller\r\n                else {\r\n                    this.sendBuildTaskRCL0fase4();\r\n                    Memory['colony'][this.mainRoom]['dpt_upgrader']['actualize'] = true;\r\n                }\r\n                ;\r\n                break;\r\n            case 1:\r\n                break;\r\n            case 2:\r\n                break;\r\n            case 3:\r\n                break;\r\n            case 4:\r\n                break;\r\n            case 5:\r\n                break;\r\n            case 6:\r\n                break;\r\n            case 7:\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    /*\r\n    private sourceContainersBuild(): boolean {\r\n        const container_source1 = planningUtils.getContainerID(this.mainRoom, 'container_source1');\r\n        const container_source2 = planningUtils.getContainerID(this.mainRoom, 'container_source2');\r\n        if (container_source1 != null && container_source2 != null) return true;\r\n\r\n    }\r\n*/\r\n    checkBuildTaskDone() {\r\n        return this.memory['buildColony']['task']['building'];\r\n    }\r\n    resetFaseValues() {\r\n        this.memory['buildColony']['working'] = false; //tell OR to run next fase\r\n        this.memory['buildColony']['task']['building'] = false;\r\n        this.memory['buildColony']['task']['levelUP'] = false;\r\n    }\r\n    faseComplete() {\r\n        const rcl = this.memory['buildColony']['buildRCL'];\r\n        const fase = this.memory['buildColony']['fase'];\r\n        switch (rcl) {\r\n            case 0:\r\n                //fase 0 will jump automaty to fase 1\r\n                if (fase == 1) {\r\n                    if (this.checkBuildTaskDone()) {\r\n                        this.memory['buildColony']['fase'] = 2; //construct controller container\r\n                        this.resetFaseValues();\r\n                    }\r\n                }\r\n                //fase 2 complete if controller container build \r\n                else if (fase == 2) {\r\n                    if (this.checkBuildTaskDone()) {\r\n                        this.memory['buildColony']['fase'] = 3;\r\n                        this.resetFaseValues();\r\n                    }\r\n                }\r\n                else {\r\n                }\r\n            case 1:\r\n                break;\r\n            case 2:\r\n                break;\r\n            case 3:\r\n                break;\r\n            case 4:\r\n                break;\r\n            case 5:\r\n                break;\r\n            case 6:\r\n                break;\r\n            case 7:\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return false;\r\n    }\r\n    run() {\r\n        if (this.memory['buildColony']['buildRCL'] != 8 && Game.time % 13 == 0) {\r\n            if (!this.memory['buildColony']['working']) {\r\n                this.memory['buildColony']['working'] = true;\r\n                this.buildColony();\r\n            }\r\n            else { //if OR are working, check if all task complete\r\n                this.faseComplete();\r\n            }\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=OperationReserch.js.map","references":["C:/Users/heche/AppData/Local/Screeps/scripts/127_0_0_1___21025/Winsnow/src/operationResearch/planningUtils.ts","C:/Users/heche/AppData/Local/Screeps/scripts/127_0_0_1___21025/Winsnow/src/colony/planningUtils.ts","C:/Users/heche/AppData/Local/Screeps/scripts/127_0_0_1___21025/Winsnow/src/colony/nameManagement.ts","C:/Users/heche/AppData/Local/Screeps/scripts/127_0_0_1___21025/Winsnow/src/colony/dpt_comunication.ts","C:/Users/heche/AppData/Local/Screeps/scripts/127_0_0_1___21025/Winsnow/src/structure/CreepSpawning.ts","C:/Users/heche/AppData/Local/Screeps/scripts/127_0_0_1___21025/Winsnow/src/department/dpt_harvest/Dpt_Harvest.ts"],"map":"{\"version\":3,\"file\":\"OperationReserch.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/operationResearch/OperationReserch.ts\"],\"names\":[],\"mappings\":\"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\"}"}
